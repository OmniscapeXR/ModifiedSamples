(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["epicgames-frontend"] = factory();
	else
		root["epicgames-frontend"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../library/dist/lib-pixelstreamingfrontend.esm.js":
/*!************************************************************!*\
  !*** ../../library/dist/lib-pixelstreamingfrontend.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ __webpack_exports__AfkLogic),
/* harmony export */   "AfkTimedOutEvent": () => (/* binding */ __webpack_exports__AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* binding */ __webpack_exports__AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* binding */ __webpack_exports__AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* binding */ __webpack_exports__AfkWarningUpdateEvent),
/* harmony export */   "AggregatedStats": () => (/* binding */ __webpack_exports__AggregatedStats),
/* harmony export */   "CandidatePairStats": () => (/* binding */ __webpack_exports__CandidatePairStats),
/* harmony export */   "CandidateStat": () => (/* binding */ __webpack_exports__CandidateStat),
/* harmony export */   "Config": () => (/* binding */ __webpack_exports__Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ __webpack_exports__ControlSchemeType),
/* harmony export */   "DataChannelCloseEvent": () => (/* binding */ __webpack_exports__DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* binding */ __webpack_exports__DataChannelErrorEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* binding */ __webpack_exports__DataChannelOpenEvent),
/* harmony export */   "DataChannelStats": () => (/* binding */ __webpack_exports__DataChannelStats),
/* harmony export */   "EncoderSettings": () => (/* binding */ __webpack_exports__EncoderSettings),
/* harmony export */   "EventEmitter": () => (/* binding */ __webpack_exports__EventEmitter),
/* harmony export */   "Flags": () => (/* binding */ __webpack_exports__Flags),
/* harmony export */   "HideFreezeFrameEvent": () => (/* binding */ __webpack_exports__HideFreezeFrameEvent),
/* harmony export */   "InboundAudioStats": () => (/* binding */ __webpack_exports__InboundAudioStats),
/* harmony export */   "InboundVideoStats": () => (/* binding */ __webpack_exports__InboundVideoStats),
/* harmony export */   "InitialSettings": () => (/* binding */ __webpack_exports__InitialSettings),
/* harmony export */   "InitialSettingsEvent": () => (/* binding */ __webpack_exports__InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* binding */ __webpack_exports__LatencyTestResultEvent),
/* harmony export */   "LatencyTestResults": () => (/* binding */ __webpack_exports__LatencyTestResults),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* binding */ __webpack_exports__LoadFreezeFrameEvent),
/* harmony export */   "Logger": () => (/* binding */ __webpack_exports__Logger),
/* harmony export */   "MessageRecv": () => (/* binding */ __webpack_exports__MessageRecv),
/* harmony export */   "MessageSend": () => (/* binding */ __webpack_exports__MessageSend),
/* harmony export */   "MessageStreamerList": () => (/* binding */ __webpack_exports__MessageStreamerList),
/* harmony export */   "NumericParameters": () => (/* binding */ __webpack_exports__NumericParameters),
/* harmony export */   "OptionParameters": () => (/* binding */ __webpack_exports__OptionParameters),
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ __webpack_exports__OutBoundVideoStats),
/* harmony export */   "PixelStreaming": () => (/* binding */ __webpack_exports__PixelStreaming),
/* harmony export */   "PlayStreamErrorEvent": () => (/* binding */ __webpack_exports__PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* binding */ __webpack_exports__PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* binding */ __webpack_exports__PlayStreamRejectedEvent),
/* harmony export */   "SettingBase": () => (/* binding */ __webpack_exports__SettingBase),
/* harmony export */   "SettingFlag": () => (/* binding */ __webpack_exports__SettingFlag),
/* harmony export */   "SettingNumber": () => (/* binding */ __webpack_exports__SettingNumber),
/* harmony export */   "SettingOption": () => (/* binding */ __webpack_exports__SettingOption),
/* harmony export */   "SettingText": () => (/* binding */ __webpack_exports__SettingText),
/* harmony export */   "SettingsChangedEvent": () => (/* binding */ __webpack_exports__SettingsChangedEvent),
/* harmony export */   "SignallingProtocol": () => (/* binding */ __webpack_exports__SignallingProtocol),
/* harmony export */   "StatsReceivedEvent": () => (/* binding */ __webpack_exports__StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* binding */ __webpack_exports__StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* binding */ __webpack_exports__StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* binding */ __webpack_exports__StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* binding */ __webpack_exports__StreamReconnectEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* binding */ __webpack_exports__StreamerListMessageEvent),
/* harmony export */   "TextParameters": () => (/* binding */ __webpack_exports__TextParameters),
/* harmony export */   "UnquantizedAndDenormalizeUnsigned": () => (/* binding */ __webpack_exports__UnquantizedAndDenormalizeUnsigned),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* binding */ __webpack_exports__VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* binding */ __webpack_exports__VideoInitializedEvent),
/* harmony export */   "WebRTCSettings": () => (/* binding */ __webpack_exports__WebRTCSettings),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* binding */ __webpack_exports__WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* binding */ __webpack_exports__WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* binding */ __webpack_exports__WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* binding */ __webpack_exports__WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* binding */ __webpack_exports__WebRtcFailedEvent),
/* harmony export */   "WebRtcPlayerController": () => (/* binding */ __webpack_exports__WebRtcPlayerController),
/* harmony export */   "WebRtcSdpEvent": () => (/* binding */ __webpack_exports__WebRtcSdpEvent),
/* harmony export */   "WebSocketController": () => (/* binding */ __webpack_exports__WebSocketController),
/* harmony export */   "WebXRController": () => (/* binding */ __webpack_exports__WebXRController),
/* harmony export */   "XrFrameEvent": () => (/* binding */ __webpack_exports__XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* binding */ __webpack_exports__XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* binding */ __webpack_exports__XrSessionStartedEvent)
/* harmony export */ });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ "../../library/node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);

/******/ var __webpack_modules__ = ({

/***/ "./src/AFK/AFKController.ts":
/*!**********************************!*\
  !*** ./src/AFK/AFKController.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_304__) => {

__nested_webpack_require_304__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_304__.d(__webpack_exports__, {
/* harmony export */   "AFKController": () => (/* binding */ AFKController)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_304__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_304__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_304__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



class AFKController {
    constructor(config, pixelStreaming, onDismissAfk) {
        // time out logic details
        this.closeTimeout = 10;
        this.active = false;
        this.countdownActive = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.config = config;
        this.pixelStreaming = pixelStreaming;
        this.onDismissAfk = onDismissAfk;
        this.onAFKTimedOutCallback = () => {
            console.log('AFK timed out, did you want to override this callback?');
        };
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    onAfkClick() {
        clearInterval(this.countDownTimer);
        if (this.active || this.countdownActive) {
            this.startAfkWarningTimer();
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningDeactivateEvent());
        }
    }
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    startAfkWarningTimer() {
        if (this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKTimeoutSecs) > 0 &&
            this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.AFKDetection)) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    }
    /**
     * Stop the afk warning timer
     */
    stopAfkWarningTimer() {
        this.active = false;
        this.countdownActive = false;
        clearTimeout(this.warnTimer);
        clearInterval(this.countDownTimer);
    }
    /**
     * Pause the timer which when elapsed will warn the user they are inactive.
     */
    pauseAfkWarningTimer() {
        this.active = false;
    }
    /**
     * If the user interacts then reset the warning timer.
     */
    resetAfkWarningTimer() {
        if (this.active && this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.AFKDetection)) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(() => this.activateAfkEvent(), this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKTimeoutSecs) * 1000);
        }
    }
    /**
     * Show the AFK overlay and begin the countDown
     */
    activateAfkEvent() {
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.pauseAfkWarningTimer();
        // instantiate a new overlay
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningActivateEvent({
            countDown: this.countDown,
            dismissAfk: this.onDismissAfk
        }));
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.countdownActive = true;
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningUpdateEvent({ countDown: this.countDown }));
        // if we are in locked mouse exit pointerlock
        if (!this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.HoveringMouseMode)) {
            // minor hack to alleviate ios not supporting pointerlock
            if (document.exitPointerLock) {
                document.exitPointerLock();
            }
        }
        // reset our countDown interval accordingly
        this.countDownTimer = setInterval(() => {
            this.countDown--;
            if (this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkTimedOutEvent());
                this.onAFKTimedOutCallback();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'You have been disconnected due to inactivity');
                // switch off the afk feature as stream has closed
                this.stopAfkWarningTimer();
            }
            else {
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningUpdateEvent({ countDown: this.countDown }));
            }
        }, 1000);
    }
}


/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_5733__) => {

__nested_webpack_require_5733__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_5733__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType),
/* harmony export */   "Flags": () => (/* binding */ Flags),
/* harmony export */   "NumericParameters": () => (/* binding */ NumericParameters),
/* harmony export */   "OptionParameters": () => (/* binding */ OptionParameters),
/* harmony export */   "TextParameters": () => (/* binding */ TextParameters)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_5733__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _SettingFlag__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_5733__(/*! ./SettingFlag */ "./src/Config/SettingFlag.ts");
/* harmony import */ var _SettingNumber__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_5733__(/*! ./SettingNumber */ "./src/Config/SettingNumber.ts");
/* harmony import */ var _SettingText__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_5733__(/*! ./SettingText */ "./src/Config/SettingText.ts");
/* harmony import */ var _SettingOption__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_5733__(/*! ./SettingOption */ "./src/Config/SettingOption.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_5733__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.






/**
 * A collection of flags that can be toggled and are core to all Pixel Streaming experiences.
 * These are used in the `Config.Flags` map.
 */
class Flags {
}
Flags.AutoConnect = 'AutoConnect';
Flags.AutoPlayVideo = 'AutoPlayVideo';
Flags.AFKDetection = 'TimeoutIfIdle';
Flags.BrowserSendOffer = 'OfferToReceive';
Flags.HoveringMouseMode = 'HoveringMouse';
Flags.ForceMonoAudio = 'ForceMonoAudio';
Flags.ForceTURN = 'ForceTURN';
Flags.FakeMouseWithTouches = 'FakeMouseWithTouches';
Flags.IsQualityController = 'ControlsQuality';
Flags.MatchViewportResolution = 'MatchViewportRes';
Flags.PreferSFU = 'preferSFU';
Flags.StartVideoMuted = 'StartVideoMuted';
Flags.SuppressBrowserKeys = 'SuppressBrowserKeys';
Flags.UseMic = 'UseMic';
Flags.KeyboardInput = 'KeyboardInput';
Flags.MouseInput = 'MouseInput';
Flags.TouchInput = 'TouchInput';
Flags.GamepadInput = 'GamepadInput';
Flags.XRControllerInput = 'XRControllerInput';
const isFlagId = (id) => Object.getOwnPropertyNames(Flags).some((name) => Flags[name] === id);
/**
 * A collection of numeric parameters that are core to all Pixel Streaming experiences.
 *
 */
class NumericParameters {
}
NumericParameters.AFKTimeoutSecs = 'AFKTimeout';
NumericParameters.MinQP = 'MinQP';
NumericParameters.MaxQP = 'MaxQP';
NumericParameters.WebRTCFPS = 'WebRTCFPS';
NumericParameters.WebRTCMinBitrate = 'WebRTCMinBitrate';
NumericParameters.WebRTCMaxBitrate = 'WebRTCMaxBitrate';
NumericParameters.MaxReconnectAttempts = 'MaxReconnectAttempts';
const isNumericId = (id) => Object.getOwnPropertyNames(NumericParameters).some((name) => NumericParameters[name] === id);
/**
 * A collection of textual parameters that are core to all Pixel Streaming experiences.
 *
 */
class TextParameters {
}
TextParameters.SignallingServerUrl = 'ss';
const isTextId = (id) => Object.getOwnPropertyNames(TextParameters).some((name) => TextParameters[name] === id);
/**
 * A collection of enum based parameters that are core to all Pixel Streaming experiences.
 *
 */
class OptionParameters {
}
OptionParameters.PreferredCodec = 'PreferredCodec';
OptionParameters.StreamerId = 'StreamerId';
const isOptionId = (id) => Object.getOwnPropertyNames(OptionParameters).some((name) => OptionParameters[name] === id);
class Config {
    // ------------ Settings -----------------
    constructor(config = {}) {
        /* A map of flags that can be toggled - options that can be set in the application - e.g. Use Mic? */
        this.flags = new Map();
        /* A map of numerical settings - options that can be in the application - e.g. MinBitrate */
        this.numericParameters = new Map();
        /* A map of text settings - e.g. signalling server url */
        this.textParameters = new Map();
        /* A map of enum based settings - e.g. preferred codec */
        this.optionParameters = new Map();
        const { initialSettings, useUrlParams } = config;
        this._useUrlParams = !!useUrlParams;
        this.populateDefaultSettings(this._useUrlParams);
        if (initialSettings) {
            this.setSettings(initialSettings);
        }
    }
    /**
     * True if reading configuration initial values from URL parameters, and
     * persisting changes in URL when changed.
     */
    get useUrlParams() {
        return this._useUrlParams;
    }
    /**
     * Populate the default settings for a Pixel Streaming application
     */
    populateDefaultSettings(useUrlParams) {
        /**
         * Text Parameters
         */
        this.textParameters.set(TextParameters.SignallingServerUrl, new _SettingText__WEBPACK_IMPORTED_MODULE_0__.SettingText(TextParameters.SignallingServerUrl, 'Signalling url', 'Url of the signalling server', (location.protocol === 'https:' ? 'wss://' : 'ws://') +
            window.location.hostname +
            // for readability, we omit the port if it's 80
            (window.location.port === '80' ||
                window.location.port === ''
                ? ''
                : `:${window.location.port}`), useUrlParams));
        this.optionParameters.set(OptionParameters.StreamerId, new _SettingOption__WEBPACK_IMPORTED_MODULE_1__.SettingOption(OptionParameters.StreamerId, 'Streamer ID', 'The ID of the streamer to stream.', '', [], useUrlParams));
        /**
         * Enum Parameters
         */
        this.optionParameters.set(OptionParameters.PreferredCodec, new _SettingOption__WEBPACK_IMPORTED_MODULE_1__.SettingOption(OptionParameters.PreferredCodec, 'Preferred Codec', 'The preferred codec to be used during codec negotiation', 'H264 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f', (function () {
            const browserSupportedCodecs = [];
            // Try get the info needed from the RTCRtpReceiver. This is only available on chrome
            if (!RTCRtpReceiver.getCapabilities) {
                browserSupportedCodecs.push('Only available on Chrome');
                return browserSupportedCodecs;
            }
            const matcher = /(VP\d|H26\d|AV1).*/;
            const codecs = RTCRtpReceiver.getCapabilities('video').codecs;
            codecs.forEach((codec) => {
                const str = codec.mimeType.split('/')[1] +
                    ' ' +
                    (codec.sdpFmtpLine || '');
                const match = matcher.exec(str);
                if (match !== null) {
                    browserSupportedCodecs.push(str);
                }
            });
            return browserSupportedCodecs;
        })(), useUrlParams));
        /**
         * Boolean parameters
         */
        this.flags.set(Flags.AutoConnect, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AutoConnect, 'Auto connect to stream', 'Whether we should attempt to auto connect to the signalling server or show a click to start prompt.', false, useUrlParams));
        this.flags.set(Flags.AutoPlayVideo, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AutoPlayVideo, 'Auto play video', 'When video is ready automatically start playing it as opposed to showing a play button.', true, useUrlParams));
        this.flags.set(Flags.BrowserSendOffer, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.BrowserSendOffer, 'Browser send offer', 'Browser will initiate the WebRTC handshake by sending the offer to the streamer', false, useUrlParams));
        this.flags.set(Flags.UseMic, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.UseMic, 'Use microphone', 'Make browser request microphone access and open an input audio track.', false, useUrlParams));
        this.flags.set(Flags.StartVideoMuted, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.StartVideoMuted, 'Start video muted', 'Video will start muted if true.', false, useUrlParams));
        this.flags.set(Flags.SuppressBrowserKeys, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.SuppressBrowserKeys, 'Suppress browser keys', 'Suppress certain browser keys that we use in UE, for example F5 to show shader complexity instead of refresh the page.', true, useUrlParams));
        this.flags.set(Flags.PreferSFU, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.PreferSFU, 'Prefer SFU', 'Try to connect to the SFU instead of P2P.', false, useUrlParams));
        this.flags.set(Flags.IsQualityController, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.IsQualityController, 'Is quality controller?', 'True if this peer controls stream quality', true, useUrlParams));
        this.flags.set(Flags.ForceMonoAudio, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.ForceMonoAudio, 'Force mono audio', 'Force browser to request mono audio in the SDP', false, useUrlParams));
        this.flags.set(Flags.ForceTURN, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.ForceTURN, 'Force TURN', 'Only generate TURN/Relayed ICE candidates.', false, useUrlParams));
        this.flags.set(Flags.AFKDetection, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AFKDetection, 'AFK if idle', 'Timeout the experience if user is AFK for a period.', false, useUrlParams));
        this.flags.set(Flags.MatchViewportResolution, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.MatchViewportResolution, 'Match viewport resolution', 'Pixel Streaming will be instructed to dynamically resize the video stream to match the size of the video element.', false, useUrlParams));
        this.flags.set(Flags.HoveringMouseMode, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.HoveringMouseMode, 'Control Scheme: Locked Mouse', 'Either locked mouse, where the pointer is consumed by the video and locked to it, or hovering mouse, where the mouse is not consumed.', false, useUrlParams, (isHoveringMouse, setting) => {
            setting.label = `Control Scheme: ${isHoveringMouse ? 'Hovering' : 'Locked'} Mouse`;
        }));
        this.flags.set(Flags.FakeMouseWithTouches, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.FakeMouseWithTouches, 'Fake mouse with touches', 'A single finger touch is converted into a mouse event. This allows a non-touch application to be controlled partially via a touch device.', false, useUrlParams));
        this.flags.set(Flags.KeyboardInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.KeyboardInput, 'Keyboard input', 'If enabled, send keyboard events to streamer', true, useUrlParams));
        this.flags.set(Flags.MouseInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.MouseInput, 'Mouse input', 'If enabled, send mouse events to streamer', true, useUrlParams));
        this.flags.set(Flags.TouchInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.TouchInput, 'Touch input', 'If enabled, send touch events to streamer', true, useUrlParams));
        this.flags.set(Flags.GamepadInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.GamepadInput, 'Gamepad input', 'If enabled, send gamepad events to streamer', true, useUrlParams));
        this.flags.set(Flags.XRControllerInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.XRControllerInput, 'XR controller input', 'If enabled, send XR controller events to streamer', true, useUrlParams));
        /**
         * Numeric parameters
         */
        this.numericParameters.set(NumericParameters.AFKTimeoutSecs, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.AFKTimeoutSecs, 'AFK timeout', 'The time (in seconds) it takes for the application to time out if AFK timeout is enabled.', 0 /*min*/, 600 /*max*/, 120 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MaxReconnectAttempts, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MaxReconnectAttempts, 'Max Reconnects', 'Maximum number of reconnects the application will attempt when a streamer disconnects.', 0 /*min*/, 999 /*max*/, 3 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MinQP, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MinQP, 'Min QP', 'The lower bound for the quantization parameter (QP) of the encoder. 0 = Best quality, 51 = worst quality.', 0 /*min*/, 51 /*max*/, 0 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MaxQP, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MaxQP, 'Max QP', 'The upper bound for the quantization parameter (QP) of the encoder. 0 = Best quality, 51 = worst quality.', 0 /*min*/, 51 /*max*/, 51 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCFPS, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCFPS, 'Max FPS', 'The maximum FPS that WebRTC will try to transmit frames at.', 1 /*min*/, 999 /*max*/, 60 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCMinBitrate, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCMinBitrate, 'Min Bitrate (kbps)', 'The minimum bitrate that WebRTC should use.', 0 /*min*/, 500000 /*max*/, 0 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCMaxBitrate, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCMaxBitrate, 'Max Bitrate (kbps)', 'The maximum bitrate that WebRTC should use.', 0 /*min*/, 500000 /*max*/, 0 /*value*/, useUrlParams));
    }
    /**
     * Add a callback to fire when the numeric setting is toggled.
     * @param id The id of the flag.
     * @param onChangedListener The callback to fire when the numeric value changes.
     */
    _addOnNumericSettingChangedListener(id, onChangedListener) {
        if (this.numericParameters.has(id)) {
            this.numericParameters
                .get(id)
                .addOnChangedListener(onChangedListener);
        }
    }
    _addOnOptionSettingChangedListener(id, onChangedListener) {
        if (this.optionParameters.has(id)) {
            this.optionParameters
                .get(id)
                .addOnChangedListener(onChangedListener);
        }
    }
    /**
     * @param id The id of the numeric setting we are interested in getting a value for.
     * @returns The numeric value stored in the parameter with the passed id.
     */
    getNumericSettingValue(id) {
        if (this.numericParameters.has(id)) {
            return this.numericParameters.get(id).number;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * @param id The id of the text setting we are interested in getting a value for.
     * @returns The text value stored in the parameter with the passed id.
     */
    getTextSettingValue(id) {
        if (this.textParameters.has(id)) {
            return this.textParameters.get(id).value;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * Set number in the setting.
     * @param id The id of the numeric setting we are interested in.
     * @param value The numeric value to set.
     */
    setNumericSetting(id, value) {
        if (this.numericParameters.has(id)) {
            this.numericParameters.get(id).number = value;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * Add a callback to fire when the flag is toggled.
     * @param id The id of the flag.
     * @param onChangeListener The callback to fire when the value changes.
     */
    _addOnSettingChangedListener(id, onChangeListener) {
        if (this.flags.has(id)) {
            this.flags.get(id).onChange = onChangeListener;
        }
    }
    /**
     * Add a callback to fire when the text is changed.
     * @param id The id of the flag.
     * @param onChangeListener The callback to fire when the value changes.
     */
    _addOnTextSettingChangedListener(id, onChangeListener) {
        if (this.textParameters.has(id)) {
            this.textParameters.get(id).onChange = onChangeListener;
        }
    }
    /**
     * Get the option which has the given id.
     * @param id The id of the option.
     * @returns The SettingOption object matching id
     */
    getSettingOption(id) {
        return this.optionParameters.get(id);
    }
    /**
     * Get the value of the configuration flag which has the given id.
     * @param id The unique id for the flag.
     * @returns True if the flag is enabled.
     */
    isFlagEnabled(id) {
        return this.flags.get(id).flag;
    }
    /**
     * Set flag to be enabled/disabled.
     * @param id The id of the flag to toggle.
     * @param flagEnabled True if the flag should be enabled.
     */
    setFlagEnabled(id, flagEnabled) {
        if (!this.flags.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot toggle flag called ${id} - it does not exist in the Config.flags map.`);
        }
        else {
            this.flags.get(id).flag = flagEnabled;
        }
    }
    /**
     * Set the text setting.
     * @param id The id of the setting
     * @param settingValue The value to set in the setting.
     */
    setTextSetting(id, settingValue) {
        if (!this.textParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.textParameters map.`);
        }
        else {
            this.textParameters.get(id).text = settingValue;
        }
    }
    /**
     * Set the option setting list of options.
     * @param id The id of the setting
     * @param settingOptions The values the setting could take
     */
    setOptionSettingOptions(id, settingOptions) {
        if (!this.optionParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.optionParameters map.`);
        }
        else {
            this.optionParameters.get(id).options = settingOptions;
        }
    }
    /**
     * Set option enum settings selected option.
     * @param id The id of the setting
     * @param settingOptions The value to select out of all the options
     */
    setOptionSettingValue(id, settingValue) {
        if (!this.optionParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.enumParameters map.`);
        }
        else {
            this.optionParameters.get(id).selected = settingValue;
        }
    }
    /**
     * Set the label for the flag.
     * @param id The id of the flag.
     * @param label The new label to use for the flag.
     */
    setFlagLabel(id, label) {
        if (!this.flags.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set label for flag called ${id} - it does not exist in the Config.flags map.`);
        }
        else {
            this.flags.get(id).label = label;
        }
    }
    /**
     * Set a subset of all settings in one function call.
     *
     * @param settings A (partial) list of settings to set
     */
    setSettings(settings) {
        for (const key of Object.keys(settings)) {
            if (isFlagId(key)) {
                this.setFlagEnabled(key, settings[key]);
            }
            else if (isNumericId(key)) {
                this.setNumericSetting(key, settings[key]);
            }
            else if (isTextId(key)) {
                this.setTextSetting(key, settings[key]);
            }
            else if (isOptionId(key)) {
                this.setOptionSettingValue(key, settings[key]);
            }
        }
    }
    /**
     * Get all settings
     * @returns All setting values as an object with setting ids as keys
     */
    getSettings() {
        const settings = {};
        for (const [key, value] of this.flags.entries()) {
            settings[key] = value.flag;
        }
        for (const [key, value] of this.numericParameters.entries()) {
            settings[key] = value.number;
        }
        for (const [key, value] of this.textParameters.entries()) {
            settings[key] = value.text;
        }
        for (const [key, value] of this.optionParameters.entries()) {
            settings[key] = value.selected;
        }
        return settings;
    }
    /**
     * Get all Flag settings as an array.
     * @returns All SettingFlag objects
     */
    getFlags() {
        return Array.from(this.flags.values());
    }
    /**
     * Get all Text settings as an array.
     * @returns All SettingText objects
     */
    getTextSettings() {
        return Array.from(this.textParameters.values());
    }
    /**
     * Get all Number settings as an array.
     * @returns All SettingNumber objects
     */
    getNumericSettings() {
        return Array.from(this.numericParameters.values());
    }
    /**
     * Get all Option settings as an array.
     * @returns All SettingOption objects
     */
    getOptionSettings() {
        return Array.from(this.optionParameters.values());
    }
    /**
     * Emit events when settings change.
     * @param eventEmitter
     */
    _registerOnChangeEvents(eventEmitter) {
        for (const key of this.flags.keys()) {
            const flag = this.flags.get(key);
            if (flag) {
                flag.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: flag.id,
                    type: 'flag',
                    value: newValue,
                    target: flag
                }));
            }
        }
        for (const key of this.numericParameters.keys()) {
            const number = this.numericParameters.get(key);
            if (number) {
                number.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: number.id,
                    type: 'number',
                    value: newValue,
                    target: number
                }));
            }
        }
        for (const key of this.textParameters.keys()) {
            const text = this.textParameters.get(key);
            if (text) {
                text.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: text.id,
                    type: 'text',
                    value: newValue,
                    target: text
                }));
            }
        }
        for (const key of this.optionParameters.keys()) {
            const option = this.optionParameters.get(key);
            if (option) {
                option.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: option.id,
                    type: 'option',
                    value: newValue,
                    target: option
                }));
            }
        }
    }
}
/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/Config/SettingBase.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingBase.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_30961__) => {

__nested_webpack_require_30961__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_30961__.d(__webpack_exports__, {
/* harmony export */   "SettingBase": () => (/* binding */ SettingBase)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Base class for a setting that has a text label and an arbitrary setting value it stores.
 */
class SettingBase {
    constructor(id, label, description, defaultSettingValue, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        this.onChange = defaultOnChangeListener;
        this.onChangeEmit = () => {
            /* Do nothing, to be overridden. */
        };
        this.id = id;
        this.description = description;
        this.label = label;
        this.value = defaultSettingValue;
    }
    /**
     * Set the label text for the setting.
     * @param label setting label.
     */
    set label(inLabel) {
        this._label = inLabel;
        this.onChangeEmit(this._value);
    }
    /**
     * @returns The label text for the setting.
     */
    get label() {
        return this._label;
    }
    /**
     * @return The setting's value.
     */
    get value() {
        return this._value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set value(inValue) {
        this._value = inValue;
        this.onChange(this._value, this);
        this.onChangeEmit(this._value);
    }
}


/***/ }),

/***/ "./src/Config/SettingFlag.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingFlag.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_32768__) => {

__nested_webpack_require_32768__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_32768__.d(__webpack_exports__, {
/* harmony export */   "SettingFlag": () => (/* binding */ SettingFlag)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_32768__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A boolean flag setting object with a text label.
 */
class SettingFlag extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultFlagValue, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultFlagValue, defaultOnChangeListener);
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.flag = defaultFlagValue;
        }
        else {
            // parse flag from url parameters
            const urlParamFlag = this.getUrlParamFlag();
            this.flag = urlParamFlag;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the flag value from the url parameters.
     * @returns True if the url parameters contains /?id, but False if /?id=false
     */
    getUrlParamFlag() {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            if (urlParams.get(this.id) === 'false' ||
                urlParams.get(this.id) === 'False') {
                return false;
            }
            return true;
        }
        return false;
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            if (this.flag === true) {
                urlParams.set(this.id, 'true');
            }
            else {
                urlParams.set(this.id, 'false');
            }
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Enables this flag.
     */
    enable() {
        this.flag = true;
    }
    /**
     * @return The setting's value.
     */
    get flag() {
        return !!this.value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set flag(inValue) {
        this.value = inValue;
    }
}


/***/ }),

/***/ "./src/Config/SettingNumber.ts":
/*!*************************************!*\
  !*** ./src/Config/SettingNumber.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_35761__) => {

__nested_webpack_require_35761__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_35761__.d(__webpack_exports__, {
/* harmony export */   "SettingNumber": () => (/* binding */ SettingNumber)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_35761__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A number setting object with a text label. Min and max limit the range of allowed values.
 */
class SettingNumber extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, min, max, defaultNumber, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultNumber, defaultOnChangeListener);
        this._min = min;
        this._max = max;
        // attempt to read the number from the url params
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.number = defaultNumber;
        }
        else {
            const parsedValue = Number.parseInt(urlParams.get(this.id));
            this.number = Number.isNaN(parsedValue)
                ? defaultNumber
                : parsedValue;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params like ?id=number
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.number.toString());
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Set the number value (will be clamped within range).
     */
    set number(newNumber) {
        this.value = this.clamp(newNumber);
    }
    /**
     * @returns The number stored.
     */
    get number() {
        return this.value;
    }
    /**
     * Clamps a number between the min and max values (inclusive).
     * @param inNumber The number to clamp.
     * @returns The clamped number.
     */
    clamp(inNumber) {
        return Math.max(Math.min(this._max, inNumber), this._min);
    }
    /**
     * Returns the minimum value
     * @returns The minimum value
     */
    get min() {
        return this._min;
    }
    /**
     * Returns the maximum value
     * @returns The maximum value
     */
    get max() {
        return this._max;
    }
    /**
     * Add a change listener to the number object.
     */
    addOnChangedListener(onChangedFunc) {
        this.onChange = onChangedFunc;
    }
}


/***/ }),

/***/ "./src/Config/SettingOption.ts":
/*!*************************************!*\
  !*** ./src/Config/SettingOption.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_38926__) => {

__nested_webpack_require_38926__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_38926__.d(__webpack_exports__, {
/* harmony export */   "SettingOption": () => (/* binding */ SettingOption)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_38926__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * An Option setting object with a text label. Allows you to specify an array of options and select one of them.
 */
class SettingOption extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultTextValue, options, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, [defaultTextValue, defaultTextValue], defaultOnChangeListener);
        this.options = options;
        const urlParams = new URLSearchParams(window.location.search);
        const stringToMatch = useUrlParams && urlParams.has(this.id)
            ? this.getUrlParamText()
            : defaultTextValue;
        this.selected = stringToMatch;
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the text value from the url parameters.
     * @returns The text value parsed from the url if the url parameters contains /?id=value, but empty string if just /?id or no url param found.
     */
    getUrlParamText() {
        var _a;
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            return (_a = urlParams.get(this.id)) !== null && _a !== void 0 ? _a : '';
        }
        return '';
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.selected);
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Add a change listener to the select element.
     */
    addOnChangedListener(onChangedFunc) {
        this.onChange = onChangedFunc;
    }
    /**
     * @returns All available options as an array
     */
    get options() {
        return this._options;
    }
    /**
     * Set options
     * @param values Array of options
     */
    set options(values) {
        this._options = values;
        this.onChangeEmit(this.selected);
    }
    /**
     * @returns Selected option as a string
     */
    get selected() {
        return this.value;
    }
    /**
     * Set selected option if it matches one of the available options
     * @param value Selected option
     */
    set selected(value) {
        // A user may not specify the full possible value so we instead use the closest match.
        // eg ?xxx=H264 would select 'H264 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f'
        const filteredList = this.options.filter((option) => option.indexOf(value) !== -1);
        if (filteredList.length) {
            this.value = filteredList[0];
        }
    }
}


/***/ }),

/***/ "./src/Config/SettingText.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingText.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_42555__) => {

__nested_webpack_require_42555__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_42555__.d(__webpack_exports__, {
/* harmony export */   "SettingText": () => (/* binding */ SettingText)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_42555__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A text setting object with a text label.
 */
class SettingText extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultTextValue, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultTextValue, defaultOnChangeListener);
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.text = defaultTextValue;
        }
        else {
            // parse flag from url parameters
            const urlParamFlag = this.getUrlParamText();
            this.text = urlParamFlag;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the text value from the url parameters.
     * @returns The text value parsed from the url if the url parameters contains /?id=value, but empty string if just /?id or no url param found.
     */
    getUrlParamText() {
        var _a;
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            return (_a = urlParams.get(this.id)) !== null && _a !== void 0 ? _a : '';
        }
        return '';
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.text);
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * @return The setting's value.
     */
    get text() {
        return this.value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set text(inValue) {
        this.value = inValue;
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_45339__) => {

__nested_webpack_require_45339__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_45339__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_45339__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
class DataChannelController {
    constructor() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * return the current state of a datachannel controller instance
     * @returns the current DataChannelController instance
     */
    getDataChannelInstance() {
        return this;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    createDataChannel(peerConnection, label, datachannelOptions) {
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        this.setupDataChannel();
    }
    setupDataChannel() {
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = 'arraybuffer';
        this.dataChannel.onopen = (ev) => this.handleOnOpen(ev);
        this.dataChannel.onclose = (ev) => this.handleOnClose(ev);
        this.dataChannel.onmessage = (ev) => this.handleOnMessage(ev);
        this.dataChannel.onerror = (ev) => this.handleOnError(ev);
    }
    /**
     * Handles when the Data Channel is opened
     */
    handleOnOpen(ev) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) opened.`, 7);
        this.onOpen((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, ev);
    }
    /**
     * Handles when the Data Channel is closed
     */
    handleOnClose(ev) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) closed.`, 7);
        this.onClose((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, ev);
    }
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    handleOnMessage(event) {
        // Higher log level to prevent log spam with messages received
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) message: ${event}`, 8);
    }
    /**
     * Handles when an error is thrown
     * @param event - Error Event
     */
    handleOnError(event) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) error: ${event}`, 7);
        this.onError((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, event);
    }
    /**
     * Override to register onOpen handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onOpen(label, ev) {
        // empty default implementation
    }
    /**
     * Override to register onClose handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClose(label, ev) {
        // empty default implementation
    }
    /**
     * Override to register onError handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onError(label, ev) {
        // empty default implementation
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelSender.ts":
/*!**********************************************!*\
  !*** ./src/DataChannel/DataChannelSender.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_50182__) => {

__nested_webpack_require_50182__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_50182__.d(__webpack_exports__, {
/* harmony export */   "DataChannelSender": () => (/* binding */ DataChannelSender)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_50182__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A class for sending data channel messages
 */
class DataChannelSender {
    /**
     * @param dataChannelProvider - Data channel object type
     */
    constructor(dataChannelProvider) {
        this.dataChannelProvider = dataChannelProvider;
    }
    canSend() {
        return (this.dataChannelProvider.getDataChannelInstance().dataChannel !==
            undefined &&
            this.dataChannelProvider.getDataChannelInstance().dataChannel
                .readyState == 'open');
    }
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    sendData(data) {
        // reset the afk inactivity
        const dataChannelInstance = this.dataChannelProvider.getDataChannelInstance();
        if (dataChannelInstance.dataChannel.readyState == 'open') {
            dataChannelInstance.dataChannel.send(data);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message Sent: ${new Uint8Array(data)}`, 6);
            this.resetAfkWarningTimerOnDataSend();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message Failed: ${new Uint8Array(data)}`);
        }
    }
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    resetAfkWarningTimerOnDataSend() {
        // Base Functionality: Do Nothing
    }
}


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_52474__) => {

__nested_webpack_require_52474__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_52474__.d(__webpack_exports__, {
/* harmony export */   "EncoderSettings": () => (/* binding */ EncoderSettings),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreamingSettings": () => (/* binding */ PixelStreamingSettings),
/* harmony export */   "WebRTCSettings": () => (/* binding */ WebRTCSettings)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Latency Test Results Data
 */
class InitialSettings {
    constructor() {
        this.PixelStreamingSettings = new PixelStreamingSettings();
        this.EncoderSettings = new EncoderSettings();
        this.WebRTCSettings = new WebRTCSettings();
    }
    /**
     * Checks for compatibility with the FPS and MaxFPS stats between 4.27 and 5
     */
    ueCompatible() {
        if (this.WebRTCSettings.MaxFPS != null) {
            this.WebRTCSettings.FPS = this.WebRTCSettings.MaxFPS;
        }
    }
}
/**
 * A class for handling Pixel Streaming details
 */
class PixelStreamingSettings {
}
/**
 * A class for handling encoder stats
 */
class EncoderSettings {
}
/**
 * A class for handling web rtc stats
 */
class WebRTCSettings {
}


/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_54075__) => {

__nested_webpack_require_54075__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_54075__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_54075__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Latency Test Results Data
 */
class LatencyTestResults {
    constructor() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    setFrameDisplayDeltaTime(DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    }
    /**
     * Process the encoder times and set them
     */
    processFields() {
        if (this.EncodeMs == null &&
            (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Setting Encode Ms \n ${this.PostEncodeTimeMs} \n ${this.PreEncodeTimeMs}`, 6);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null &&
            (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Setting CaptureToSendMs Ms \n ${this.PostCaptureTimeMs} \n ${this.PreCaptureTimeMs}`, 6);
            this.CaptureToSendMs =
                this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    }
}


/***/ }),

/***/ "./src/FreezeFrame/FreezeFrame.ts":
/*!****************************************!*\
  !*** ./src/FreezeFrame/FreezeFrame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_57113__) => {

__nested_webpack_require_57113__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_57113__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrame": () => (/* binding */ FreezeFrame)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * A class for managing the freeze frame object
 */
class FreezeFrame {
    /**
     * Construct a freeze frame
     * @param rootDiv the div that a freeze frame element will be injected into
     */
    constructor(rootDiv) {
        this.freezeFrameHeight = 0;
        this.freezeFrameWidth = 0;
        this.rootDiv = rootDiv;
        // create the overlay
        this.rootElement = document.createElement('div');
        this.rootElement.id = 'freezeFrame';
        this.rootElement.style.display = 'none';
        this.rootElement.style.pointerEvents = 'none';
        this.rootElement.style.position = 'absolute';
        this.rootElement.style.zIndex = '20';
        // create the image place holder
        this.imageElement = document.createElement('img');
        this.imageElement.style.position = 'absolute';
        // append the image into the root element and append the element to the root div
        this.rootElement.appendChild(this.imageElement);
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Set the freeze frame element for showing
     */
    setElementForShow() {
        this.rootElement.style.display = 'block';
    }
    /**
     * Set the freeze frame element for hiding
     */
    setElementForHide() {
        this.rootElement.style.display = 'none';
    }
    /**
     * Update the freeze frames image source
     * @param jpeg - the freeze frame image as a byte array data
     */
    updateImageElementSource(jpeg) {
        const base64 = btoa(jpeg.reduce((data, byte) => data + String.fromCharCode(byte), ''));
        this.imageElement.src = 'data:image/jpeg;base64,' + base64;
    }
    /**
     * Set the dimensions for the freeze frame from the element and resize it
     */
    setDimensionsFromElementAndResize() {
        this.freezeFrameHeight = this.imageElement.naturalHeight;
        this.freezeFrameWidth = this.imageElement.naturalWidth;
        this.resize();
    }
    /**
     * Resize a freeze frame element
     */
    resize() {
        if (this.freezeFrameWidth !== 0 && this.freezeFrameHeight !== 0) {
            let displayWidth = 0;
            let displayHeight = 0;
            let displayTop = 0;
            let displayLeft = 0;
            const parentAspectRatio = this.rootDiv.clientWidth / this.rootDiv.clientHeight;
            const videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
            if (parentAspectRatio < videoAspectRatio) {
                displayWidth = this.rootDiv.clientWidth;
                displayHeight = Math.floor(this.rootDiv.clientWidth / videoAspectRatio);
                displayTop = Math.floor((this.rootDiv.clientHeight - displayHeight) * 0.5);
                displayLeft = 0;
            }
            else {
                displayWidth = Math.floor(this.rootDiv.clientHeight * videoAspectRatio);
                displayHeight = this.rootDiv.clientHeight;
                displayTop = 0;
                displayLeft = Math.floor((this.rootDiv.clientWidth - displayWidth) * 0.5);
            }
            this.rootElement.style.width = this.rootDiv.offsetWidth + 'px';
            this.rootElement.style.height = this.rootDiv.offsetHeight + 'px';
            this.rootElement.style.left = 0 + 'px';
            this.rootElement.style.top = 0 + 'px';
            this.imageElement.style.width = displayWidth + 'px';
            this.imageElement.style.height = displayHeight + 'px';
            this.imageElement.style.left = displayLeft + 'px';
            this.imageElement.style.top = displayTop + 'px';
        }
    }
}


/***/ }),

/***/ "./src/FreezeFrame/FreezeFrameController.ts":
/*!**************************************************!*\
  !*** ./src/FreezeFrame/FreezeFrameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_61351__) => {

__nested_webpack_require_61351__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_61351__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrameController": () => (/* binding */ FreezeFrameController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_61351__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _FreezeFrame__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_61351__(/*! ./FreezeFrame */ "./src/FreezeFrame/FreezeFrame.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * A class for controlling freeze frame functionality
 */
class FreezeFrameController {
    /**
     * Construct a freeze frame controller
     * @param rootDiv - the div that a freeze frame element will be injected into
     */
    constructor(rootDiv) {
        this.receiving = false;
        this.size = 0;
        this.jpeg = undefined;
        this.valid = false;
        this.freezeFrameDelay = 50;
        this.freezeFrame = new _FreezeFrame__WEBPACK_IMPORTED_MODULE_0__.FreezeFrame(rootDiv);
    }
    /**
     * Show the freeze frame if it is valid
     */
    showFreezeFrame() {
        if (this.valid) {
            this.freezeFrame.setElementForShow();
        }
    }
    /**
     * Hide the freeze frame and set the validity to false
     */
    hideFreezeFrame() {
        this.valid = false;
        this.freezeFrame.setElementForHide();
    }
    /**
     * Update the freeze frames image source and load it
     * @param jpeg - the freeze frame image as a byte array data
     * @param onLoadCallBack - a call back for managing if the play overlay needs to be shown or not
     */
    updateFreezeFrameAndShow(jpeg, onLoadCallBack) {
        this.freezeFrame.updateImageElementSource(jpeg);
        this.freezeFrame.imageElement.onload = () => {
            this.freezeFrame.setDimensionsFromElementAndResize();
            onLoadCallBack();
        };
    }
    /**
     * Process the new freeze frame image and update it
     * @param view - the freeze frame image as a byte array data
     * @param onLoadCallBack - a call back for managing if the play overlay needs to be shown or not
     */
    processFreezeFrameMessage(view, onLoadCallBack) {
        // Reset freeze frame if we got a freeze frame message and we are not "receiving" yet.
        if (!this.receiving) {
            this.receiving = true;
            this.valid = false;
            this.size = 0;
            this.jpeg = undefined;
        }
        // Extract total size of freeze frame (across all chunks)
        this.size = new DataView(view.slice(1, 5).buffer).getInt32(0, true);
        // Get the jpeg part of the payload
        const jpegBytes = view.slice(1 + 4);
        // Append to existing jpeg that holds the freeze frame
        if (this.jpeg) {
            const jpeg = new Uint8Array(this.jpeg.length + jpegBytes.length);
            jpeg.set(this.jpeg, 0);
            jpeg.set(jpegBytes, this.jpeg.length);
            this.jpeg = jpeg;
        }
        // No existing freeze frame jpeg, make one
        else {
            this.jpeg = jpegBytes;
            this.receiving = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received first chunk of freeze frame: ${this.jpeg.length}/${this.size}`, 6);
        }
        // Finished receiving freeze frame, we can show it now
        if (this.jpeg.length === this.size) {
            this.receiving = false;
            this.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received complete freeze frame ${this.size}`, 6);
            this.updateFreezeFrameAndShow(this.jpeg, onLoadCallBack);
        }
        // We received more data than the freeze frame payload message indicate (this is an error)
        else if (this.jpeg.length > this.size) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received bigger freeze frame than advertised: ${this.jpeg.length}/${this.size}`);
            this.jpeg = undefined;
            this.receiving = false;
        }
    }
}


/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_66019__) => {

__nested_webpack_require_66019__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_66019__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController),
/* harmony export */   "FakeTouchFinger": () => (/* binding */ FakeTouchFinger)
/* harmony export */ });
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_66019__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_66019__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoElementParent - The video player DOM element
 */
class FakeTouchController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video element instance
     * @param coordinateConverter - A coordinate converter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        // Utility for keeping track of event handlers and unregistering them
        this.touchEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
        const ontouchstart = (ev) => this.onTouchStart(ev);
        const ontouchend = (ev) => this.onTouchEnd(ev);
        const ontouchmove = (ev) => this.onTouchMove(ev);
        document.addEventListener('touchstart', ontouchstart, { passive: false });
        document.addEventListener('touchend', ontouchend, { passive: false });
        document.addEventListener('touchmove', ontouchmove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchstart', ontouchstart));
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchend', ontouchend));
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchmove', ontouchmove));
    }
    /**
     * Unregister all touch events
     */
    unregisterTouchEvents() {
        this.touchEventListenerTracker.unregisterAll();
    }
    /**
     * Sets the video Element Parent Client Rect numbers for this class
     * @param videoElementParentClientRect - a html ElementParentClientRect object
     */
    setVideoElementParentClientRect(videoElementParentClientRect) {
        this.videoElementParentClientRect = videoElementParentClientRect;
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    onTouchStart(touch) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        if (this.fakeTouchFinger == null) {
            const first_touch = touch.changedTouches[0];
            this.fakeTouchFinger = new FakeTouchFinger(first_touch.identifier, first_touch.clientX - this.videoElementParentClientRect.left, first_touch.clientY - this.videoElementParentClientRect.top);
            const videoElementParent = this.videoElementProvider.getVideoParentElement();
            const mouseEvent = new MouseEvent('mouseenter', first_touch);
            videoElementParent.dispatchEvent(mouseEvent);
            const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(this.fakeTouchFinger.x, this.fakeTouchFinger.y);
            const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
            toStreamerHandlers.get('MouseDown')([
                _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton,
                coord.x,
                coord.y
            ]);
        }
        touch.preventDefault();
    }
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    onTouchEnd(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            const touch = touchEvent.changedTouches[t];
            if (touch.identifier === this.fakeTouchFinger.id) {
                const x = touch.clientX - this.videoElementParentClientRect.left;
                const y = touch.clientY - this.videoElementParentClientRect.top;
                const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
                toStreamerHandlers.get('MouseUp')([
                    _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton,
                    coord.x,
                    coord.y
                ]);
                const mouseEvent = new MouseEvent('mouseleave', touch);
                videoElementParent.dispatchEvent(mouseEvent);
                this.fakeTouchFinger = null;
                break;
            }
        }
        touchEvent.preventDefault();
    }
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    onTouchMove(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touchEvent.touches.length; t++) {
            const touch = touchEvent.touches[t];
            if (touch.identifier === this.fakeTouchFinger.id) {
                const x = touch.clientX - this.videoElementParentClientRect.left;
                const y = touch.clientY - this.videoElementParentClientRect.top;
                const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
                const delta = this.coordinateConverter.normalizeAndQuantizeSigned(x - this.fakeTouchFinger.x, y - this.fakeTouchFinger.y);
                toStreamerHandlers.get('MouseMove')([
                    coord.x,
                    coord.y,
                    delta.x,
                    delta.y
                ]);
                this.fakeTouchFinger.x = x;
                this.fakeTouchFinger.y = y;
                break;
            }
        }
        touchEvent.preventDefault();
    }
}
/**
 * The interface for finger position mapping
 */
class FakeTouchFinger {
    /**
     * @param id - the button id
     * @param x - the x axis value
     * @param y - the y axis value
     */
    constructor(id, x, y) {
        this.id = id;
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_73359__) => {

__nested_webpack_require_73359__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_73359__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController),
/* harmony export */   "gamepadLayout": () => (/* binding */ gamepadLayout)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_73359__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_73359__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * The class that handles the functionality of gamepads and controllers
 */
class GamePadController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     */
    constructor(toStreamerMessagesProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.gamePadEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.requestAnimationFrame = (window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.requestAnimationFrame).bind(window);
        const browserWindow = window;
        if ('GamepadEvent' in browserWindow) {
            const onGamePadConnected = (ev) => this.gamePadConnectHandler(ev);
            const onGamePadDisconnected = (ev) => this.gamePadDisconnectHandler(ev);
            window.addEventListener('gamepadconnected', onGamePadConnected);
            window.addEventListener('gamepaddisconnected', onGamePadDisconnected);
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('gamepadconnected', onGamePadConnected));
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('gamepaddisconnected', onGamePadDisconnected));
        }
        else if ('WebKitGamepadEvent' in browserWindow) {
            const onWebkitGamePadConnected = (ev) => this.gamePadConnectHandler(ev);
            const onWebkitGamePadDisconnected = (ev) => this.gamePadDisconnectHandler(ev);
            window.addEventListener('webkitgamepadconnected', onWebkitGamePadConnected);
            window.addEventListener('webkitgamepaddisconnected', onWebkitGamePadDisconnected);
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('webkitgamepadconnected', onWebkitGamePadConnected));
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('webkitgamepaddisconnected', onWebkitGamePadDisconnected));
        }
        this.controllers = [];
        if (navigator.getGamepads) {
            for (const gamepad of navigator.getGamepads()) {
                if (gamepad) {
                    this.gamePadConnectHandler(new GamepadEvent('gamepadconnected', { gamepad }));
                }
            }
        }
    }
    /**
     * Unregisters all event handlers
     */
    unregisterGamePadEvents() {
        this.gamePadEventListenerTracker.unregisterAll();
        for (const controller of this.controllers) {
            if (controller.id !== undefined) {
                this.onGamepadDisconnected(controller.id);
            }
        }
        this.controllers = [];
        this.onGamepadConnected = () => { };
        this.onGamepadDisconnected = () => { };
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    gamePadConnectHandler(gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Gamepad connect handler', 6);
        const gamepad = gamePadEvent.gamepad;
        const temp = {
            currentState: gamepad,
            prevState: gamepad,
            id: undefined
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'gamepad: ' + gamepad.id + ' connected', 6);
        window.requestAnimationFrame(() => this.updateStatus());
        this.onGamepadConnected();
    }
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    gamePadDisconnectHandler(gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Gamepad disconnect handler', 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'gamepad: ' + gamePadEvent.gamepad.id + ' disconnected', 6);
        const deletedController = this.controllers[gamePadEvent.gamepad.index];
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter((controller) => controller !== undefined);
        this.onGamepadDisconnected(deletedController.id);
    }
    /**
     * Scan for connected gamepads
     */
    scanGamePads() {
        const gamepads = navigator.getGamepads
            ? navigator.getGamepads()
            : navigator.webkitGetGamepads
                ? navigator.webkitGetGamepads()
                : [];
        for (let i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && gamepads[i].index in this.controllers) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    }
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    updateStatus() {
        this.scanGamePads();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (const controller of this.controllers) {
            // If we haven't received an id (possible if using an older version of UE), return to original functionality
            const controllerIndex = (controller.id === undefined) ? this.controllers.indexOf(controller) : controller.id;
            const currentState = controller.currentState;
            for (let i = 0; i < controller.currentState.buttons.length; i++) {
                const currentButton = controller.currentState.buttons[i];
                const previousButton = controller.prevState.buttons[i];
                if (currentButton.pressed) {
                    // press
                    if (i == gamepadLayout.LeftTrigger) {
                        //                       UEs left analog has a button index of 5
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            5,
                            currentButton.value
                        ]);
                    }
                    else if (i == gamepadLayout.RightTrigger) {
                        //                       UEs right analog has a button index of 6
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            6,
                            currentButton.value
                        ]);
                    }
                    else {
                        toStreamerHandlers.get('GamepadButtonPressed')([
                            controllerIndex,
                            i,
                            previousButton.pressed ? 1 : 0
                        ]);
                    }
                }
                else if (!currentButton.pressed && previousButton.pressed) {
                    // release
                    if (i == gamepadLayout.LeftTrigger) {
                        //                       UEs left analog has a button index of 5
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            5,
                            0
                        ]);
                    }
                    else if (i == gamepadLayout.RightTrigger) {
                        //                       UEs right analog has a button index of 6
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            6,
                            0
                        ]);
                    }
                    else {
                        toStreamerHandlers.get('GamepadButtonReleased')([
                            controllerIndex,
                            i
                        ]);
                    }
                }
            }
            // Iterate over gamepad axes (we will increment in lots of 2 as there is 2 axes per stick)
            for (let i = 0; i < currentState.axes.length; i += 2) {
                // Horizontal axes are even numbered
                const x = parseFloat(currentState.axes[i].toFixed(4));
                // Vertical axes are odd numbered
                // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                const y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                // UE's analog axes follow the same order as the browsers, but start at index 1 so we will offset as such
                toStreamerHandlers.get('GamepadAnalog')([
                    controllerIndex,
                    i + 1,
                    x
                ]); // Horizontal axes, only offset by 1
                toStreamerHandlers.get('GamepadAnalog')([
                    controllerIndex,
                    i + 2,
                    y
                ]); // Vertical axes, offset by two (1 to match UEs axes convention and then another 1 for the vertical axes)
            }
            this.controllers[controllerIndex].prevState = currentState;
        }
        if (this.controllers.length > 0) {
            this.requestAnimationFrame(() => this.updateStatus());
        }
    }
    onGamepadResponseReceived(gamepadId) {
        for (const controller of this.controllers) {
            if (controller.id === undefined) {
                controller.id = gamepadId;
                break;
            }
        }
    }
    /**
     * Event to send the gamepadconnected message to the application
     */
    onGamepadConnected() {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the gamepaddisconnected message to the application
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onGamepadDisconnected(controllerIdx) {
        // Default Functionality: Do Nothing
    }
}
/**
 * Gamepad layout codes enum
 */
var gamepadLayout;
(function (gamepadLayout) {
    gamepadLayout[gamepadLayout["RightClusterBottomButton"] = 0] = "RightClusterBottomButton";
    gamepadLayout[gamepadLayout["RightClusterRightButton"] = 1] = "RightClusterRightButton";
    gamepadLayout[gamepadLayout["RightClusterLeftButton"] = 2] = "RightClusterLeftButton";
    gamepadLayout[gamepadLayout["RightClusterTopButton"] = 3] = "RightClusterTopButton";
    gamepadLayout[gamepadLayout["LeftShoulder"] = 4] = "LeftShoulder";
    gamepadLayout[gamepadLayout["RightShoulder"] = 5] = "RightShoulder";
    gamepadLayout[gamepadLayout["LeftTrigger"] = 6] = "LeftTrigger";
    gamepadLayout[gamepadLayout["RightTrigger"] = 7] = "RightTrigger";
    gamepadLayout[gamepadLayout["SelectOrBack"] = 8] = "SelectOrBack";
    gamepadLayout[gamepadLayout["StartOrForward"] = 9] = "StartOrForward";
    gamepadLayout[gamepadLayout["LeftAnalogPress"] = 10] = "LeftAnalogPress";
    gamepadLayout[gamepadLayout["RightAnalogPress"] = 11] = "RightAnalogPress";
    gamepadLayout[gamepadLayout["LeftClusterTopButton"] = 12] = "LeftClusterTopButton";
    gamepadLayout[gamepadLayout["LeftClusterBottomButton"] = 13] = "LeftClusterBottomButton";
    gamepadLayout[gamepadLayout["LeftClusterLeftButton"] = 14] = "LeftClusterLeftButton";
    gamepadLayout[gamepadLayout["LeftClusterRightButton"] = 15] = "LeftClusterRightButton";
    gamepadLayout[gamepadLayout["CentreButton"] = 16] = "CentreButton";
    // Axes
    gamepadLayout[gamepadLayout["LeftStickHorizontal"] = 0] = "LeftStickHorizontal";
    gamepadLayout[gamepadLayout["LeftStickVertical"] = 1] = "LeftStickVertical";
    gamepadLayout[gamepadLayout["RightStickHorizontal"] = 2] = "RightStickHorizontal";
    gamepadLayout[gamepadLayout["RightStickVertical"] = 3] = "RightStickVertical";
})(gamepadLayout || (gamepadLayout = {}));


/***/ }),

/***/ "./src/Inputs/HoveringMouseEvents.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/HoveringMouseEvents.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_86794__) => {

__nested_webpack_require_86794__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_86794__.d(__webpack_exports__, {
/* harmony export */   "HoveringMouseEvents": () => (/* binding */ HoveringMouseEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_86794__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Video Player mouse Hover handler
 */
class HoveringMouseEvents {
    /**
     * @param mouseController - Mouse Controller instance
     */
    constructor(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Unregister event handlers
     */
    unregisterMouseEvents() {
        // empty for HoveringMouseEvents implementation
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    updateMouseMovePosition(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'MouseMove', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const delta = this.mouseController.coordinateConverter.normalizeAndQuantizeSigned(mouseEvent.movementX, mouseEvent.movementY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseMove')([
            coord.x,
            coord.y,
            delta.x,
            delta.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDown(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'onMouse Down', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseUp(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleContextMenu(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    handleMouseWheel(wheelEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(wheelEvent.offsetX, wheelEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseWheel')([
            wheelEvent.wheelDelta,
            coord.x,
            coord.y
        ]);
        wheelEvent.preventDefault();
    }
    /**
     * Handle the mouse double click event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDouble(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDouble')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
    }
    /**
     * Handle the press mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handlePressMouseButtons(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.pressMouseButtons(mouseEvent.buttons, mouseEvent.offsetX, mouseEvent.offsetY);
    }
    /**
     * Handle the release mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleReleaseMouseButtons(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.releaseMouseButtons(mouseEvent.buttons, mouseEvent.offsetX, mouseEvent.offsetY);
    }
}


/***/ }),

/***/ "./src/Inputs/InputClassesFactory.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/InputClassesFactory.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_93327__) => {

__nested_webpack_require_93327__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_93327__.d(__webpack_exports__, {
/* harmony export */   "ActiveKeys": () => (/* binding */ ActiveKeys),
/* harmony export */   "InputClassesFactory": () => (/* binding */ InputClassesFactory)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_93327__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_93327__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_93327__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_93327__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_93327__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_93327__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_93327__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.







/**
 * Class for making and setting up input class types
 */
class InputClassesFactory {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param coordinateConverter - A coordinateConverter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        this.activeKeys = new ActiveKeys();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
    }
    /**
     * Registers browser key events.
     */
    registerKeyBoard(config) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Keyboard Events', 7);
        const keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.toStreamerMessagesProvider, config, this.activeKeys);
        keyboardController.registerKeyBoardEvents();
        return keyboardController;
    }
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     */
    registerMouse(controlScheme) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Mouse Events', 7);
        const mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter, this.activeKeys);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.LockedMouse:
                mouseController.registerLockedMouseEvents(mouseController);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.HoveringMouse:
                mouseController.registerHoveringMouseEvents(mouseController);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'unknown Control Scheme Type Defaulting to Locked Mouse Events');
                mouseController.registerLockedMouseEvents(mouseController);
                break;
        }
        return mouseController;
    }
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     */
    registerTouch(fakeMouseTouch, videoElementParentClientRect) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Registering Touch', 6);
        if (fakeMouseTouch) {
            const fakeTouchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_4__.FakeTouchController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter);
            fakeTouchController.setVideoElementParentClientRect(videoElementParentClientRect);
            return fakeTouchController;
        }
        else {
            return new _TouchController__WEBPACK_IMPORTED_MODULE_5__.TouchController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter);
        }
    }
    /**
     * registers a gamepad
     */
    registerGamePad() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Game Pad', 7);
        const gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_6__.GamePadController(this.toStreamerMessagesProvider);
        return gamePadController;
    }
}
/**
 * A class that keeps track of current active keys
 */
class ActiveKeys {
    constructor() {
        this.activeKeys = [];
        this.activeKeys = [];
    }
    /**
     * Get the current array of active keys
     * @returns - an array of active keys
     */
    getActiveKeys() {
        return this.activeKeys;
    }
}


/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_99229__) => {

__nested_webpack_require_99229__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_99229__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_99229__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_99229__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_99229__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_99229__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.




/**
 * Handles the Keyboard Inputs for the document
 */
class KeyboardController {
    /**
     * @param toStreamerMessagesProvider Stream message provider class object
     * @param config The applications configuration. We're interested in the suppress browser keys option
     * @param activeKeysProvider Active keys provider class object
     */
    constructor(toStreamerMessagesProvider, config, activeKeysProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.keyboardEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        /*
         * New browser APIs have moved away from KeyboardEvent.keyCode to KeyboardEvent.Code.
         * For details see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#constants_for_keycode_value
         * We still use old KeyboardEvent.keyCode integers in the UE C++ side, so we need a way to map the new
         * string-based KeyboardEvent.Code to the old integers.
         */
        this.CodeToKeyCode = {
            Escape: 27,
            Digit0: 48,
            Digit1: 49,
            Digit2: 50,
            Digit3: 51,
            Digit4: 52,
            Digit5: 53,
            Digit6: 54,
            Digit7: 55,
            Digit8: 56,
            Digit9: 57,
            Minus: 173,
            Equal: 187,
            Backspace: 8,
            Tab: 9,
            KeyQ: 81,
            KeyW: 87,
            KeyE: 69,
            KeyR: 82,
            KeyT: 84,
            KeyY: 89,
            KeyU: 85,
            KeyI: 73,
            KeyO: 79,
            KeyP: 80,
            BracketLeft: 219,
            BracketRight: 221,
            Enter: 13,
            ControlLeft: 17,
            KeyA: 65,
            KeyS: 83,
            KeyD: 68,
            KeyF: 70,
            KeyG: 71,
            KeyH: 72,
            KeyJ: 74,
            KeyK: 75,
            KeyL: 76,
            Semicolon: 186,
            Quote: 222,
            Backquote: 192,
            ShiftLeft: 16,
            Backslash: 220,
            KeyZ: 90,
            KeyX: 88,
            KeyC: 67,
            KeyV: 86,
            KeyB: 66,
            KeyN: 78,
            KeyM: 77,
            Comma: 188,
            Period: 190,
            Slash: 191,
            ShiftRight: 253,
            AltLeft: 18,
            Space: 32,
            CapsLock: 20,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            Pause: 19,
            ScrollLock: 145,
            NumpadDivide: 111,
            NumpadMultiply: 106,
            NumpadSubtract: 109,
            NumpadAdd: 107,
            NumpadDecimal: 110,
            Numpad9: 105,
            Numpad8: 104,
            Numpad7: 103,
            Numpad6: 102,
            Numpad5: 101,
            Numpad4: 100,
            Numpad3: 99,
            Numpad2: 98,
            Numpad1: 97,
            Numpad0: 96,
            NumLock: 144,
            ControlRight: 254,
            AltRight: 255,
            Home: 36,
            End: 35,
            ArrowUp: 38,
            ArrowLeft: 37,
            ArrowRight: 39,
            ArrowDown: 40,
            PageUp: 33,
            PageDown: 34,
            Insert: 45,
            Delete: 46,
            ContextMenu: 93
        };
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.config = config;
        this.activeKeysProvider = activeKeysProvider;
    }
    /**
     * Registers document keyboard events with the controller
     */
    registerKeyBoardEvents() {
        const keyDownHandler = (ev) => this.handleOnKeyDown(ev);
        const keyUpHandler = (ev) => this.handleOnKeyUp(ev);
        const keyPressHandler = (ev) => this.handleOnKeyPress(ev);
        document.addEventListener("keydown", keyDownHandler);
        document.addEventListener("keyup", keyUpHandler);
        //This has been deprecated as at Jun 13 2021
        document.addEventListener("keypress", keyPressHandler);
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keydown", keyDownHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keyup", keyUpHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keypress", keyPressHandler));
    }
    /**
     * Unregisters document keyboard events
     */
    unregisterKeyBoardEvents() {
        this.keyboardEventListenerTracker.unregisterAll();
    }
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    handleOnKeyDown(keyboardEvent) {
        const keyCode = this.getKeycode(keyboardEvent);
        if (!keyCode) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key down ${keyCode}, repeat = ${keyboardEvent.repeat}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyDown')([
            this.getKeycode(keyboardEvent),
            keyboardEvent.repeat ? 1 : 0
        ]);
        const activeKeys = this.activeKeysProvider.getActiveKeys();
        activeKeys.push(keyCode);
        // Backspace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE text entry field.
        if (keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.backSpace) {
            document.dispatchEvent(new KeyboardEvent('keypress', {
                charCode: _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.backSpace
            }));
        }
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_3__.Flags.SuppressBrowserKeys) &&
            this.isKeyCodeBrowserKey(keyCode)) {
            keyboardEvent.preventDefault();
        }
    }
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    handleOnKeyUp(keyboardEvent) {
        const keyCode = this.getKeycode(keyboardEvent);
        if (!keyCode) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key up ${keyCode}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyUp')([
            keyCode,
            keyboardEvent.repeat ? 1 : 0
        ]);
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_3__.Flags.SuppressBrowserKeys) &&
            this.isKeyCodeBrowserKey(keyCode)) {
            keyboardEvent.preventDefault();
        }
    }
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    handleOnKeyPress(keyboard) {
        if (!('charCode' in keyboard)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'KeyboardEvent.charCode is deprecated in this browser, cannot send key press.');
            return;
        }
        const charCode = keyboard.charCode;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key press ${charCode}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyPress')([charCode]);
    }
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns - the key code of the Key
     */
    getKeycode(keyboardEvent) {
        // If we don't have keyCode property because browser API is deprecated then use KeyboardEvent.code instead.
        // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#constants_for_keycode_value
        if (!('keyCode' in keyboardEvent)) {
            // Convert KeyboardEvent.code string into integer-based key code for backwards compatibility reasons.
            const event = keyboardEvent;
            if (event.code in this.CodeToKeyCode) {
                return this.CodeToKeyCode[event.code];
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Keyboard code of ${event.code} is not supported in our mapping, ignoring this key.`);
                return null;
            }
        }
        // If we made it here KeyboardEvent.keyCode is still supported so we can safely use it.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.shift &&
            keyboardEvent.code === 'ShiftRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightShift;
        }
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.control &&
            keyboardEvent.code === 'ControlRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightControl;
        }
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.alt &&
            keyboardEvent.code === 'AltRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightAlt;
        }
        else {
            return keyboardEvent.keyCode;
        }
    }
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     * @param keyCode - the browser keycode number
     */
    isKeyCodeBrowserKey(keyCode) {
        // Function keys or tab key are considered "browser keys" that we may wish to suppress by preventing them being process by browser.
        return (keyCode >= 112 && keyCode <= 123) || keyCode === 9;
    }
}


/***/ }),

/***/ "./src/Inputs/LockedMouseEvents.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/LockedMouseEvents.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_110834__) => {

__nested_webpack_require_110834__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_110834__.d(__webpack_exports__, {
/* harmony export */   "LockedMouseEvents": () => (/* binding */ LockedMouseEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_110834__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_110834__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Handle the mouse locked events
 */
class LockedMouseEvents {
    /**
     * @param videoElementProvider - Video Player instance
     * @param mouseController - Mouse controller instance
     * @param activeKeysProvider - Active keys provider instance
     * @param playerStyleAttributesProvider - Player style attributes instance
     */
    constructor(videoElementProvider, mouseController, activeKeysProvider) {
        this.x = 0;
        this.y = 0;
        this.updateMouseMovePositionEvent = (mouseEvent) => {
            this.updateMouseMovePosition(mouseEvent);
        };
        // Utility for keeping track of event handlers and unregistering them
        this.mouseEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.videoElementProvider = videoElementProvider;
        this.mouseController = mouseController;
        this.activeKeysProvider = activeKeysProvider;
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        this.x = videoElementParent.getBoundingClientRect().width / 2;
        this.y = videoElementParent.getBoundingClientRect().height / 2;
        this.coord =
            this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(this.x, this.y);
    }
    /**
     * Unregisters all event handlers
     */
    unregisterMouseEvents() {
        this.mouseEventListenerTracker.unregisterAll();
    }
    /**
     * Handle when the locked state Changed
     */
    lockStateChange() {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        if (document.pointerLockElement === videoElementParent ||
            document.mozPointerLockElement === videoElementParent) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Pointer locked', 6);
            document.addEventListener('mousemove', this.updateMouseMovePositionEvent, false);
            this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('mousemove', this.updateMouseMovePositionEvent, false));
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'The pointer lock status is now unlocked', 6);
            // !a new arrow function must not be used here as it will be counted as a new function that cannot be removed
            document.removeEventListener('mousemove', this.updateMouseMovePositionEvent, false);
            // If mouse loses focus, send a key up for all of the currently held-down keys
            // This is necessary as when the mouse loses focus, the windows stops listening for events and as such
            // the keyup listener won't get fired
            let activeKeys = this.activeKeysProvider.getActiveKeys();
            const setKeys = new Set(activeKeys);
            const newKeysIterable = [];
            setKeys.forEach((setKey) => {
                newKeysIterable[setKey];
            });
            newKeysIterable.forEach((uniqueKeycode) => {
                toStreamerHandlers.get('KeyUp')([uniqueKeycode]);
            });
            // Reset the active keys back to nothing
            activeKeys = [];
        }
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    updateMouseMovePosition(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        const styleWidth = this.videoElementProvider.getVideoParentElement().clientWidth;
        const styleHeight = this.videoElementProvider.getVideoParentElement().clientHeight;
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > styleWidth) {
            this.x -= styleWidth;
        }
        if (this.y > styleHeight) {
            this.y -= styleHeight;
        }
        if (this.x < 0) {
            this.x = styleWidth + this.x;
        }
        if (this.y < 0) {
            this.y = styleHeight - this.y;
        }
        this.coord =
            this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(this.x, this.y);
        const delta = this.mouseController.coordinateConverter.normalizeAndQuantizeSigned(mouseEvent.movementX, mouseEvent.movementY);
        toStreamerHandlers.get('MouseMove')([
            this.coord.x,
            this.coord.y,
            delta.x,
            delta.y
        ]);
    }
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDown(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseUp(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    handleMouseWheel(wheelEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseWheel')([
            wheelEvent.wheelDelta,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse double click event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDouble(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDouble')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the press mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handlePressMouseButtons(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.pressMouseButtons(mouseEvent.buttons, this.x, this.y);
    }
    /**
     * Handle the release mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleReleaseMouseButtons(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.releaseMouseButtons(mouseEvent.buttons, this.x, this.y);
    }
}


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_120136__) => {

__nested_webpack_require_120136__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_120136__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
class MouseButton {
}
MouseButton.mainButton = 0; // Left button.
MouseButton.auxiliaryButton = 1; // Wheel button.
MouseButton.secondaryButton = 2; // Right button.
MouseButton.fourthButton = 3; // Browser Back button.
MouseButton.fifthButton = 4; // Browser Forward button.
/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
class MouseButtonsMask {
}
MouseButtonsMask.primaryButton = 1; // Left button.
MouseButtonsMask.secondaryButton = 2; // Right button.
MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
MouseButtonsMask.fourthButton = 8; // Browser Back button.
MouseButtonsMask.fifthButton = 16; // Browser Forward button.


/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_121575__) => {

__nested_webpack_require_121575__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_121575__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_121575__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_121575__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _LockedMouseEvents__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_121575__(/*! ./LockedMouseEvents */ "./src/Inputs/LockedMouseEvents.ts");
/* harmony import */ var _HoveringMouseEvents__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_121575__(/*! ./HoveringMouseEvents */ "./src/Inputs/HoveringMouseEvents.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_121575__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





/**
 * Handles the Mouse Inputs for the document
 */
class MouseController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param normalizeAndQuantize - A normalize and quantize instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter, activeKeysProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.mouseEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.coordinateConverter = coordinateConverter;
        this.videoElementProvider = videoElementProvider;
        this.activeKeysProvider = activeKeysProvider;
        this.registerMouseEnterAndLeaveEvents();
    }
    /**
     * Clears all the click events on the current video element parent div
     */
    unregisterMouseEvents() {
        this.mouseEventListenerTracker.unregisterAll();
    }
    /**
     * Register a locked mouse class
     * @param mouseController - a mouse controller instance
     * @param playerStyleAttributesProvider - a player style attributes instance
     */
    registerLockedMouseEvents(mouseController) {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const lockedMouseEvents = new _LockedMouseEvents__WEBPACK_IMPORTED_MODULE_1__.LockedMouseEvents(this.videoElementProvider, mouseController, this.activeKeysProvider);
        videoElementParent.requestPointerLock =
            videoElementParent.requestPointerLock ||
                videoElementParent.mozRequestPointerLock;
        document.exitPointerLock =
            document.exitPointerLock || document.mozExitPointerLock;
        // minor hack to alleviate ios not supporting pointerlock
        if (videoElementParent.requestPointerLock) {
            const onclick = () => {
                videoElementParent.requestPointerLock();
            };
            videoElementParent.addEventListener('click', onclick);
            this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('click', onclick));
        }
        const lockStateChangeListener = () => lockedMouseEvents.lockStateChange();
        document.addEventListener('pointerlockchange', lockStateChangeListener, false);
        document.addEventListener('mozpointerlockchange', lockStateChangeListener, false);
        this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('pointerlockchange', lockStateChangeListener, false));
        this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('mozpointerlockchange', lockStateChangeListener, false));
        const onmousedown = (mouseEvent) => lockedMouseEvents.handleMouseDown(mouseEvent);
        const onmouseup = (mouseEvent) => lockedMouseEvents.handleMouseUp(mouseEvent);
        const onwheel = (wheelEvent) => lockedMouseEvents.handleMouseWheel(wheelEvent);
        const ondblclick = (mouseEvent) => lockedMouseEvents.handleMouseDouble(mouseEvent);
        videoElementParent.addEventListener('mousedown', onmousedown);
        videoElementParent.addEventListener('mouseup', onmouseup);
        videoElementParent.addEventListener('wheel', onwheel);
        videoElementParent.addEventListener('dblclick', ondblclick);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousedown', onmousedown));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseup', onmouseup));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('wheel', onwheel));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('dblclick', ondblclick));
        this.mouseEventListenerTracker.addUnregisterCallback(() => lockedMouseEvents.unregisterMouseEvents());
        this.mouseEventListenerTracker.addUnregisterCallback(() => {
            if (document.exitPointerLock &&
                (document.pointerLockElement === videoElementParent ||
                    document.mozPointerLockElement === videoElementParent)) {
                document.exitPointerLock();
            }
        });
    }
    /**
     * Register a hovering mouse class
     * @param mouseController - A mouse controller object
     */
    registerHoveringMouseEvents(mouseController) {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const hoveringMouseEvents = new _HoveringMouseEvents__WEBPACK_IMPORTED_MODULE_2__.HoveringMouseEvents(mouseController);
        const onmousemove = (mouseEvent) => hoveringMouseEvents.updateMouseMovePosition(mouseEvent);
        const onmousedown = (mouseEvent) => hoveringMouseEvents.handleMouseDown(mouseEvent);
        const onmouseup = (mouseEvent) => hoveringMouseEvents.handleMouseUp(mouseEvent);
        const oncontextmenu = (mouseEvent) => hoveringMouseEvents.handleContextMenu(mouseEvent);
        const onwheel = (wheelEvent) => hoveringMouseEvents.handleMouseWheel(wheelEvent);
        const ondblclick = (mouseEvent) => hoveringMouseEvents.handleMouseDouble(mouseEvent);
        videoElementParent.addEventListener('mousemove', onmousemove);
        videoElementParent.addEventListener('mousedown', onmousedown);
        videoElementParent.addEventListener('mouseup', onmouseup);
        videoElementParent.addEventListener('contextmenu', oncontextmenu);
        videoElementParent.addEventListener('wheel', onwheel);
        videoElementParent.addEventListener('dblclick', ondblclick);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousemove', onmousemove));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousedown', onmousedown));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseup', onmouseup));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('contextmenu', oncontextmenu));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('wheel', onwheel));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('dblclick', ondblclick));
        this.mouseEventListenerTracker.addUnregisterCallback(() => hoveringMouseEvents.unregisterMouseEvents());
    }
    /**
     * Set the mouse enter and mouse leave events
     */
    registerMouseEnterAndLeaveEvents() {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        // Handle when the Mouse has entered the element
        const onmouseenter = (event) => {
            if (!this.videoElementProvider.isVideoReady()) {
                return;
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), 'Mouse Entered', 6);
            this.sendMouseEnter();
            this.pressMouseButtons(event.buttons, event.x, event.y);
        };
        // Handles when the mouse has left the element
        const onmouseleave = (event) => {
            if (!this.videoElementProvider.isVideoReady()) {
                return;
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), 'Mouse Left', 6);
            this.sendMouseLeave();
            this.releaseMouseButtons(event.buttons, event.x, event.y);
        };
        videoElementParent.addEventListener('mouseenter', onmouseenter);
        videoElementParent.addEventListener('mouseleave', onmouseleave);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseenter', onmouseenter));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseleave', onmouseleave));
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    releaseMouseButtons(buttons, X, Y) {
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.mainButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.secondaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.auxiliaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fourthButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fifthButton, coord.x, coord.y);
        }
    }
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    pressMouseButtons(buttons, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.mainButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.secondaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.auxiliaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fourthButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fifthButton, coord.x, coord.y);
        }
    }
    /**
     * Handles mouse enter
     */
    sendMouseEnter() {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseEnter')();
    }
    /**
     * Handles mouse Leave
     */
    sendMouseLeave() {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseLeave')();
    }
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    sendMouseDown(button, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), `mouse button ${button} down at (${X}, ${Y})`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([button, X, Y]);
    }
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    sendMouseUp(button, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), `mouse button ${button} up at (${X}, ${Y})`, 6);
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([button, coord.x, coord.y]);
    }
}


/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_136371__) => {

__nested_webpack_require_136371__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_136371__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
class SpecialKeyCodes {
}
SpecialKeyCodes.backSpace = 8;
SpecialKeyCodes.shift = 16;
SpecialKeyCodes.control = 17;
SpecialKeyCodes.alt = 18;
SpecialKeyCodes.rightShift = 253;
SpecialKeyCodes.rightControl = 254;
SpecialKeyCodes.rightAlt = 255;


/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_137348__) => {

__nested_webpack_require_137348__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_137348__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_137348__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_137348__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Handles the Touch input Events
 */
class TouchController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param coordinateConverter - A coordinate converter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        this.fingerIds = new Map();
        this.maxByteValue = 255;
        // Utility for keeping track of event handlers and unregistering them
        this.touchEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
        this.videoElementParent = videoElementProvider.getVideoElement();
        const ontouchstart = (ev) => this.onTouchStart(ev);
        const ontouchend = (ev) => this.onTouchEnd(ev);
        const ontouchmove = (ev) => this.onTouchMove(ev);
        this.videoElementParent.addEventListener('touchstart', ontouchstart, { passive: false });
        this.videoElementParent.addEventListener('touchend', ontouchend, { passive: false });
        this.videoElementParent.addEventListener('touchmove', ontouchmove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchstart', ontouchstart));
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchend', ontouchend));
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchmove', ontouchmove));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Touch Events Registered', 6);
        // is this strictly necessary?
        const preventOnTouchMove = (event) => {
            event.preventDefault();
        };
        document.addEventListener('touchmove', preventOnTouchMove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchmove', preventOnTouchMove));
    }
    /**
     * Unregister all touch events
     */
    unregisterTouchEvents() {
        this.touchEventListenerTracker.unregisterAll();
    }
    /**
     * Remember a touch command
     * @param touch - the touch command
     */
    rememberTouch(touch) {
        const finger = this.fingers.pop();
        if (finger === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'exhausted touch identifiers', 6);
        }
        this.fingerIds.set(touch.identifier, finger);
    }
    /**
     * Forgets a touch command
     * @param touch - the touch command
     */
    forgetTouch(touch) {
        this.fingers.push(this.fingerIds.get(touch.identifier));
        // Sort array back into descending order. This means if finger '1' were to lift after finger '0', we would ensure that 0 will be the first index to pop
        this.fingers.sort(function (a, b) {
            return b - a;
        });
        this.fingerIds.delete(touch.identifier);
    }
    /**
     * When a touch event starts
     * @param touchEvent - the touch event being intercepted
     */
    onTouchStart(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            this.rememberTouch(touchEvent.changedTouches[t]);
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch start', 6);
        this.emitTouchData('TouchStart', touchEvent.changedTouches);
        touchEvent.preventDefault();
    }
    /**
     * When a touch event ends
     * @param touchEvent - the touch event being intercepted
     */
    onTouchEnd(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch end', 6);
        this.emitTouchData('TouchEnd', touchEvent.changedTouches);
        // Re-cycle unique identifiers previously assigned to each touch.
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            this.forgetTouch(touchEvent.changedTouches[t]);
        }
        touchEvent.preventDefault();
    }
    /**
     * when a moving touch event occurs
     * @param touchEvent - the touch event being intercepted
     */
    onTouchMove(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch move', 6);
        this.emitTouchData('TouchMove', touchEvent.touches);
        touchEvent.preventDefault();
    }
    emitTouchData(type, touches) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touches.length; t++) {
            const numTouches = 1; // the number of touches to be sent this message
            const touch = touches[t];
            const x = touch.clientX - videoElementParent.offsetLeft;
            const y = touch.clientY - videoElementParent.offsetTop;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `F${this.fingerIds.get(touch.identifier)}=(${x}, ${y})`, 6);
            const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
            switch (type) {
                case 'TouchStart':
                    toStreamerHandlers.get('TouchStart')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
                case 'TouchEnd':
                    toStreamerHandlers.get('TouchEnd')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
                case 'TouchMove':
                    toStreamerHandlers.get('TouchMove')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
            }
        }
    }
}


/***/ }),

/***/ "./src/Inputs/XRGamepadController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/XRGamepadController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_145771__) => {

__nested_webpack_require_145771__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_145771__.d(__webpack_exports__, {
/* harmony export */   "XRGamepadController": () => (/* binding */ XRGamepadController)
/* harmony export */ });
/* harmony import */ var _Util_WebXRUtils__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_145771__(/*! ../Util/WebXRUtils */ "./src/Util/WebXRUtils.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * The class that handles the functionality of xrgamepads and controllers
 */
class XRGamepadController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     */
    constructor(toStreamerMessagesProvider) {
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.controllers = [];
    }
    updateStatus(source, frame, refSpace) {
        if (source.gamepad) {
            const gamepadPose = frame.getPose(source.gripSpace, refSpace);
            if (!gamepadPose) {
                return;
            }
            let system = 0;
            if (source.profiles.includes('htc-vive')) {
                system = 1;
            }
            else if (source.profiles.includes('oculus-touch')) {
                system = 2;
            }
            // TODO (william.belcher): Add other profiles (Quest, Microsoft Mixed Reality, etc)
            this.toStreamerMessagesProvider.toStreamerHandlers.get('XRSystem')([
                system
            ]);
            // Default: AnyHand (2)
            let handedness = 2;
            switch (source.handedness) {
                case 'left':
                    handedness = 0;
                    break;
                case 'right':
                    handedness = 1;
                    break;
            }
            // Send controller transform
            const matrix = gamepadPose.transform.matrix;
            const mat = [];
            for (let i = 0; i < 16; i++) {
                mat[i] = new Float32Array([matrix[i]])[0];
            }
            // prettier-ignore
            this.toStreamerMessagesProvider.toStreamerHandlers.get('XRControllerTransform')([
                mat[0], mat[4], mat[8], mat[12],
                mat[1], mat[5], mat[9], mat[13],
                mat[2], mat[6], mat[10], mat[14],
                mat[3], mat[7], mat[11], mat[15],
                handedness
            ]);
            // Handle controller buttons and axes
            if (this.controllers[handedness] === undefined) {
                this.controllers[handedness] = {
                    prevState: undefined,
                    currentState: undefined,
                    id: undefined
                };
                this.controllers[handedness].prevState =
                    _Util_WebXRUtils__WEBPACK_IMPORTED_MODULE_0__.WebXRUtils.deepCopyGamepad(source.gamepad);
            }
            this.controllers[handedness].currentState =
                _Util_WebXRUtils__WEBPACK_IMPORTED_MODULE_0__.WebXRUtils.deepCopyGamepad(source.gamepad);
            const controller = this.controllers[handedness];
            const currState = controller.currentState;
            const prevState = controller.prevState;
            // Iterate over buttons
            for (let i = 0; i < currState.buttons.length; i++) {
                const currButton = currState.buttons[i];
                const prevButton = prevState.buttons[i];
                if (currButton.pressed) {
                    // press
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonPressed')([handedness, i, prevButton.pressed ? 1 : 0]);
                }
                else if (!currButton.pressed && prevButton.pressed) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonReleased')([handedness, i, 0]);
                }
                if (currButton.touched && !currButton.pressed) {
                    // press
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonPressed')([handedness, 3, prevButton.touched ? 1 : 0]);
                }
                else if (!currButton.touched && prevButton.touched) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonReleased')([handedness, 3, 0]);
                }
            }
            // Iterate over gamepad axes
            for (let i = 0; i < currState.axes.length; i++) {
                this.toStreamerMessagesProvider.toStreamerHandlers.get('XRAnalog')([handedness, i, currState.axes[i]]);
            }
            this.controllers[handedness].prevState = currState;
        }
    }
}


/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_150702__) => {

__nested_webpack_require_150702__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_150702__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class Logger {
    /**
     * Captures the stack and returns it
     * @returns the current stack
     */
    static GetStackTrace() {
        const error = new Error();
        let formattedStack = 'No Stack Available for this browser';
        // format the error
        if (error.stack) {
            formattedStack = error.stack.toString().replace(/Error/g, '');
        }
        return formattedStack;
    }
    /**
     * Set the log verbosity level
     */
    static SetLoggerVerbosity(verboseLogLevel) {
        if (this.verboseLogLevel != null) {
            this.verboseLogLevel = verboseLogLevel;
        }
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    static Log(stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        const returnString = `Level: Log\nMsg: ${message}\nCaller: ${stack}`;
        console.log(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    static Info(stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        const returnString = `Level: Info\nMsg: ${message}`;
        console.info(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    static Error(stack, message) {
        const returnString = `Level: Error\nMsg: ${message}\nCaller: ${stack}`;
        console.error(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    static Warning(stack, message) {
        const returnString = `Level: Warning\nCaller: ${stack}\nMsg: ${message}`;
        console.warn(returnString);
    }
}
Logger.verboseLogLevel = 5;


/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_153447__) => {

__nested_webpack_require_153447__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_153447__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_153447__(/*! ./InboundRTPStats */ "./src/PeerConnectionController/InboundRTPStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_153447__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_153447__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_153447__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_153447__(/*! ./OutBoundRTPStats */ "./src/PeerConnectionController/OutBoundRTPStats.ts");
/* harmony import */ var _SessionStats__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_153447__(/*! ./SessionStats */ "./src/PeerConnectionController/SessionStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_153447__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_153447__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.








class AggregatedStats {
    constructor() {
        this.inboundVideoStats = new _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__.InboundVideoStats();
        this.inboundAudioStats = new _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__.InboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_1__.CandidatePairStats();
        this.DataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.DataChannelStats();
        this.outBoundVideoStats = new _OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_3__.OutBoundVideoStats();
        this.sessionStats = new _SessionStats__WEBPACK_IMPORTED_MODULE_4__.SessionStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_5__.StreamStats();
        this.codecs = new Map();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    processStats(rtcStatsReport) {
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach((stat) => {
            const type = stat.type;
            switch (type) {
                case 'candidate-pair':
                    this.handleCandidatePair(stat);
                    break;
                case 'certificate':
                    break;
                case 'codec':
                    this.handleCodec(stat);
                    break;
                case 'data-channel':
                    this.handleDataChannel(stat);
                    break;
                case 'inbound-rtp':
                    this.handleInBoundRTP(stat);
                    break;
                case 'local-candidate':
                    this.handleLocalCandidate(stat);
                    break;
                case 'media-source':
                    break;
                case 'media-playout':
                    break;
                case 'outbound-rtp':
                    break;
                case 'peer-connection':
                    break;
                case 'remote-candidate':
                    this.handleRemoteCandidate(stat);
                    break;
                case 'remote-inbound-rtp':
                    break;
                case 'remote-outbound-rtp':
                    this.handleRemoteOutBound(stat);
                    break;
                case 'track':
                    this.handleTrack(stat);
                    break;
                case 'transport':
                    break;
                case 'stream':
                    this.handleStream(stat);
                    break;
                default:
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.GetStackTrace(), 'unhandled Stat Type');
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.GetStackTrace(), stat);
                    break;
            }
        });
    }
    /**
     * Process stream stats data from webrtc
     *
     * @param stat - the stats coming in from webrtc
     */
    handleStream(stat) {
        this.streamStats = stat;
    }
    /**
     * Process the Ice Candidate Pair Data
     * @param stat - the stats coming in from ice candidates
     */
    handleCandidatePair(stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    }
    /**
     * Process the Data Channel Data
     * @param stat - the stats coming in from the data channel
     */
    handleDataChannel(stat) {
        this.DataChannelStats.bytesReceived = stat.bytesReceived;
        this.DataChannelStats.bytesSent = stat.bytesSent;
        this.DataChannelStats.dataChannelIdentifier =
            stat.dataChannelIdentifier;
        this.DataChannelStats.id = stat.id;
        this.DataChannelStats.label = stat.label;
        this.DataChannelStats.messagesReceived = stat.messagesReceived;
        this.DataChannelStats.messagesSent = stat.messagesSent;
        this.DataChannelStats.protocol = stat.protocol;
        this.DataChannelStats.state = stat.state;
        this.DataChannelStats.timestamp = stat.timestamp;
    }
    /**
     * Process the Local Ice Candidate Data
     * @param stat - local stats
     */
    handleLocalCandidate(stat) {
        const localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_7__.CandidateStat();
        localCandidate.label = 'local-candidate';
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    }
    /**
     * Process the Remote Ice Candidate Data
     * @param stat - ice candidate stats
     */
    handleRemoteCandidate(stat) {
        const RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_7__.CandidateStat();
        RemoteCandidate.label = 'local-candidate';
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    }
    /**
     * Process the Inbound RTP Audio and Video Data
     * @param stat - inbound rtp stats
     */
    handleInBoundRTP(stat) {
        switch (stat.kind) {
            case 'video':
                // Need to convert to unknown first to remove an error around
                // InboundVideoStats having the bitrate member which isn't found on
                // the InboundRTPStats
                this.inboundVideoStats = stat;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate =
                        (8 *
                            (this.inboundVideoStats.bytesReceived -
                                this.lastVideoStats.bytesReceived)) /
                            (this.inboundVideoStats.timestamp -
                                this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                }
                this.lastVideoStats = Object.assign({}, this.inboundVideoStats);
                break;
            case 'audio':
                // Need to convert to unknown first to remove an error around
                // InboundAudioStats having the bitrate member which isn't found on
                // the InboundRTPStats
                this.inboundAudioStats = stat;
                if (this.lastAudioStats != undefined) {
                    this.inboundAudioStats.bitrate =
                        (8 *
                            (this.inboundAudioStats.bytesReceived -
                                this.lastAudioStats.bytesReceived)) /
                            (this.inboundAudioStats.timestamp -
                                this.lastAudioStats.timestamp);
                    this.inboundAudioStats.bitrate = Math.floor(this.inboundAudioStats.bitrate);
                }
                this.lastAudioStats = Object.assign({}, this.inboundAudioStats);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.GetStackTrace(), 'Kind is not handled');
                break;
        }
    }
    /**
     * Process the outbound RTP Audio and Video Data
     * @param stat - remote outbound stats
     */
    handleRemoteOutBound(stat) {
        switch (stat.kind) {
            case 'video':
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case 'audio':
                break;
            default:
                break;
        }
    }
    /**
     * Process the Inbound Video Track Data
     * @param stat - video track stats
     */
    handleTrack(stat) {
        // we only want to extract stats from the video track
        if (stat.type === 'track' &&
            (stat.trackIdentifier === 'video_label' || stat.kind === 'video')) {
            this.inboundVideoStats.framesDropped = stat.framesDropped;
            this.inboundVideoStats.framesReceived = stat.framesReceived;
            this.inboundVideoStats.frameHeight = stat.frameHeight;
            this.inboundVideoStats.frameWidth = stat.frameWidth;
        }
    }
    handleCodec(stat) {
        const codecId = stat.id;
        const codecType = `${stat.mimeType
            .replace('video/', '')
            .replace('audio/', '')}${stat.sdpFmtpLine ? ` ${stat.sdpFmtpLine}` : ''}`;
        this.codecs.set(codecId, codecType);
    }
    handleSessionStatistics(videoStartTime, inputController, videoEncoderAvgQP) {
        const deltaTime = Date.now() - videoStartTime;
        this.sessionStats.runTime = new Date(deltaTime)
            .toISOString()
            .substr(11, 8)
            .toString();
        const controlsStreamInput = inputController === null
            ? 'Not sent yet'
            : inputController
                ? 'true'
                : 'false';
        this.sessionStats.controlsStreamInput = controlsStreamInput;
        this.sessionStats.videoEncoderAvgQP = videoEncoderAvgQP;
    }
    /**
     * Check if a value coming in from our stats is actually a number
     * @param value - the number to be checked
     */
    isNumber(value) {
        return typeof value === 'number' && isFinite(value);
    }
}


/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_166124__) => {

__nested_webpack_require_166124__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_166124__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
class CandidatePairStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_166836__) => {

__nested_webpack_require_166836__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_166836__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
class CandidateStat {
}


/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_167539__) => {

__nested_webpack_require_167539__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_167539__.d(__webpack_exports__, {
/* harmony export */   "DataChannelStats": () => (/* binding */ DataChannelStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
class DataChannelStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/InboundRTPStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/InboundRTPStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_168247__) => {

__nested_webpack_require_168247__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_168247__.d(__webpack_exports__, {
/* harmony export */   "InboundAudioStats": () => (/* binding */ InboundAudioStats),
/* harmony export */   "InboundRTPStats": () => (/* binding */ InboundRTPStats),
/* harmony export */   "InboundVideoStats": () => (/* binding */ InboundVideoStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
class InboundAudioStats {
}
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
class InboundVideoStats {
}
/**
 * Inbound Stats collected from the RTC Stats Report
 */
class InboundRTPStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/OutBoundRTPStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundRTPStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_169321__) => {

__nested_webpack_require_169321__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_169321__.d(__webpack_exports__, {
/* harmony export */   "OutBoundRTPStats": () => (/* binding */ OutBoundRTPStats),
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
class OutBoundVideoStats {
}
/**
 * Outbound Stats collected from the RTC Stats Report
 */
class OutBoundRTPStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_170250__) => {

__nested_webpack_require_170250__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_170250__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_170250__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_170250__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_170250__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_170250__(/*! sdp */ "sdp");
// Copyright Epic Games, Inc. All Rights Reserved.
var __awaiter = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Handles the Peer Connection
 */
class PeerConnectionController {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     * @param config - The config for our PS experience.
     */
    constructor(options, config, preferredCodec) {
        this.config = config;
        this.createPeerConnection(options, preferredCodec);
    }
    createPeerConnection(options, preferredCodec) {
        // Set the ICE transport to relay if TURN enabled
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceTURN)) {
            options.iceTransportPolicy = 'relay';
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Forcing TURN usage by setting ICE Transport Policy in peer connection config.');
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = (ev) => this.handleSignalStateChange(ev);
        this.peerConnection.oniceconnectionstatechange = (ev) => this.handleIceConnectionStateChange(ev);
        this.peerConnection.onicegatheringstatechange = (ev) => this.handleIceGatheringStateChange(ev);
        this.peerConnection.ontrack = (ev) => this.handleOnTrack(ev);
        this.peerConnection.onicecandidate = (ev) => this.handleIceCandidate(ev);
        this.peerConnection.ondatachannel = (ev) => this.handleDataChannel(ev);
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_3__.AggregatedStats();
        this.preferredCodec = preferredCodec;
        this.updateCodecSelection = true;
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    createOffer(offerOptions, config) {
        return __awaiter(this, void 0, void 0, function* () {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Create Offer', 6);
            const isLocalhostConnection = location.hostname === 'localhost' ||
                location.hostname === '127.0.0.1';
            const isHttpsConnection = location.protocol === 'https:';
            let useMic = config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.UseMic);
            if (useMic && !(isLocalhostConnection || isHttpsConnection)) {
                useMic = false;
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.');
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
            }
            this.setupTransceiversAsync(useMic).finally(() => {
                var _a;
                (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.createOffer(offerOptions).then((offer) => {
                    var _a;
                    this.showTextOverlayConnecting();
                    offer.sdp = this.mungeSDP(offer.sdp, useMic);
                    (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setLocalDescription(offer);
                    this.onSendWebRTCOffer(offer);
                }).catch(() => {
                    this.showTextOverlaySetupFailure();
                });
            });
        });
    }
    /**
     *
     */
    receiveOffer(offer, config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Receive Offer', 6);
            (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setRemoteDescription(offer).then(() => {
                const isLocalhostConnection = location.hostname === 'localhost' ||
                    location.hostname === '127.0.0.1';
                const isHttpsConnection = location.protocol === 'https:';
                let useMic = config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.UseMic);
                if (useMic && !(isLocalhostConnection || isHttpsConnection)) {
                    useMic = false;
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.');
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
                }
                this.setupTransceiversAsync(useMic).finally(() => {
                    var _a;
                    (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.createAnswer().then((Answer) => {
                        var _a;
                        Answer.sdp = this.mungeSDP(Answer.sdp, useMic);
                        return (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setLocalDescription(Answer);
                    }).then(() => {
                        var _a;
                        this.onSendWebRTCAnswer((_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.currentLocalDescription);
                    }).catch(() => {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'createAnswer() failed');
                    });
                });
            });
            // Ugly syntax, but this achieves the intersection of the browser supported list and the UE supported list
            this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.parseAvailableCodecs(offer).filter((value) => this.config
                .getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec)
                .options.includes(value)));
        });
    }
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param answer - RTC Session Descriptor from the Signaling Server
     */
    receiveAnswer(answer) {
        var _a;
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setRemoteDescription(answer);
        // Ugly syntax, but this achieves the intersection of the browser supported list and the UE supported list
        this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.parseAvailableCodecs(answer).filter((value) => this.config
            .getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec)
            .options.includes(value)));
    }
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    generateStats() {
        var _a;
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.getStats(null).then((StatsData) => {
            this.aggregatedStats.processStats(StatsData);
            this.onVideoStats(this.aggregatedStats);
            // Update the preferred codec selection based on what was actually negotiated
            if (this.updateCodecSelection) {
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.aggregatedStats.codecs.get(this.aggregatedStats.inboundVideoStats.codecId));
            }
        });
    }
    /**
     * Close The Peer Connection
     */
    close() {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    }
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    mungeSDP(sdp, useMic) {
        const mungedSDP = sdp;
        mungedSDP.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, '$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n');
        let audioSDP = '';
        // set max bitrate to highest bitrate Opus supports
        audioSDP += 'maxaveragebitrate=510000;';
        if (useMic) {
            // set the max capture rate to 48khz (so we can send high quality audio from mic)
            audioSDP += 'sprop-maxcapturerate=48000;';
        }
        // Force mono or stereo based on whether ?forceMono was passed or not
        audioSDP += this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceMonoAudio)
            ? 'stereo=0;'
            : 'stereo=1;';
        // enable in-band forward error correction for opus audio
        audioSDP += 'useinbandfec=1';
        // We use the line 'useinbandfec=1' (which Opus uses) to set our Opus specific audio parameters.
        mungedSDP.replace('useinbandfec=1', audioSDP);
        return mungedSDP;
    }
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    handleOnIce(iceCandidate) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'peerconnection handleOnIce', 6);
        // // if forcing TURN, reject any candidates not relay
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceTURN)) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf('relay') < 0) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), `Dropping candidate because it was not TURN relay. | Type= ${iceCandidate.type} | Protocol= ${iceCandidate.protocol} | Address=${iceCandidate.address} | Port=${iceCandidate.port} |`, 6);
                return;
            }
        }
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.addIceCandidate(iceCandidate);
    }
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    handleSignalStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'signaling state change: ' + state, 6);
    }
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    handleIceConnectionStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'ice connection state change: ' + state, 6);
        this.onIceConnectionStateChange(state);
    }
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    handleIceGatheringStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'ice gathering state change: ' + JSON.stringify(state), 6);
    }
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    handleOnTrack(event) {
        this.onTrack(event);
    }
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    handleIceCandidate(event) {
        this.onPeerIceCandidate(event);
    }
    /**
     * Activates the onDataChannel
     * @param event - The peer's data channel
     */
    handleDataChannel(event) {
        this.onDataChannel(event);
    }
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onTrack(trackEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onIceConnectionStateChange for use outside of the PeerConnectionController
     * @param event - The webRtc iceconnectionstatechange event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onIceConnectionStateChange(event) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onPeerIceCandidate(peerConnectionIceEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onDataChannel for use outside of the PeerConnectionController
     * @param datachannelEvent - The peer's data channel
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDataChannel(datachannelEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * Setup tracks on the RTC Peer Connection
     * @param useMic - is mic in use
     */
    setupTransceiversAsync(useMic) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return __awaiter(this, void 0, void 0, function* () {
            const hasTransceivers = ((_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.getTransceivers().length) > 0;
            // Setup a transceiver for getting UE video
            (_b = this.peerConnection) === null || _b === void 0 ? void 0 : _b.addTransceiver('video', { direction: 'recvonly' });
            // We can only set preferrec codec on Chrome
            if (RTCRtpReceiver.getCapabilities && this.preferredCodec != '') {
                for (const transceiver of (_d = (_c = this.peerConnection) === null || _c === void 0 ? void 0 : _c.getTransceivers()) !== null && _d !== void 0 ? _d : []) {
                    if (transceiver &&
                        transceiver.receiver &&
                        transceiver.receiver.track &&
                        transceiver.receiver.track.kind === 'video') {
                        const preferredRTPCodec = this.preferredCodec.split(' ');
                        const codecs = [
                            {
                                mimeType: 'video/' + preferredRTPCodec[0] /* Name */,
                                clockRate: 90000,
                                sdpFmtpLine: preferredRTPCodec[1] /* sdpFmtpLine */
                                    ? preferredRTPCodec[1]
                                    : ''
                            }
                        ];
                        this.config
                            .getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec)
                            .options.filter((option) => {
                            // Remove the preferred codec from the list of possible codecs as we've set it already
                            return option != this.preferredCodec;
                        })
                            .forEach((option) => {
                            // Ammend the rest of the browsers supported codecs
                            const altCodec = option.split(' ');
                            codecs.push({
                                mimeType: 'video/' + altCodec[0] /* Name */,
                                clockRate: 90000,
                                sdpFmtpLine: altCodec[1] /* sdpFmtpLine */
                                    ? altCodec[1]
                                    : ''
                            });
                        });
                        for (const codec of codecs) {
                            if (codec.sdpFmtpLine === '') {
                                // We can't dynamically add members to the codec, so instead remove the field if it's empty
                                delete codec.sdpFmtpLine;
                            }
                        }
                        transceiver.setCodecPreferences(codecs);
                    }
                }
            }
            // Setup a transceiver for sending mic audio to UE and receiving audio from UE
            if (!useMic) {
                (_e = this.peerConnection) === null || _e === void 0 ? void 0 : _e.addTransceiver('audio', {
                    direction: 'recvonly'
                });
            }
            else {
                // set the audio options based on mic usage
                const audioOptions = useMic
                    ? {
                        autoGainControl: false,
                        channelCount: 1,
                        echoCancellation: false,
                        latency: 0,
                        noiseSuppression: false,
                        sampleRate: 48000,
                        sampleSize: 16,
                        volume: 1.0
                    }
                    : false;
                // set the media send options
                const mediaSendOptions = {
                    video: false,
                    audio: audioOptions
                };
                // Note using mic on android chrome requires SSL or chrome://flags/ "unsafely-treat-insecure-origin-as-secure"
                const stream = yield navigator.mediaDevices.getUserMedia(mediaSendOptions);
                if (stream) {
                    if (hasTransceivers) {
                        for (const transceiver of (_g = (_f = this.peerConnection) === null || _f === void 0 ? void 0 : _f.getTransceivers()) !== null && _g !== void 0 ? _g : []) {
                            if (transceiver &&
                                transceiver.receiver &&
                                transceiver.receiver.track &&
                                transceiver.receiver.track.kind === 'audio') {
                                for (const track of stream.getTracks()) {
                                    if (track.kind && track.kind == 'audio') {
                                        transceiver.sender.replaceTrack(track);
                                        transceiver.direction = 'sendrecv';
                                    }
                                }
                            }
                        }
                    }
                    else {
                        for (const track of stream.getTracks()) {
                            if (track.kind && track.kind == 'audio') {
                                (_h = this.peerConnection) === null || _h === void 0 ? void 0 : _h.addTransceiver(track, {
                                    direction: 'sendrecv'
                                });
                            }
                        }
                    }
                }
                else {
                    (_j = this.peerConnection) === null || _j === void 0 ? void 0 : _j.addTransceiver('audio', {
                        direction: 'recvonly'
                    });
                }
            }
        });
    }
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onVideoStats(event) {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onSendWebRTCOffer(offer) {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the RTC Answer to the Signaling server
     * @param answer - RTC Answer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onSendWebRTCAnswer(answer) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    showTextOverlayConnecting() {
        // Default Functionality: Do Nothing
    }
    /**
     * An override for showing the Peer connection Failed overlay
     */
    showTextOverlaySetupFailure() {
        // Default Functionality: Do Nothing
    }
    parseAvailableCodecs(rtcSessionDescription) {
        // No point in updating the available codecs if on FF
        if (!RTCRtpReceiver.getCapabilities)
            return ['Only available on Chrome'];
        const ueSupportedCodecs = [];
        const sections = (0,sdp__WEBPACK_IMPORTED_MODULE_0__.splitSections)(rtcSessionDescription.sdp);
        // discard the session information as we only want media related info
        sections.shift();
        sections.forEach((mediaSection) => {
            const { codecs } = (0,sdp__WEBPACK_IMPORTED_MODULE_0__.parseRtpParameters)(mediaSection);
            // Filter only for VPX / H26X / AV1
            const matcher = /(VP\d|H26\d|AV1).*/;
            codecs.forEach((c) => {
                const str = c.name +
                    ' ' +
                    Object.keys(c.parameters || {})
                        .map((p) => p + '=' + c.parameters[p])
                        .join(';');
                const match = matcher.exec(str);
                if (match !== null) {
                    if (c.name == 'VP9') {
                        // UE answers don't specify profile but we know we want profile 0
                        c.parameters = {
                            'profile-id': '0'
                        };
                    }
                    const codecStr = c.name +
                        ' ' +
                        Object.keys(c.parameters || {})
                            .map((p) => p + '=' + c.parameters[p])
                            .join(';');
                    ueSupportedCodecs.push(codecStr);
                }
            });
        });
        return ueSupportedCodecs;
    }
}


/***/ }),

/***/ "./src/PeerConnectionController/SessionStats.ts":
/*!******************************************************!*\
  !*** ./src/PeerConnectionController/SessionStats.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_195050__) => {

__nested_webpack_require_195050__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_195050__.d(__webpack_exports__, {
/* harmony export */   "SessionStats": () => (/* binding */ SessionStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Session statistics
 */
class SessionStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_195694__) => {

__nested_webpack_require_195694__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_195694__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Class to hold the stream stats data coming in from webRtc
 */
class StreamStats {
}


/***/ }),

/***/ "./src/PixelStreaming/PixelStreaming.ts":
/*!**********************************************!*\
  !*** ./src/PixelStreaming/PixelStreaming.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_196346__) => {

__nested_webpack_require_196346__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_196346__.d(__webpack_exports__, {
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_196346__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_196346__(/*! ../WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_196346__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UI_OnScreenKeyboard__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_196346__(/*! ../UI/OnScreenKeyboard */ "./src/UI/OnScreenKeyboard.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_196346__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
/* harmony import */ var _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_196346__(/*! ../WebXR/WebXRController */ "./src/WebXR/WebXRController.ts");
// Copyright Epic Games, Inc. All Rights Reserved.







/**
 * The key class for the browser side of a Pixel Streaming application, it includes:
 * WebRTC handling, XR support, input handling, and emitters for lifetime and state change events.
 * Users are encouraged to use this class as is, through composition, or extend it. In any case,
 * this will likely be the core of your Pixel Streaming experience in terms of functionality.
 */
class PixelStreaming {
    /**
     * @param config - A newly instantiated config object
     * @param overrides - Parameters to override default behaviour
     * returns the base Pixel streaming object
     */
    constructor(config, overrides) {
        this._showActionOrErrorOnDisconnect = true;
        this.allowConsoleCommands = false;
        this.config = config;
        if (overrides === null || overrides === void 0 ? void 0 : overrides.videoElementParent) {
            this._videoElementParent = overrides.videoElementParent;
        }
        this._eventEmitter = new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
        this.configureSettings();
        // setup WebRTC
        this.setWebRtcPlayerController(new _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__.WebRtcPlayerController(this.config, this));
        // Onscreen keyboard
        this.onScreenKeyboardHelper = new _UI_OnScreenKeyboard__WEBPACK_IMPORTED_MODULE_2__.OnScreenKeyboard(this.videoElementParent);
        this.onScreenKeyboardHelper.unquantizeAndDenormalizeUnsigned = (x, y) => this._webRtcController.requestUnquantizedAndDenormalizeUnsigned(x, y);
        this._activateOnScreenKeyboard = (command) => this.onScreenKeyboardHelper.showOnScreenKeyboard(command);
        this._webXrController = new _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_3__.WebXRController(this._webRtcController);
    }
    /**
     * Gets the element that contains the video stream element.
     */
    get videoElementParent() {
        if (!this._videoElementParent) {
            this._videoElementParent = document.createElement('div');
            this._videoElementParent.id = 'videoElementParent';
        }
        return this._videoElementParent;
    }
    /**
     * Configure the settings with on change listeners and any additional per experience settings.
     */
    configureSettings() {
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.IsQualityController, (wantsQualityController) => {
            // If the setting has been set to true (either programatically or the user has flicked the toggle)
            // and we aren't currently quality controller, send the request
            if (wantsQualityController === true &&
                !this._webRtcController.isQualityController) {
                this._webRtcController.sendRequestQualityControlOwnership();
            }
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.AFKDetection, (isAFKEnabled) => {
            this._webRtcController.setAfkEnabled(isAFKEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MatchViewportResolution, () => {
            this._webRtcController.videoPlayer.updateVideoStreamSize();
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.HoveringMouseMode, (isHoveringMouse) => {
            this.config.setFlagLabel(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.HoveringMouseMode, `Control Scheme: ${isHoveringMouse ? 'Hovering' : 'Locked'} Mouse`);
            this._webRtcController.setMouseInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MouseInput));
        });
        // user input
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.KeyboardInput, (isEnabled) => {
            this._webRtcController.setKeyboardInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MouseInput, (isEnabled) => {
            this._webRtcController.setMouseInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.TouchInput, (isEnabled) => {
            this._webRtcController.setTouchInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.GamepadInput, (isEnabled) => {
            this._webRtcController.setGamePadInputEnabled(isEnabled);
        });
        // encoder settings
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending MinQP  --------', 7);
            this._webRtcController.sendEncoderMinQP(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending encoder settings  --------', 7);
            this._webRtcController.sendEncoderMaxQP(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        // WebRTC settings
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCMinBitrate(newValue * 1000 /* kbps to bps */);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCMaxBitrate(newValue * 1000 /* kbps to bps */);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCFps(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnOptionSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.OptionParameters.PreferredCodec, (newValue) => {
            if (this._webRtcController) {
                this._webRtcController.setPreferredCodec(newValue);
            }
        });
        this.config._registerOnChangeEvents(this._eventEmitter);
    }
    /**
     * Activate the on screen keyboard when receiving the command from the streamer
     * @param command - the keyboard command
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _activateOnScreenKeyboard(command) {
        throw new Error('Method not implemented.');
    }
    /**
     * Set the input control ownership
     * @param inputControlOwnership - does the user have input control ownership
     */
    _onInputControlOwnership(inputControlOwnership) {
        this._inputController = inputControlOwnership;
    }
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param webRtcPlayerController - a WebRtcPlayerController controller instance
     */
    setWebRtcPlayerController(webRtcPlayerController) {
        this._webRtcController = webRtcPlayerController;
        this._webRtcController.setPreferredCodec(this.config.getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.OptionParameters.PreferredCodec)
            .selected);
        this._webRtcController.resizePlayerStyle();
        // connect if auto connect flag is enabled
        this.checkForAutoConnect();
    }
    /**
     * Connect to signaling server.
     */
    connect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamPreConnectEvent());
        this._webRtcController.connectToSignallingServer();
    }
    /**
     * Reconnects to the signaling server. If connection is up, disconnects first
     * before establishing a new connection
     */
    reconnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamReconnectEvent());
        this._webRtcController.restartStreamAutomatically();
    }
    /**
     * Disconnect from the signaling server and close open peer connections.
     */
    disconnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamPreDisconnectEvent());
        this._webRtcController.close();
    }
    /**
     * Play the stream. Can be called only after a peer connection has been established.
     */
    play() {
        this._onStreamLoading();
        this._webRtcController.playStream();
    }
    /**
     * Auto connect if AutoConnect flag is enabled
     */
    checkForAutoConnect() {
        // set up if the auto play will be used or regular click to start
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.AutoConnect)) {
            // if autoplaying show an info overlay while while waiting for the connection to begin
            this._onWebRtcAutoConnect();
            this._webRtcController.connectToSignallingServer();
        }
    }
    /**
     * Emit an event on auto connecting
     */
    _onWebRtcAutoConnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcAutoConnectEvent());
        this._showActionOrErrorOnDisconnect = true;
    }
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    _onWebRtcSdp() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcSdpEvent());
    }
    /**
     * Emits a StreamLoading event
     */
    _onStreamLoading() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamLoadingEvent());
    }
    /**
     * Event fired when the video is disconnected - emits given eventString or an override
     * message from webRtcController if one has been set
     * @param eventString - the event text that will be emitted
     */
    _onDisconnect(eventString) {
        // if we have overridden the default disconnection message, assign the new value here
        if (this._webRtcController.getDisconnectMessageOverride() != '' &&
            this._webRtcController.getDisconnectMessageOverride() !==
                undefined &&
            this._webRtcController.getDisconnectMessageOverride() != null) {
            eventString = this._webRtcController.getDisconnectMessageOverride();
            this._webRtcController.setDisconnectMessageOverride('');
        }
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcDisconnectedEvent({
            eventString,
            showActionOrErrorOnDisconnect: this._showActionOrErrorOnDisconnect
        }));
        if (this._showActionOrErrorOnDisconnect == false) {
            this._showActionOrErrorOnDisconnect = true;
        }
    }
    /**
     * Handles when Web Rtc is connecting
     */
    _onWebRtcConnecting() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcConnectingEvent());
    }
    /**
     * Handles when Web Rtc has connected
     */
    _onWebRtcConnected() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcConnectedEvent());
    }
    /**
     * Handles when Web Rtc fails to connect
     */
    _onWebRtcFailed() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcFailedEvent());
    }
    /**
     * Handle when the Video has been Initialized
     */
    _onVideoInitialized() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.VideoInitializedEvent());
        this._videoStartTime = Date.now();
    }
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    _onLatencyTestResult(latencyTimings) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.LatencyTestResultEvent({ latencyTimings }));
    }
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    _onVideoStats(videoStats) {
        // Duration
        if (!this._videoStartTime || this._videoStartTime === undefined) {
            this._videoStartTime = Date.now();
        }
        videoStats.handleSessionStatistics(this._videoStartTime, this._inputController, this._webRtcController.videoAvgQp);
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StatsReceivedEvent({ aggregatedStats: videoStats }));
    }
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    _onVideoEncoderAvgQP(QP) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.VideoEncoderAvgQPEvent({ avgQP: QP }));
    }
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    _onInitialSettings(settings) {
        var _a;
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.InitialSettingsEvent({ settings }));
        if (settings.PixelStreamingSettings) {
            this.allowConsoleCommands =
                (_a = settings.PixelStreamingSettings.AllowPixelStreamingCommands) !== null && _a !== void 0 ? _a : false;
            if (this.allowConsoleCommands === false) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-AllowPixelStreamingCommands=false, sending arbitrary console commands from browser to UE is disabled.');
            }
        }
        const useUrlParams = this.config.useUrlParams;
        const urlParams = new URLSearchParams(window.location.search);
        if (settings.EncoderSettings) {
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP, 
            // If a setting is set in the URL, make sure we respect that value as opposed to what the application sends us
            (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP))
                : settings.EncoderSettings.MinQP);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP))
                : settings.EncoderSettings.MaxQP);
        }
        if (settings.WebRTCSettings) {
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate)) / 1000 /* bps to kbps */
                : settings.WebRTCSettings.MinBitrate / 1000 /* bps to kbps */);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate)) / 1000 /* bps to kbps */
                : settings.WebRTCSettings.MaxBitrate / 1000 /* bps to kbps */);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS))
                : settings.WebRTCSettings.FPS);
        }
    }
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    _onQualityControlOwnership(hasQualityOwnership) {
        this.config.setFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.IsQualityController, hasQualityOwnership);
    }
    /**
     * Request a connection latency test.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestLatencyTest() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendLatencyTest();
        return true;
    }
    /**
     * Request for the UE application to show FPS counter.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestShowFps() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendShowFps();
        return true;
    }
    /**
     * Request for a new IFrame from the UE application.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestIframe() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendIframeRequest();
        return true;
    }
    /**
     * Send data to UE application. The data will be run through JSON.stringify() so e.g. strings
     * and any serializable plain JSON objects with no recurrence can be sent.
     * @returns true if succeeded, false if rejected
     */
    emitUIInteraction(descriptor) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.emitUIInteraction(descriptor);
        return true;
    }
    /**
     * Send a command to UE application. Blocks ConsoleCommand descriptors unless UE
     * has signaled that it allows console commands.
     * @returns true if succeeded, false if rejected
     */
    emitCommand(descriptor) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        if (!this.allowConsoleCommands && 'ConsoleCommand' in descriptor) {
            return false;
        }
        this._webRtcController.emitCommand(descriptor);
        return true;
    }
    /**
     * Send a console command to UE application. Only allowed if UE has signaled that it allows
     * console commands.
     * @returns true if succeeded, false if rejected
     */
    emitConsoleCommand(command) {
        if (!this.allowConsoleCommands || !this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.emitConsoleCommand(command);
        return true;
    }
    /**
     * Add a UE -> browser response event listener
     * @param name - The name of the response handler
     * @param listener - The method to be activated when a message is received
     */
    addResponseEventListener(name, listener) {
        this._webRtcController.responseController.addResponseEventListener(name, listener);
    }
    /**
     * Remove a UE -> browser response event listener
     * @param name - The name of the response handler
     */
    removeResponseEventListener(name) {
        this._webRtcController.responseController.removeResponseEventListener(name);
    }
    /**
     * Dispatch a new event.
     * @param e event
     * @returns
     */
    dispatchEvent(e) {
        return this._eventEmitter.dispatchEvent(e);
    }
    /**
     * Register an event handler.
     * @param type event name
     * @param listener event handler function
     */
    addEventListener(type, listener) {
        this._eventEmitter.addEventListener(type, listener);
    }
    /**
     * Remove an event handler.
     * @param type event name
     * @param listener event handler function
     */
    removeEventListener(type, listener) {
        this._eventEmitter.removeEventListener(type, listener);
    }
    /**
     * Enable/disable XR mode.
     */
    toggleXR() {
        this.webXrController.xrClicked();
    }
    /**
     * Pass in a function to generate a signalling server URL.
     * This function is useful if you need to programmatically construct your signalling server URL.
     * @param signallingUrlBuilderFunc A function that generates a signalling server url.
     */
    setSignallingUrlBuilder(signallingUrlBuilderFunc) {
        this._webRtcController.signallingUrlBuilder = signallingUrlBuilderFunc;
    }
    /**
     * Public getter for the websocket controller. Access to this property allows you to send
     * custom websocket messages.
     */
    get webSocketController() {
        return this._webRtcController.webSocketController;
    }
    /**
     * Public getter for the webXrController controller. Used for all XR features.
     */
    get webXrController() {
        return this._webXrController;
    }
}


/***/ }),

/***/ "./src/UI/OnScreenKeyboard.ts":
/*!************************************!*\
  !*** ./src/UI/OnScreenKeyboard.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_221647__) => {

__nested_webpack_require_221647__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_221647__.d(__webpack_exports__, {
/* harmony export */   "OnScreenKeyboard": () => (/* binding */ OnScreenKeyboard)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Class for handling on screen keyboard usage
 */
class OnScreenKeyboard {
    /**
     *
     * @param videoElementParent The div element the video player is injected into
     */
    constructor(videoElementParent) {
        this.editTextButton = null;
        this.hiddenInput = null;
        if ('ontouchstart' in document.documentElement) {
            this.createOnScreenKeyboardHelpers(videoElementParent);
        }
    }
    /**
     * An override for unquantizeAndDenormalizeUnsigned
     * @param x the x axis point
     * @param y the y axis point
     * @returns unquantizeAndDenormalizeUnsigned object
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    unquantizeAndDenormalizeUnsigned(x, y) {
        return null;
    }
    /**
     * Creates on screen keyboard helpers
     * @param videoElementParent The div element the video player i injected into
     */
    createOnScreenKeyboardHelpers(videoElementParent) {
        if (!this.hiddenInput) {
            this.hiddenInput = document.createElement('input');
            this.hiddenInput.id = 'hiddenInput';
            this.hiddenInput.maxLength = 0;
            videoElementParent.appendChild(this.hiddenInput);
        }
        if (!this.editTextButton) {
            this.editTextButton = document.createElement('button');
            this.editTextButton.id = 'editTextButton';
            this.editTextButton.innerHTML = 'edit text';
            videoElementParent.appendChild(this.editTextButton);
            // Hide the 'edit text' button.
            this.editTextButton.classList.add('hiddenState');
            this.editTextButton.addEventListener('touchend', (event) => {
                // Show the on-screen keyboard.
                this.hiddenInput.focus();
                event.preventDefault();
            });
        }
    }
    /**
     * Shows the on screen keyboard
     * @param command the command received via the data channel containing keyboard positions
     */
    showOnScreenKeyboard(command) {
        if (command.showOnScreenKeyboard) {
            // Show the 'edit text' button.
            this.editTextButton.classList.remove('hiddenState');
            // Place the 'edit text' button near the UE input widget.
            const pos = this.unquantizeAndDenormalizeUnsigned(command.x, command.y);
            this.editTextButton.style.top = pos.y.toString() + 'px';
            this.editTextButton.style.left = (pos.x - 40).toString() + 'px';
        }
        else {
            // Hide the 'edit text' button.
            this.editTextButton.classList.add('hiddenState');
            // Hide the on-screen keyboard.
            this.hiddenInput.blur();
        }
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/ResponseController.ts":
/*!*****************************************************!*\
  !*** ./src/UeInstanceMessage/ResponseController.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_225026__) => {

__nested_webpack_require_225026__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_225026__.d(__webpack_exports__, {
/* harmony export */   "ResponseController": () => (/* binding */ ResponseController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_225026__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class ResponseController {
    constructor() {
        this.responseEventListeners = new Map();
    }
    /**
     * Add a response event listener to the response map
     * @param name - The name of the response
     * @param listener - The method to be activated when the response is selected
     */
    addResponseEventListener(name, listener) {
        this.responseEventListeners.set(name, listener);
    }
    /**
     * Remove a response event listener to the response map
     * @param name - The name of the response
     */
    removeResponseEventListener(name) {
        this.responseEventListeners.delete(name);
    }
    /**
     * Handle a response when receiving one form the streamer
     * @param message - Data received from the data channel with the command in question
     */
    onResponse(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.Response', 6);
        const responses = new TextDecoder('utf-16').decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), responses, 6);
        this.responseEventListeners.forEach((listener) => {
            listener(responses);
        });
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/SendDescriptorController.ts":
/*!***********************************************************!*\
  !*** ./src/UeInstanceMessage/SendDescriptorController.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_227162__) => {

__nested_webpack_require_227162__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_227162__.d(__webpack_exports__, {
/* harmony export */   "SendDescriptorController": () => (/* binding */ SendDescriptorController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_227162__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class SendDescriptorController {
    constructor(dataChannelSender, toStreamerMessagesMapProvider) {
        this.dataChannelSender = dataChannelSender;
        this.toStreamerMessagesMapProvider = toStreamerMessagesMapProvider;
    }
    /**
     * Send a Latency Test to the UE Instance
     * @param descriptor - the descriptor for a latency test
     */
    sendLatencyTest(descriptor) {
        this.sendDescriptor('LatencyTest', descriptor);
    }
    /**
     * Send a Latency Test to the UE Instance
     * @param descriptor - the descriptor for a command
     */
    emitCommand(descriptor) {
        this.sendDescriptor('Command', descriptor);
    }
    /**
     * Send a Latency Test to the UE Instance
     * @param descriptor - the descriptor for a UI Interaction
     */
    emitUIInteraction(descriptor) {
        this.sendDescriptor('UIInteraction', descriptor);
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param descriptor - Descriptor Message as JSON
     */
    sendDescriptor(messageType, descriptor) {
        // Convert the descriptor object into a JSON string.
        const descriptorAsString = JSON.stringify(descriptor);
        const toStreamerMessages = this.toStreamerMessagesMapProvider.toStreamerMessages;
        const messageFormat = toStreamerMessages.getFromKey(messageType);
        if (messageFormat === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Attempted to emit descriptor with message type: ${messageType}, but the frontend hasn't been configured to send such a message. Check you've added the message type in your cpp`);
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending: ' + descriptor, 6);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        const data = new DataView(new ArrayBuffer(1 + 2 + 2 * descriptorAsString.length));
        let byteIdx = 0;
        data.setUint8(byteIdx, messageFormat.id);
        byteIdx++;
        data.setUint16(byteIdx, descriptorAsString.length, true);
        byteIdx += 2;
        for (let i = 0; i < descriptorAsString.length; i++) {
            data.setUint16(byteIdx, descriptorAsString.charCodeAt(i), true);
            byteIdx += 2;
        }
        if (!this.dataChannelSender.canSend()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data channel cannot send yet, skipping sending descriptor message: ${messageType} - ${descriptorAsString}`);
            return;
        }
        this.dataChannelSender.sendData(data.buffer);
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/SendMessageController.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/SendMessageController.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_230833__) => {

__nested_webpack_require_230833__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_230833__.d(__webpack_exports__, {
/* harmony export */   "SendMessageController": () => (/* binding */ SendMessageController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_230833__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class SendMessageController {
    /**
     * @param dataChannelSender - Data channel instance
     * @param toStreamerMessagesMapProvider - Stream Messages instance
     */
    constructor(dataChannelSender, toStreamerMessagesMapProvider) {
        this.dataChannelSender = dataChannelSender;
        this.toStreamerMessagesMapProvider = toStreamerMessagesMapProvider;
    }
    /**
     * Send a message to the streamer through the data channel
     * @param messageType - the type of message we are sending
     * @param messageData - the message data we are sending over the data channel
     * @returns - nil
     */
    sendMessageToStreamer(messageType, messageData) {
        if (messageData === undefined) {
            messageData = [];
        }
        const toStreamerMessages = this.toStreamerMessagesMapProvider.toStreamerMessages;
        const messageFormat = toStreamerMessages.getFromKey(messageType);
        if (messageFormat === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Attempted to send a message to the streamer with message type: ${messageType}, but the frontend hasn't been configured to send such a message. Check you've added the message type in your cpp`);
            return;
        }
        const data = new DataView(new ArrayBuffer(messageFormat.byteLength + 1));
        data.setUint8(0, messageFormat.id);
        let byteOffset = 1;
        messageData.forEach((element, idx) => {
            const type = messageFormat.structure[idx];
            switch (type) {
                case 'uint8':
                    data.setUint8(byteOffset, element);
                    byteOffset += 1;
                    break;
                case 'uint16':
                    data.setUint16(byteOffset, element, true);
                    byteOffset += 2;
                    break;
                case 'int16':
                    data.setInt16(byteOffset, element, true);
                    byteOffset += 2;
                    break;
                case 'float':
                    data.setFloat32(byteOffset, element, true);
                    byteOffset += 4;
                    break;
                case 'double':
                    data.setFloat64(byteOffset, element, true);
                    byteOffset += 8;
                    break;
            }
        });
        if (!this.dataChannelSender.canSend()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data channel cannot send yet, skipping sending message: ${messageType} - ${new Uint8Array(data.buffer)}`);
            return;
        }
        else {
            this.dataChannelSender.sendData(data.buffer);
        }
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/StreamMessageController.ts":
/*!**********************************************************!*\
  !*** ./src/UeInstanceMessage/StreamMessageController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_234494__) => {

__nested_webpack_require_234494__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_234494__.d(__webpack_exports__, {
/* harmony export */   "MessageDirection": () => (/* binding */ MessageDirection),
/* harmony export */   "StreamMessageController": () => (/* binding */ StreamMessageController),
/* harmony export */   "ToStreamerMessage": () => (/* binding */ ToStreamerMessage)
/* harmony export */ });
/* harmony import */ var _TwoWayMap__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_234494__(/*! ./TwoWayMap */ "./src/UeInstanceMessage/TwoWayMap.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_234494__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


class ToStreamerMessage {
}
class StreamMessageController {
    constructor() {
        this.toStreamerHandlers = new Map();
        this.fromStreamerHandlers = new Map();
        this.toStreamerMessages = new _TwoWayMap__WEBPACK_IMPORTED_MODULE_0__.TwoWayMap();
        this.fromStreamerMessages = new _TwoWayMap__WEBPACK_IMPORTED_MODULE_0__.TwoWayMap();
    }
    /**
     * Populate the Default message protocol
     */
    populateDefaultProtocol() {
        /*
         * Control Messages. Range = 0..49.
         */
        this.toStreamerMessages.add('IFrameRequest', {
            id: 0,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('RequestQualityControl', {
            id: 1,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('FpsRequest', {
            id: 2,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('AverageBitrateRequest', {
            id: 3,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('StartStreaming', {
            id: 4,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('StopStreaming', {
            id: 5,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('LatencyTest', {
            id: 6,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('RequestInitialSettings', {
            id: 7,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('TestEcho', {
            id: 8,
            byteLength: 0,
            structure: []
        });
        /*
         * Input Messages. Range = 50..89.
         */
        // Generic Input Messages. Range = 50..59.
        this.toStreamerMessages.add('UIInteraction', {
            id: 50,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('Command', {
            id: 51,
            byteLength: 0,
            structure: []
        });
        // Keyboard Input Message. Range = 60..69.
        this.toStreamerMessages.add('KeyDown', {
            id: 60,
            byteLength: 2,
            //            keyCode  isRepeat
            structure: ['uint8', 'uint8']
        });
        this.toStreamerMessages.add('KeyUp', {
            id: 61,
            byteLength: 1,
            //            keyCode
            structure: ['uint8']
        });
        this.toStreamerMessages.add('KeyPress', {
            id: 62,
            byteLength: 2,
            //            charcode
            structure: ['uint16']
        });
        // Mouse Input Messages. Range = 70..79.
        this.toStreamerMessages.add('MouseEnter', {
            id: 70,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('MouseLeave', {
            id: 71,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('MouseDown', {
            id: 72,
            byteLength: 5,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        this.toStreamerMessages.add('MouseUp', {
            id: 73,
            byteLength: 5,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        this.toStreamerMessages.add('MouseMove', {
            id: 74,
            byteLength: 8,
            //              x           y      deltaX    deltaY
            structure: ['uint16', 'uint16', 'int16', 'int16']
        });
        this.toStreamerMessages.add('MouseWheel', {
            id: 75,
            byteLength: 6,
            //              delta       x        y
            structure: ['int16', 'uint16', 'uint16']
        });
        this.toStreamerMessages.add('MouseDouble', {
            id: 76,
            byteLength: 5,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        // Touch Input Messages. Range = 80..89.
        this.toStreamerMessages.add('TouchStart', {
            id: 80,
            byteLength: 8,
            //          numtouches(1)   x       y        idx     force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('TouchEnd', {
            id: 81,
            byteLength: 8,
            //          numtouches(1)   x       y        idx     force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('TouchMove', {
            id: 82,
            byteLength: 8,
            //          numtouches(1)   x       y       idx      force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        // Gamepad Input Messages. Range = 90..99
        this.toStreamerMessages.add('GamepadConnected', {
            id: 93,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('GamepadButtonPressed', {
            id: 90,
            byteLength: 3,
            //            ctrlerId   button  isRepeat
            structure: ['uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('GamepadButtonReleased', {
            id: 91,
            byteLength: 3,
            //            ctrlerId   button  isRepeat(0)
            structure: ['uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('GamepadAnalog', {
            id: 92,
            byteLength: 10,
            //            ctrlerId   button  analogValue
            structure: ['uint8', 'uint8', 'double']
        });
        this.toStreamerMessages.add('GamepadDisconnected', {
            id: 94,
            byteLength: 1,
            //          ctrlerId
            structure: ['uint8']
        });
        this.fromStreamerMessages.add('QualityControlOwnership', 0);
        this.fromStreamerMessages.add('Response', 1);
        this.fromStreamerMessages.add('Command', 2);
        this.fromStreamerMessages.add('FreezeFrame', 3);
        this.fromStreamerMessages.add('UnfreezeFrame', 4);
        this.fromStreamerMessages.add('VideoEncoderAvgQP', 5);
        this.fromStreamerMessages.add('LatencyTest', 6);
        this.fromStreamerMessages.add('InitialSettings', 7);
        this.fromStreamerMessages.add('FileExtension', 8);
        this.fromStreamerMessages.add('FileMimeType', 9);
        this.fromStreamerMessages.add('FileContents', 10);
        this.fromStreamerMessages.add('TestEcho', 11);
        this.fromStreamerMessages.add('InputControlOwnership', 12);
        this.fromStreamerMessages.add('GamepadResponse', 13);
        this.fromStreamerMessages.add('Protocol', 255);
    }
    /**
     * Register a message handler
     * @param messageDirection - the direction of the message; toStreamer or fromStreamer
     * @param messageType - the type of the message
     * @param messageHandler - the function or method to be executed when this handler is called
     */
    registerMessageHandler(messageDirection, messageType, messageHandler) {
        switch (messageDirection) {
            case MessageDirection.ToStreamer:
                this.toStreamerHandlers.set(messageType, messageHandler);
                break;
            case MessageDirection.FromStreamer:
                this.fromStreamerHandlers.set(messageType, messageHandler);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Unknown message direction ${messageDirection}`);
        }
    }
}
/**
 * The enum for message directions
 */
var MessageDirection;
(function (MessageDirection) {
    MessageDirection[MessageDirection["ToStreamer"] = 0] = "ToStreamer";
    MessageDirection[MessageDirection["FromStreamer"] = 1] = "FromStreamer";
})(MessageDirection || (MessageDirection = {}));


/***/ }),

/***/ "./src/UeInstanceMessage/ToStreamerMessagesController.ts":
/*!***************************************************************!*\
  !*** ./src/UeInstanceMessage/ToStreamerMessagesController.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_244053__) => {

__nested_webpack_require_244053__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_244053__.d(__webpack_exports__, {
/* harmony export */   "ToStreamerMessagesController": () => (/* binding */ ToStreamerMessagesController)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class ToStreamerMessagesController {
    /**
     * @param sendMessageController - Stream message controller instance
     */
    constructor(sendMessageController) {
        this.sendMessageController = sendMessageController;
    }
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    SendRequestQualityControl() {
        this.sendMessageController.sendMessageToStreamer('RequestQualityControl');
    }
    /**
     * Send Max FPS Request to the UE Instance
     */
    SendMaxFpsRequest() {
        this.sendMessageController.sendMessageToStreamer('FpsRequest');
    }
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    SendAverageBitrateRequest() {
        this.sendMessageController.sendMessageToStreamer('AverageBitrateRequest');
    }
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    SendStartStreaming() {
        this.sendMessageController.sendMessageToStreamer('StartStreaming');
    }
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    SendStopStreaming() {
        this.sendMessageController.sendMessageToStreamer('StopStreaming');
    }
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    SendRequestInitialSettings() {
        this.sendMessageController.sendMessageToStreamer('RequestInitialSettings');
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/TwoWayMap.ts":
/*!********************************************!*\
  !*** ./src/UeInstanceMessage/TwoWayMap.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_246037__) => {

__nested_webpack_require_246037__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_246037__.d(__webpack_exports__, {
/* harmony export */   "TwoWayMap": () => (/* binding */ TwoWayMap)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class TwoWayMap {
    /**
     * @param map - an optional map of parameters
     */
    constructor() {
        this.map = new Map();
        this.reverseMap = new Map();
    }
    /**
     * Get the value from the map by key
     * @param key - the key we are searching by
     * @returns - the value associated with the key
     */
    getFromKey(key) {
        return this.map.get(key);
    }
    /**
     * Get the reverse key from the map by searching by value
     * @param value - the key we are searching by
     * @returns - they key associated with the value
     */
    getFromValue(value) {
        return this.reverseMap.get(value);
    }
    /**
     * Add a key and value to both the map and reverse map
     * @param key - the indexing key
     * @param value - the value associated with the key
     */
    add(key, value) {
        this.map.set(key, value);
        this.reverseMap.set(value, key);
    }
    /**
     * Remove a key and value from both the map and reverse map
     * @param key - the indexing key
     * @param value - the value associated with the key
     */
    remove(key, value) {
        this.map.delete(key);
        this.reverseMap.delete(value);
    }
}


/***/ }),

/***/ "./src/Util/CoordinateConverter.ts":
/*!*****************************************!*\
  !*** ./src/Util/CoordinateConverter.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_247810__) => {

__nested_webpack_require_247810__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_247810__.d(__webpack_exports__, {
/* harmony export */   "CoordinateConverter": () => (/* binding */ CoordinateConverter),
/* harmony export */   "NormalizedQuantizedSignedCoord": () => (/* binding */ NormalizedQuantizedSignedCoord),
/* harmony export */   "NormalizedQuantizedUnsignedCoord": () => (/* binding */ NormalizedQuantizedUnsignedCoord),
/* harmony export */   "UnquantizedDenormalizedUnsignedCoord": () => (/* binding */ UnquantizedDenormalizedUnsignedCoord)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_247810__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Converts coordinates from element relative coordinates to values normalized within the value range of a short (and back again)
 */
class CoordinateConverter {
    /**
     * @param videoElementProvider - the div element that the video player will be injected into
     */
    constructor(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.normalizeAndQuantizeUnsignedFunc = () => {
            throw new Error('Normalize and quantize unsigned, method not implemented.');
        };
        this.normalizeAndQuantizeSignedFunc = () => {
            throw new Error('Normalize and unquantize signed, method not implemented.');
        };
        this.denormalizeAndUnquantizeUnsignedFunc = () => {
            throw new Error('Denormalize and unquantize unsigned, method not implemented.');
        };
    }
    /**
     * The surface method for setterNormalizeAndQuantizeUnsigned
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsigned(x, y) {
        return this.normalizeAndQuantizeUnsignedFunc(x, y);
    }
    /**
     * The surface method for setterUnquantizeAndDenormalizeUnsigned
     * @param x - x axis point
     * @param y - y axis point
     */
    unquantizeAndDenormalizeUnsigned(x, y) {
        return this.denormalizeAndUnquantizeUnsignedFunc(x, y);
    }
    /**
     * The surface method for setterNormalizeAndQuantizeSigned
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSigned(x, y) {
        return this.normalizeAndQuantizeSignedFunc(x, y);
    }
    /**
     * set up the Normalize And Quantize methods based on the aspect ratio and the video player ratio
     */
    setupNormalizeAndQuantize() {
        this.videoElementParent =
            this.videoElementProvider.getVideoParentElement();
        this.videoElement = this.videoElementProvider.getVideoElement();
        if (this.videoElementParent && this.videoElement) {
            const playerAspectRatio = this.videoElementParent.clientHeight /
                this.videoElementParent.clientWidth;
            const videoAspectRatio = this.videoElement.videoHeight / this.videoElement.videoWidth;
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                this.ratio = playerAspectRatio / videoAspectRatio;
                this.normalizeAndQuantizeUnsignedFunc = (x, y) => this.normalizeAndQuantizeUnsignedPlayerBigger(x, y);
                this.normalizeAndQuantizeSignedFunc = (x, y) => this.normalizeAndQuantizeSignedPlayerBigger(x, y);
                this.denormalizeAndUnquantizeUnsignedFunc = (x, y) => this.denormalizeAndUnquantizeUnsignedPlayerBigger(x, y);
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                this.ratio = videoAspectRatio / playerAspectRatio;
                this.normalizeAndQuantizeUnsignedFunc = (x, y) => this.normalizeAndQuantizeUnsignedPlayerSmaller(x, y);
                this.normalizeAndQuantizeSignedFunc = (x, y) => this.normalizeAndQuantizeSignedPlayerSmaller(x, y);
                this.denormalizeAndUnquantizeUnsignedFunc = (x, y) => this.denormalizeAndUnquantizeUnsignedPlayerSmaller(x, y);
            }
        }
    }
    /**
     * normalizeAndQuantizeUnsigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsignedPlayerBigger(x, y) {
        const normalizedX = x / this.videoElementParent.clientWidth;
        const normalizedY = this.ratio * (y / this.videoElementParent.clientHeight - 0.5) + 0.5;
        if (normalizedX < 0.0 ||
            normalizedX > 1.0 ||
            normalizedY < 0.0 ||
            normalizedY > 1.0) {
            return new NormalizedQuantizedUnsignedCoord(false, 65535, 65535);
        }
        else {
            return new NormalizedQuantizedUnsignedCoord(true, normalizedX * 65536, normalizedY * 65536);
        }
    }
    /**
     * unquantizeAndDenormalizeUnsigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    denormalizeAndUnquantizeUnsignedPlayerBigger(x, y) {
        const normalizedX = x / 65536;
        const normalizedY = (y / 65536 - 0.5) / this.ratio + 0.5;
        return new UnquantizedDenormalizedUnsignedCoord(normalizedX * this.videoElementParent.clientWidth, normalizedY * this.videoElementParent.clientHeight);
    }
    /**
     * normalizeAndQuantizeSigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSignedPlayerBigger(x, y) {
        const normalizedX = x / (0.5 * this.videoElementParent.clientWidth);
        const normalizedY = (this.ratio * y) / (0.5 * this.videoElementParent.clientHeight);
        return new NormalizedQuantizedSignedCoord(normalizedX * 32767, normalizedY * 32767);
    }
    /**
     * normalizeAndQuantizeUnsigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsignedPlayerSmaller(x, y) {
        const normalizedX = this.ratio * (x / this.videoElementParent.clientWidth - 0.5) + 0.5;
        const normalizedY = y / this.videoElementParent.clientHeight;
        if (normalizedX < 0.0 ||
            normalizedX > 1.0 ||
            normalizedY < 0.0 ||
            normalizedY > 1.0) {
            return new NormalizedQuantizedUnsignedCoord(false, 65535, 65535);
        }
        else {
            return new NormalizedQuantizedUnsignedCoord(true, normalizedX * 65536, normalizedY * 65536);
        }
    }
    /**
     * unquantizeAndDenormalizeUnsigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    denormalizeAndUnquantizeUnsignedPlayerSmaller(x, y) {
        const normalizedX = (x / 65536 - 0.5) / this.ratio + 0.5;
        const normalizedY = y / 65536;
        return new UnquantizedDenormalizedUnsignedCoord(normalizedX * this.videoElementParent.clientWidth, normalizedY * this.videoElementParent.clientHeight);
    }
    /**
     * normalizeAndQuantizeSigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSignedPlayerSmaller(x, y) {
        const normalizedX = (this.ratio * x) / (0.5 * this.videoElementParent.clientWidth);
        const normalizedY = y / (0.5 * this.videoElementParent.clientHeight);
        return new NormalizedQuantizedSignedCoord(normalizedX * 32767, normalizedY * 32767);
    }
}
/**
 * A class for NormalizeAndQuantizeUnsigned objects
 */
class NormalizedQuantizedUnsignedCoord {
    constructor(inRange, x, y) {
        this.inRange = inRange;
        this.x = x;
        this.y = y;
    }
}
/**
 * A class for UnquantizedAndDenormalizeUnsigned objects
 */
class UnquantizedDenormalizedUnsignedCoord {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
/**
 * A class for NormalizedQuantizedSignedCoord objects
 */
class NormalizedQuantizedSignedCoord {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/Util/EventEmitter.ts":
/*!**********************************!*\
  !*** ./src/Util/EventEmitter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_256594__) => {

__nested_webpack_require_256594__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_256594__.d(__webpack_exports__, {
/* harmony export */   "AfkTimedOutEvent": () => (/* binding */ AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* binding */ AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* binding */ AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* binding */ AfkWarningUpdateEvent),
/* harmony export */   "DataChannelCloseEvent": () => (/* binding */ DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* binding */ DataChannelErrorEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* binding */ DataChannelOpenEvent),
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter),
/* harmony export */   "HideFreezeFrameEvent": () => (/* binding */ HideFreezeFrameEvent),
/* harmony export */   "InitialSettingsEvent": () => (/* binding */ InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* binding */ LatencyTestResultEvent),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* binding */ LoadFreezeFrameEvent),
/* harmony export */   "PlayStreamErrorEvent": () => (/* binding */ PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* binding */ PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* binding */ PlayStreamRejectedEvent),
/* harmony export */   "SettingsChangedEvent": () => (/* binding */ SettingsChangedEvent),
/* harmony export */   "StatsReceivedEvent": () => (/* binding */ StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* binding */ StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* binding */ StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* binding */ StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* binding */ StreamReconnectEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* binding */ StreamerListMessageEvent),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* binding */ VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* binding */ VideoInitializedEvent),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* binding */ WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* binding */ WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* binding */ WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* binding */ WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* binding */ WebRtcFailedEvent),
/* harmony export */   "WebRtcSdpEvent": () => (/* binding */ WebRtcSdpEvent),
/* harmony export */   "XrFrameEvent": () => (/* binding */ XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* binding */ XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* binding */ XrSessionStartedEvent)
/* harmony export */ });
/**
 * An event that is emitted when AFK disconnect is about to happen.
 * Can be cancelled by calling the callback function provided as part of the event.
 */
class AfkWarningActivateEvent extends Event {
    constructor(data) {
        super('afkWarningActivate');
        this.data = data;
    }
}
/**
 * An event that is emitted when the AFK disconnect countdown is updated.
 */
class AfkWarningUpdateEvent extends Event {
    constructor(data) {
        super('afkWarningUpdate');
        this.data = data;
    }
}
/**
 * An event that is emitted when AFK warning is deactivated.
 */
class AfkWarningDeactivateEvent extends Event {
    constructor() {
        super('afkWarningDeactivate');
    }
}
/**
 * An event that is emitted when AFK countdown reaches 0 and the user is disconnected.
 */
class AfkTimedOutEvent extends Event {
    constructor() {
        super('afkTimedOut');
    }
}
/**
 * An event that is emitted when we receive new video quality value.
 */
class VideoEncoderAvgQPEvent extends Event {
    constructor(data) {
        super('videoEncoderAvgQP');
        this.data = data;
    }
}
/**
 * An event that is emitted after a WebRtc connection has been negotiated.
 */
class WebRtcSdpEvent extends Event {
    constructor() {
        super('webRtcSdp');
    }
}
/**
 * An event that is emitted when auto connecting.
 */
class WebRtcAutoConnectEvent extends Event {
    constructor() {
        super('webRtcAutoConnect');
    }
}
/**
 * An event that is emitted when sending a WebRtc offer.
 */
class WebRtcConnectingEvent extends Event {
    constructor() {
        super('webRtcConnecting');
    }
}
/**
 * An event that is emitted when WebRtc connection has been established.
 */
class WebRtcConnectedEvent extends Event {
    constructor() {
        super('webRtcConnected');
    }
}
/**
 * An event that is emitted if WebRtc connection has failed.
 */
class WebRtcFailedEvent extends Event {
    constructor() {
        super('webRtcFailed');
    }
}
/**
 * An event that is emitted if WebRtc connection is disconnected.
 */
class WebRtcDisconnectedEvent extends Event {
    constructor(data) {
        super('webRtcDisconnected');
        this.data = data;
    }
}
/**
 * An event that is emitted when RTCDataChannel is opened.
 */
class DataChannelOpenEvent extends Event {
    constructor(data) {
        super('dataChannelOpen');
        this.data = data;
    }
}
/**
 * An event that is emitted when RTCDataChannel is closed.
 */
class DataChannelCloseEvent extends Event {
    constructor(data) {
        super('dataChannelClose');
        this.data = data;
    }
}
/**
 * An event that is emitted on RTCDataChannel errors.
 */
class DataChannelErrorEvent extends Event {
    constructor(data) {
        super('dataChannelError');
        this.data = data;
    }
}
/**
 * An event that is emitted when the video stream has been initialized.
 */
class VideoInitializedEvent extends Event {
    constructor() {
        super('videoInitialized');
    }
}
/**
 * An event that is emitted when video stream loading starts.
 */
class StreamLoadingEvent extends Event {
    constructor() {
        super('streamLoading');
    }
}
/**
 * An event that is emitted when video stream loading has finished.
 */
class StreamPreConnectEvent extends Event {
    constructor() {
        super('streamConnect');
    }
}
/**
 * An event that is emitted when video stream has stopped.
 */
class StreamPreDisconnectEvent extends Event {
    constructor() {
        super('streamDisconnect');
    }
}
/**
 * An event that is emitted when video stream is reconnecting.
 */
class StreamReconnectEvent extends Event {
    constructor() {
        super('streamReconnect');
    }
}
/**
 * An event that is emitted if there are errors loading the video stream.
 */
class PlayStreamErrorEvent extends Event {
    constructor(data) {
        super('playStreamError');
        this.data = data;
    }
}
/**
 * An event that is emitted before trying to start video playback.
 */
class PlayStreamEvent extends Event {
    constructor() {
        super('playStream');
    }
}
/**
 * An event that is emitted if the browser rejects video playback. Can happen for example if
 * video auto-play without user interaction is refused by the browser.
 */
class PlayStreamRejectedEvent extends Event {
    constructor(data) {
        super('playStreamRejected');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving a full FreezeFrame image from UE.
 */
class LoadFreezeFrameEvent extends Event {
    constructor(data) {
        super('loadFreezeFrame');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving UnfreezeFrame message from UE and video playback is about to be resumed.
 */
class HideFreezeFrameEvent extends Event {
    constructor() {
        super('hideFreezeFrame');
    }
}
/**
 * An event that is emitted when receiving WebRTC statistics.
 */
class StatsReceivedEvent extends Event {
    constructor(data) {
        super('statsReceived');
        this.data = data;
    }
}
/**
 * An event that is emitted when streamer list changes.
 */
class StreamerListMessageEvent extends Event {
    constructor(data) {
        super('streamerListMessage');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving latency test results.
 */
class LatencyTestResultEvent extends Event {
    constructor(data) {
        super('latencyTestResult');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving initial settings from UE.
 */
class InitialSettingsEvent extends Event {
    constructor(data) {
        super('initialSettings');
        this.data = data;
    }
}
/**
 * An event that is emitted when PixelStreaming settings change.
 */
class SettingsChangedEvent extends Event {
    constructor(data) {
        super('settingsChanged');
        this.data = data;
    }
}
/**
 * Event emitted when an XR Session starts
 */
class XrSessionStartedEvent extends Event {
    constructor() {
        super('xrSessionStarted');
    }
}
/**
 * Event emitted when an XR Session ends
 */
class XrSessionEndedEvent extends Event {
    constructor() {
        super('xrSessionEnded');
    }
}
/**
 * Event emitted when an XR Frame is complete
 */
class XrFrameEvent extends Event {
    constructor(data) {
        super('xrFrame');
        this.data = data;
    }
}
class EventEmitter extends EventTarget {
    /**
     * Dispatch a new event.
     * @param e event
     * @returns
     */
    dispatchEvent(e) {
        return super.dispatchEvent(e);
    }
    /**
     * Register an event handler.
     * @param type event name
     * @param listener event handler function
     */
    addEventListener(type, listener) {
        super.addEventListener(type, listener);
    }
    /**
     * Remove an event handler.
     * @param type event name
     * @param listener event handler function
     */
    removeEventListener(type, listener) {
        super.removeEventListener(type, listener);
    }
}


/***/ }),

/***/ "./src/Util/EventListenerTracker.ts":
/*!******************************************!*\
  !*** ./src/Util/EventListenerTracker.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_267304__) => {

__nested_webpack_require_267304__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_267304__.d(__webpack_exports__, {
/* harmony export */   "EventListenerTracker": () => (/* binding */ EventListenerTracker)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class EventListenerTracker {
    constructor() {
        this.unregisterCallbacks = [];
    }
    /**
     * Add a new callback that is executed when unregisterAll is called.
     * @param callback
     */
    addUnregisterCallback(callback) {
        this.unregisterCallbacks.push(callback);
    }
    /**
     * Execute all callbacks and clear the list.
     */
    unregisterAll() {
        for (const callback of this.unregisterCallbacks) {
            callback();
        }
        this.unregisterCallbacks = [];
    }
}


/***/ }),

/***/ "./src/Util/FileUtil.ts":
/*!******************************!*\
  !*** ./src/Util/FileUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_268361__) => {

__nested_webpack_require_268361__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_268361__.d(__webpack_exports__, {
/* harmony export */   "FileTemplate": () => (/* binding */ FileTemplate),
/* harmony export */   "FileUtil": () => (/* binding */ FileUtil)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_268361__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Utility function for populate file information from byte buffers.
 */
class FileUtil {
    /**
     * Processes a files extension when received over data channel
     * @param view - the file extension data
     */
    static setExtensionFromBytes(view, file) {
        // Reset file if we got a file message and we are not "receiving" it yet
        if (!file.receiving) {
            file.mimetype = '';
            file.extension = '';
            file.receiving = true;
            file.valid = false;
            file.size = 0;
            file.data = [];
            file.timestampStart = new Date().getTime();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received first chunk of file', 6);
        }
        const extensionAsString = new TextDecoder('utf-16').decode(view.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), extensionAsString, 6);
        file.extension = extensionAsString;
    }
    /**
     * Processes a files mime type when received over data channel
     * @param view - the file mime type data
     */
    static setMimeTypeFromBytes(view, file) {
        // Reset file if we got a file message and we are not "receiving" it yet
        if (!file.receiving) {
            file.mimetype = '';
            file.extension = '';
            file.receiving = true;
            file.valid = false;
            file.size = 0;
            file.data = [];
            file.timestampStart = new Date().getTime();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received first chunk of file', 6);
        }
        const mimeAsString = new TextDecoder('utf-16').decode(view.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), mimeAsString, 6);
        file.mimetype = mimeAsString;
    }
    /**
     * Processes a files contents when received over data channel
     * @param view - the file contents data
     */
    static setContentsFromBytes(view, file) {
        // If we haven't received the initial setup instructions, return
        if (!file.receiving)
            return;
        // Extract the total size of the file (across all chunks)
        file.size = Math.ceil(new DataView(view.slice(1, 5).buffer).getInt32(0, true) /
            16379 /* The maximum number of payload bits per message*/);
        // Get the file part of the payload
        const fileBytes = view.slice(1 + 4);
        // Append to existing data that holds the file
        file.data.push(fileBytes);
        // Uncomment for debug
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Received file chunk: ${file.data.length}/${file.size}`, 6);
        if (file.data.length === file.size) {
            file.receiving = false;
            file.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received complete file', 6);
            const transferDuration = new Date().getTime() - file.timestampStart;
            const transferBitrate = Math.round((file.size * 16 * 1024) / transferDuration);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Average transfer bitrate: ${transferBitrate}kb/s over ${transferDuration / 1000} seconds`, 6);
            // File reconstruction
            /**
             * Example code to reconstruct the file
             *
             * This code reconstructs the received data into the original file based on the mime type and extension provided and then downloads the reconstructed file
             */
            const received = new Blob(file.data, { type: file.mimetype });
            const a = document.createElement('a');
            a.setAttribute('href', URL.createObjectURL(received));
            a.setAttribute('download', `transfer.${file.extension}`);
            document.body.append(a);
            // if you are so inclined to make it auto-download, do something like: a.click();
            a.remove();
        }
        else if (file.data.length > file.size) {
            file.receiving = false;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Received bigger file than advertised: ${file.data.length}/${file.size}`);
        }
    }
}
/**
 * A class that represents a template for a downloaded file
 */
class FileTemplate {
    constructor() {
        this.mimetype = '';
        this.extension = '';
        this.receiving = false;
        this.size = 0;
        this.data = [];
        this.valid = false;
    }
}


/***/ }),

/***/ "./src/Util/WebGLUtils.ts":
/*!********************************!*\
  !*** ./src/Util/WebGLUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_274177__) => {

__nested_webpack_require_274177__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_274177__.d(__webpack_exports__, {
/* harmony export */   "WebGLUtils": () => (/* binding */ WebGLUtils)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class WebGLUtils {
    static vertexShader() {
        return `
		attribute vec2 a_position;
		attribute vec2 a_texCoord;

		// input
		uniform vec2 u_resolution;
		uniform vec4 u_offset;

		//
		varying vec2 v_texCoord;

		void main() {
		   // convert the rectangle from pixels to 0.0 to 1.0
		   vec2 zeroToOne = a_position / u_resolution;

		   // convert from 0->1 to 0->2
		   vec2 zeroToTwo = zeroToOne * 2.0;

		   // convert from 0->2 to -1->+1 (clipspace)
		   vec2 clipSpace = zeroToTwo - 1.0;

		   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
		   // pass the texCoord to the fragment shader
		   // The GPU will interpolate this value between points.
		   v_texCoord = (a_texCoord * u_offset.xy) + u_offset.zw;
		}
		`;
    }
    static fragmentShader() {
        return `
		precision mediump float;

		// our texture
		uniform sampler2D u_image;

		// the texCoords passed in from the vertex shader.
		varying vec2 v_texCoord;

		void main() {
		   gl_FragColor = texture2D(u_image, v_texCoord);
		}
		`;
    }
}


/***/ }),

/***/ "./src/Util/WebXRUtils.ts":
/*!********************************!*\
  !*** ./src/Util/WebXRUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_275755__) => {

__nested_webpack_require_275755__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_275755__.d(__webpack_exports__, {
/* harmony export */   "WebXRUtils": () => (/* binding */ WebXRUtils)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class WebXRUtils {
    /**
     * Deep copies a gamepad's values by first converting it to a JSON object and then back to a gamepad
     *
     * @param gamepad the original gamepad
     * @returns a new gamepad object, populated with the original gamepads values
     */
    static deepCopyGamepad(gamepad) {
        return JSON.parse(JSON.stringify({
            buttons: gamepad.buttons.map((b) => JSON.parse(JSON.stringify({
                pressed: b.pressed,
                touched: b.touched
            }))),
            axes: gamepad.axes
        }));
    }
}


/***/ }),

/***/ "./src/VideoPlayer/StreamController.ts":
/*!*********************************************!*\
  !*** ./src/VideoPlayer/StreamController.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_276892__) => {

__nested_webpack_require_276892__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_276892__.d(__webpack_exports__, {
/* harmony export */   "StreamController": () => (/* binding */ StreamController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_276892__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
class StreamController {
    /**
     * @param videoElementProvider Video Player instance
     */
    constructor(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.audioElement = document.createElement('Audio');
    }
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    handleOnTrack(rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'handleOnTrack ' + JSON.stringify(rtcTrackEvent.streams), 6);
        const videoElement = this.videoElementProvider.getVideoElement();
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Got track - ' +
                rtcTrackEvent.track.kind +
                ' id=' +
                rtcTrackEvent.track.id +
                ' readyState=' +
                rtcTrackEvent.track.readyState, 6);
        }
        if (rtcTrackEvent.track.kind == 'audio') {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == 'video' &&
            videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            videoElement.srcObject = rtcTrackEvent.streams[0];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Set video source from video track ontrack.');
            return;
        }
    }
    /**
     * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
     * @param audioMediaStream - Audio Media stream track
     */
    CreateAudioTrack(audioMediaStream) {
        const videoElement = this.videoElementProvider.getVideoElement();
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (videoElement.srcObject &&
            videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Created new audio element to play separate audio stream.');
        }
    }
}


/***/ }),

/***/ "./src/VideoPlayer/VideoPlayer.ts":
/*!****************************************!*\
  !*** ./src/VideoPlayer/VideoPlayer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_280345__) => {

__nested_webpack_require_280345__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_280345__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayer": () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_280345__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_280345__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * The video player html element
 */
class VideoPlayer {
    /**
     * @param videoElementParent the html div the the video player will be injected into
     * @param config the applications configuration. We're interested in the startVideoMuted flag
     */
    constructor(videoElementParent, config) {
        this.lastTimeResized = new Date().getTime();
        this.videoElement = document.createElement('video');
        this.config = config;
        this.videoElement.id = 'streamingVideo';
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = '100%';
        this.videoElement.style.height = '100%';
        this.videoElement.style.position = 'absolute';
        this.videoElement.style.pointerEvents = 'all';
        videoElementParent.appendChild(this.videoElement);
        this.onResizePlayerCallback = () => {
            console.log('Resolution changed, restyling player, did you forget to override this function?');
        };
        this.onMatchViewportResolutionCallback = () => {
            console.log('Resolution changed and match viewport resolution is turned on, did you forget to override this function?');
        };
        // set play for video
        this.videoElement.onclick = () => {
            if (this.videoElement.paused) {
                this.videoElement.play();
            }
        };
        this.videoElement.onloadedmetadata = () => {
            this.onVideoInitialized();
        };
        // set resize events to the windows if it is resized or its orientation is changed
        window.addEventListener('resize', () => this.resizePlayerStyle(), true);
        window.addEventListener('orientationchange', () => this.onOrientationChange());
    }
    /**
     * Sets up the video element with any application config and plays the video element.
     * @returns A promise for if playing the video was successful or not.
     */
    play() {
        this.videoElement.muted = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.StartVideoMuted);
        this.videoElement.autoplay = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.AutoPlayVideo);
        return this.videoElement.play();
    }
    /**
     * @returns True if the video element is paused.
     */
    isPaused() {
        return this.videoElement.paused;
    }
    /**
     * @returns - whether the video element is playing.
     */
    isVideoReady() {
        return (this.videoElement.readyState !== undefined &&
            this.videoElement.readyState > 0);
    }
    /**
     * @returns True if the video element has a valid video source (srcObject).
     */
    hasVideoSource() {
        return (this.videoElement.srcObject !== undefined &&
            this.videoElement.srcObject !== null);
    }
    /**
     * Get the current context of the html video element
     * @returns - the current context of the video element
     */
    getVideoElement() {
        return this.videoElement;
    }
    /**
     * Get the current context of the html video elements parent
     * @returns - the current context of the video elements parent
     */
    getVideoParentElement() {
        return this.videoElement.parentElement;
    }
    /**
     * Set the Video Elements src object tracks to enable
     * @param enabled - Enable Tracks on the Src Object
     */
    setVideoEnabled(enabled) {
        // this is a temporary hack until type scripts video element is updated to reflect the need for tracks on a html video element
        const videoElement = this.videoElement;
        videoElement.srcObject
            .getTracks()
            .forEach((track) => (track.enabled = enabled));
    }
    /**
     * An override for when the video has been initialized with a srcObject
     */
    onVideoInitialized() {
        // Default Functionality: Do Nothing
    }
    /**
     * On the orientation change of a window clear the timeout
     */
    onOrientationChange() {
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = window.setTimeout(() => {
            this.resizePlayerStyle();
        }, 500);
    }
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    resizePlayerStyle() {
        const videoElementParent = this.getVideoParentElement();
        if (!videoElementParent) {
            return;
        }
        this.updateVideoStreamSize();
        if (videoElementParent.classList.contains('fixed-size')) {
            this.onResizePlayerCallback();
            return;
        }
        // controls for resizing the player
        this.resizePlayerStyleToFillParentElement();
        this.onResizePlayerCallback();
    }
    /**
     * Resizes the player element to fill the parent element
     */
    resizePlayerStyleToFillParentElement() {
        const videoElementParent = this.getVideoParentElement();
        //Video is not initialized yet so set videoElementParent to size of parent element
        const styleWidth = '100%';
        const styleHeight = '100%';
        const styleTop = 0;
        const styleLeft = 0;
        videoElementParent.setAttribute('style', 'top: ' +
            styleTop +
            'px; left: ' +
            styleLeft +
            'px; width: ' +
            styleWidth +
            '; height: ' +
            styleHeight +
            '; cursor: default;');
    }
    updateVideoStreamSize() {
        if (!this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.MatchViewportResolution)) {
            return;
        }
        const now = new Date().getTime();
        if (now - this.lastTimeResized > 300) {
            const videoElementParent = this.getVideoParentElement();
            if (!videoElementParent) {
                return;
            }
            this.onMatchViewportResolutionCallback(videoElementParent.clientWidth, videoElementParent.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Resizing too often - skipping', 6);
            clearTimeout(this.resizeTimeoutHandle);
            this.resizeTimeoutHandle = window.setTimeout(() => this.updateVideoStreamSize(), 100);
        }
    }
}


/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_287850__) => {

__nested_webpack_require_287850__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_287850__.d(__webpack_exports__, {
/* harmony export */   "WebRtcPlayerController": () => (/* binding */ WebRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_287850__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_287850__(/*! ../VideoPlayer/StreamController */ "./src/VideoPlayer/StreamController.ts");
/* harmony import */ var _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_287850__(/*! ../FreezeFrame/FreezeFrameController */ "./src/FreezeFrame/FreezeFrameController.ts");
/* harmony import */ var _AFK_AFKController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_287850__(/*! ../AFK/AFKController */ "./src/AFK/AFKController.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_287850__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_287850__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_287850__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_20__ = __nested_webpack_require_287850__(/*! ../DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_287850__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_287850__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_287850__(/*! ../Util/FileUtil */ "./src/Util/FileUtil.ts");
/* harmony import */ var _Inputs_InputClassesFactory__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_287850__(/*! ../Inputs/InputClassesFactory */ "./src/Inputs/InputClassesFactory.ts");
/* harmony import */ var _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_287850__(/*! ../VideoPlayer/VideoPlayer */ "./src/VideoPlayer/VideoPlayer.ts");
/* harmony import */ var _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_287850__(/*! ../UeInstanceMessage/StreamMessageController */ "./src/UeInstanceMessage/StreamMessageController.ts");
/* harmony import */ var _UeInstanceMessage_ResponseController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_287850__(/*! ../UeInstanceMessage/ResponseController */ "./src/UeInstanceMessage/ResponseController.ts");
/* harmony import */ var _UeInstanceMessage_SendDescriptorController__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_287850__(/*! ../UeInstanceMessage/SendDescriptorController */ "./src/UeInstanceMessage/SendDescriptorController.ts");
/* harmony import */ var _UeInstanceMessage_SendMessageController__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_287850__(/*! ../UeInstanceMessage/SendMessageController */ "./src/UeInstanceMessage/SendMessageController.ts");
/* harmony import */ var _UeInstanceMessage_ToStreamerMessagesController__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_287850__(/*! ../UeInstanceMessage/ToStreamerMessagesController */ "./src/UeInstanceMessage/ToStreamerMessagesController.ts");
/* harmony import */ var _DataChannel_DataChannelSender__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_287850__(/*! ../DataChannel/DataChannelSender */ "./src/DataChannel/DataChannelSender.ts");
/* harmony import */ var _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_287850__(/*! ../Util/CoordinateConverter */ "./src/Util/CoordinateConverter.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_287850__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





















/**
 * Entry point for the WebRTC Player
 */
class WebRtcPlayerController {
    /**
     *
     * @param config - the frontend config object
     * @param pixelStreaming - the PixelStreaming object
     */
    constructor(config, pixelStreaming) {
        this.shouldShowPlayOverlay = true;
        this.config = config;
        this.pixelStreaming = pixelStreaming;
        this.responseController = new _UeInstanceMessage_ResponseController__WEBPACK_IMPORTED_MODULE_0__.ResponseController();
        this.file = new _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileTemplate();
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server
        this.afkController = new _AFK_AFKController__WEBPACK_IMPORTED_MODULE_2__.AFKController(this.config, this.pixelStreaming, this.onAfkTriggered.bind(this));
        this.afkController.onAFKTimedOutCallback = () => {
            this.setDisconnectMessageOverride('You have been disconnected due to inactivity');
            this.closeSignalingServer();
        };
        this.freezeFrameController = new _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__.FreezeFrameController(this.pixelStreaming.videoElementParent);
        this.videoPlayer = new _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_4__.VideoPlayer(this.pixelStreaming.videoElementParent, this.config);
        this.videoPlayer.onVideoInitialized = () => this.handleVideoInitialized();
        // When in match viewport resolution mode, when the browser viewport is resized we send a resize command back to UE.
        this.videoPlayer.onMatchViewportResolutionCallback = (width, height) => {
            const descriptor = {
                'Resolution.Width': width,
                'Resolution.Height': height
            };
            this.sendDescriptorController.emitCommand(descriptor);
        };
        // Every time video player is resized in browser we need to reinitialize the mouse coordinate conversion and freeze frame sizing logic.
        this.videoPlayer.onResizePlayerCallback = () => {
            this.setUpMouseAndFreezeFrame();
        };
        this.streamController = new _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_5__.StreamController(this.videoPlayer);
        this.coordinateConverter = new _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_6__.CoordinateConverter(this.videoPlayer);
        this.sendrecvDataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__.DataChannelController();
        this.recvDataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__.DataChannelController();
        this.registerDataChannelEventEmitters(this.sendrecvDataChannelController);
        this.registerDataChannelEventEmitters(this.recvDataChannelController);
        this.dataChannelSender = new _DataChannel_DataChannelSender__WEBPACK_IMPORTED_MODULE_8__.DataChannelSender(this.sendrecvDataChannelController);
        this.dataChannelSender.resetAfkWarningTimerOnDataSend = () => this.afkController.resetAfkWarningTimer();
        this.streamMessageController = new _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.StreamMessageController();
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_10__.WebSocketController();
        this.webSocketController.onConfig = (messageConfig) => this.handleOnConfigMessage(messageConfig);
        this.webSocketController.onStreamerList = (messageList) => this.handleStreamerListMessage(messageList);
        this.webSocketController.onWebSocketOncloseOverlayMessage = (event) => {
            this.pixelStreaming._onDisconnect(`Websocket disconnect (${event.code}) ${event.reason != '' ? '- ' + event.reason : ''}`);
            this.setVideoEncoderAvgQP(0);
        };
        this.webSocketController.onOpen.addEventListener('open', () => {
            const BrowserSendsOffer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer);
            if (!BrowserSendsOffer) {
                this.webSocketController.requestStreamerList();
            }
        });
        this.webSocketController.onClose.addEventListener('close', () => {
            this.afkController.stopAfkWarningTimer();
            // stop sending stats on interval if we have closed our connection
            if (this.statsTimerHandle && this.statsTimerHandle !== undefined) {
                window.clearInterval(this.statsTimerHandle);
            }
            // unregister all input device event handlers on disconnect
            this.setTouchInputEnabled(false);
            this.setMouseInputEnabled(false);
            this.setKeyboardInputEnabled(false);
            this.setGamePadInputEnabled(false);
            if (this.shouldReconnect && this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.MaxReconnectAttempts) > 0) {
                this.isReconnecting = true;
                this.reconnectAttempt++;
                this.restartStreamAutomatically();
            }
        });
        // set up the final webRtc player controller methods from within our application so a connection can be activated
        this.sendDescriptorController = new _UeInstanceMessage_SendDescriptorController__WEBPACK_IMPORTED_MODULE_12__.SendDescriptorController(this.dataChannelSender, this.streamMessageController);
        this.sendMessageController = new _UeInstanceMessage_SendMessageController__WEBPACK_IMPORTED_MODULE_13__.SendMessageController(this.dataChannelSender, this.streamMessageController);
        this.toStreamerMessagesController = new _UeInstanceMessage_ToStreamerMessagesController__WEBPACK_IMPORTED_MODULE_14__.ToStreamerMessagesController(this.sendMessageController);
        this.registerMessageHandlers();
        this.streamMessageController.populateDefaultProtocol();
        this.inputClassesFactory = new _Inputs_InputClassesFactory__WEBPACK_IMPORTED_MODULE_15__.InputClassesFactory(this.streamMessageController, this.videoPlayer, this.coordinateConverter);
        this.isUsingSFU = false;
        this.isQualityController = false;
        this.preferredCodec = '';
        this.shouldReconnect = true;
        this.isReconnecting = false;
        this.reconnectAttempt = 0;
        this.config._addOnOptionSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, (streamerid) => {
            if (streamerid === "") {
                return;
            }
            // close the current peer connection and create a new one
            this.peerConnectionController.peerConnection.close();
            this.peerConnectionController.createPeerConnection(this.peerConfig, this.preferredCodec);
            this.subscribedStream = streamerid;
            this.webSocketController.sendSubscribe(streamerid);
        });
        this.setVideoEncoderAvgQP(-1);
        this.signallingUrlBuilder = () => {
            let signallingServerUrl = this.config.getTextSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.TextParameters.SignallingServerUrl);
            // If we are connecting to the SFU add a special url parameter to the url
            if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer)) {
                signallingServerUrl += '?' + _Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer + '=true';
            }
            // This code is no longer needed, but is a good example for how subsequent config flags can be appended
            // if (this.config.isFlagEnabled(Flags.BrowserSendOffer)) {
            //     signallingServerUrl += (signallingServerUrl.includes('?') ? '&' : '?') + Flags.BrowserSendOffer + '=true';
            // }
            return signallingServerUrl;
        };
    }
    /**
     * Make a request to UnquantizedAndDenormalizeUnsigned coordinates
     * @param x x axis coordinate
     * @param y y axis coordinate
     */
    requestUnquantizedAndDenormalizeUnsigned(x, y) {
        return this.coordinateConverter.unquantizeAndDenormalizeUnsigned(x, y);
    }
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    handleOnMessage(event) {
        const message = new Uint8Array(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Message incoming:' + message, 6);
        //try {
        const messageType = this.streamMessageController.fromStreamerMessages.getFromValue(message[0]);
        this.streamMessageController.fromStreamerHandlers.get(messageType)(event.data);
        //} catch (e) {
        //Logger.Error(Logger.GetStackTrace(), `Custom data channel message with message type that is unknown to the Pixel Streaming protocol. Does your PixelStreamingProtocol need updating? The message type was: ${message[0]}`);
        //}
    }
    /**
     * Register message all handlers
     */
    registerMessageHandlers() {
        // From Streamer
        // Message events from the streamer have a data type of ArrayBuffer as we force this type in the DatachannelController
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'QualityControlOwnership', (data) => this.onQualityControlOwnership(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Response', (data) => this.responseController.onResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Command', (data) => {
            this.onCommand(data);
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FreezeFrame', (data) => this.onFreezeFrameMessage(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'UnfreezeFrame', () => this.invalidateFreezeFrameAndEnableVideo());
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'VideoEncoderAvgQP', (data) => this.handleVideoEncoderAvgQP(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'LatencyTest', (data) => this.handleLatencyTestResult(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'InitialSettings', (data) => this.handleInitialSettings(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileExtension', (data) => this.onFileExtension(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileMimeType', (data) => this.onFileMimeType(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileContents', (data) => this.onFileContents(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'TestEcho', () => {
            /* Do nothing */
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'InputControlOwnership', (data) => this.onInputControlOwnership(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'GamepadResponse', (data) => this.onGamepadResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Protocol', (data) => this.onProtocolMessage(data));
        // To Streamer
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'IFrameRequest', () => this.sendMessageController.sendMessageToStreamer('IFrameRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'RequestQualityControl', () => this.sendMessageController.sendMessageToStreamer('RequestQualityControl'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'FpsRequest', () => this.sendMessageController.sendMessageToStreamer('FpsRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'AverageBitrateRequest', () => this.sendMessageController.sendMessageToStreamer('AverageBitrateRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'StartStreaming', () => this.sendMessageController.sendMessageToStreamer('StartStreaming'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'StopStreaming', () => this.sendMessageController.sendMessageToStreamer('StopStreaming'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'LatencyTest', () => this.sendMessageController.sendMessageToStreamer('LatencyTest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'RequestInitialSettings', () => this.sendMessageController.sendMessageToStreamer('RequestInitialSettings'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TestEcho', () => {
            /* Do nothing */
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'UIInteraction', (data) => this.sendDescriptorController.emitUIInteraction(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'Command', (data) => this.sendDescriptorController.emitCommand(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyDown', (data) => this.sendMessageController.sendMessageToStreamer('KeyDown', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyUp', (data) => this.sendMessageController.sendMessageToStreamer('KeyUp', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyPress', (data) => this.sendMessageController.sendMessageToStreamer('KeyPress', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseEnter', (data) => this.sendMessageController.sendMessageToStreamer('MouseEnter', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseLeave', (data) => this.sendMessageController.sendMessageToStreamer('MouseLeave', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseDown', (data) => this.sendMessageController.sendMessageToStreamer('MouseDown', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseUp', (data) => this.sendMessageController.sendMessageToStreamer('MouseUp', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseMove', (data) => this.sendMessageController.sendMessageToStreamer('MouseMove', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseWheel', (data) => this.sendMessageController.sendMessageToStreamer('MouseWheel', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseDouble', (data) => this.sendMessageController.sendMessageToStreamer('MouseDouble', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchStart', (data) => this.sendMessageController.sendMessageToStreamer('TouchStart', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchEnd', (data) => this.sendMessageController.sendMessageToStreamer('TouchEnd', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchMove', (data) => this.sendMessageController.sendMessageToStreamer('TouchMove', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadConnected', () => this.sendMessageController.sendMessageToStreamer('GamepadConnected'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadButtonPressed', (data) => this.sendMessageController.sendMessageToStreamer('GamepadButtonPressed', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadButtonReleased', (data) => this.sendMessageController.sendMessageToStreamer('GamepadButtonReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadAnalog', (data) => this.sendMessageController.sendMessageToStreamer('GamepadAnalog', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadDisconnected', (data) => this.sendMessageController.sendMessageToStreamer('GamepadDisconnected', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRHMDTransform', (data) => this.sendMessageController.sendMessageToStreamer('XRHMDTransform', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRControllerTransform', (data) => this.sendMessageController.sendMessageToStreamer('XRControllerTransform', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRSystem', (data) => this.sendMessageController.sendMessageToStreamer('XRSystem', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonTouched', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonTouched', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonPressed', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonPressed', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonReleased', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRAnalog', (data) => this.sendMessageController.sendMessageToStreamer('XRAnalog', data));
    }
    /**
     * Activate the logic associated with a command from UE
     * @param message
     */
    onCommand(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.Command', 6);
        const commandAsString = new TextDecoder('utf-16').decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Data Channel Command: ' + commandAsString, 6);
        const command = JSON.parse(commandAsString);
        if (command.command === 'onScreenKeyboard') {
            this.pixelStreaming._activateOnScreenKeyboard(command);
        }
    }
    /**
     * Handles a protocol message received from the streamer
     * @param message the message data from the streamer
     */
    onProtocolMessage(message) {
        try {
            const protocolString = new TextDecoder('utf-16').decode(message.slice(1));
            const protocolJSON = JSON.parse(protocolString);
            if (!Object.prototype.hasOwnProperty.call(protocolJSON, 'Direction')) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Malformed protocol received. Ensure the protocol message contains a direction');
            }
            const direction = protocolJSON.Direction;
            delete protocolJSON.Direction;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Received new ${direction == _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer
                ? 'FromStreamer'
                : 'ToStreamer'} protocol. Updating existing protocol...`);
            Object.keys(protocolJSON).forEach((messageType) => {
                const message = protocolJSON[messageType];
                switch (direction) {
                    case _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer:
                        // Check that the message contains all the relevant params
                        if (!Object.prototype.hasOwnProperty.call(message, 'id') ||
                            !Object.prototype.hasOwnProperty.call(message, 'byteLength')) {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `ToStreamer->${messageType} protocol definition was malformed as it didn't contain at least an id and a byteLength\n
                                           Definition was: ${JSON.stringify(message, null, 2)}`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (message.byteLength > 0 &&
                            !Object.prototype.hasOwnProperty.call(message, 'structure')) {
                            // If we specify a bytelength, will must have a corresponding structure
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `ToStreamer->${messageType} protocol definition was malformed as it specified a byteLength but no accompanying structure`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (this.streamMessageController.toStreamerHandlers.get(messageType)) {
                            // If we've registered a handler for this message type we can add it to our supported messages. ie registerMessageHandler(...)
                            this.streamMessageController.toStreamerMessages.add(messageType, message);
                        }
                        else {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `There was no registered handler for "${messageType}" - try adding one using registerMessageHandler(MessageDirection.ToStreamer, "${messageType}", myHandler)`);
                        }
                        break;
                    case _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer:
                        // Check that the message contains all the relevant params
                        if (!Object.prototype.hasOwnProperty.call(message, 'id')) {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `FromStreamer->${messageType} protocol definition was malformed as it didn't contain at least an id\n
                            Definition was: ${JSON.stringify(message, null, 2)}`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (this.streamMessageController.fromStreamerHandlers.get(messageType)) {
                            // If we've registered a handler for this message type. ie registerMessageHandler(...)
                            this.streamMessageController.fromStreamerMessages.add(messageType, message.id);
                        }
                        else {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `There was no registered handler for "${message}" - try adding one using registerMessageHandler(MessageDirection.FromStreamer, "${messageType}", myHandler)`);
                        }
                        break;
                    default:
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Unknown direction: ${direction}`);
                }
            });
            // Once the protocol has been received, we can send our control messages
            this.toStreamerMessagesController.SendRequestInitialSettings();
            this.toStreamerMessagesController.SendRequestQualityControl();
        }
        catch (e) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), e);
        }
    }
    /**
     * Handles an input control message when it is received from the streamer
     * @param message The input control message
     */
    onInputControlOwnership(message) {
        const view = new Uint8Array(message);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.InputControlOwnership', 6);
        const inputControlOwnership = new Boolean(view[1]).valueOf();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Received input controller message - will your input control the stream: ${inputControlOwnership}`);
        this.pixelStreaming._onInputControlOwnership(inputControlOwnership);
    }
    /**
     *
     * @param message
     */
    onGamepadResponse(message) {
        const responseString = new TextDecoder('utf-16').decode(message.slice(1));
        const responseJSON = JSON.parse(responseString);
        this.gamePadController.onGamepadResponseReceived(responseJSON.controllerId);
    }
    onAfkTriggered() {
        this.afkController.onAfkClick();
        // if the stream is paused play it, if we can
        if (this.videoPlayer.isPaused() && this.videoPlayer.hasVideoSource()) {
            this.playStream();
        }
    }
    /**
     * Set whether we should timeout when afk.
     * @param afkEnabled If true we timeout when idle for some given amount of time.
     */
    setAfkEnabled(afkEnabled) {
        if (afkEnabled) {
            this.onAfkTriggered();
        }
        else {
            this.afkController.stopAfkWarningTimer();
        }
    }
    /**
     * Restart the stream automatically without refreshing the page
     */
    restartStreamAutomatically() {
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'The Web Socket Controller does not exist so this will not work right now.');
            return;
        }
        // if a websocket object has not been created connect normally without closing
        if (!this.webSocketController.webSocket ||
            this.webSocketController.webSocket.readyState === WebSocket.CLOSED) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'A websocket connection has not been made yet so we will start the stream');
            this.pixelStreaming._onWebRtcAutoConnect();
            this.connectToSignallingServer();
        }
        else {
            // set the replay status so we get a text overlay over an action overlay
            this.pixelStreaming._showActionOrErrorOnDisconnect = false;
            // set the disconnect message
            this.setDisconnectMessageOverride('Restarting stream...');
            // close the connection
            this.closeSignalingServer();
            // wait for the connection to close and restart the connection
            const autoConnectTimeout = setTimeout(() => {
                this.pixelStreaming._onWebRtcAutoConnect();
                this.connectToSignallingServer();
                clearTimeout(autoConnectTimeout);
            }, 3000);
        }
    }
    /**
     * Loads a freeze frame if it is required otherwise shows the play overlay
     */
    loadFreezeFrameOrShowPlayOverlay() {
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.LoadFreezeFrameEvent({
            shouldShowPlayOverlay: this.shouldShowPlayOverlay,
            isValid: this.freezeFrameController.valid,
            jpegData: this.freezeFrameController.jpeg
        }));
        if (this.shouldShowPlayOverlay === true) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'showing play overlay');
            this.resizePlayerStyle();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'showing freeze frame');
            this.freezeFrameController.showFreezeFrame();
        }
        setTimeout(() => {
            this.videoPlayer.setVideoEnabled(false);
        }, this.freezeFrameController.freezeFrameDelay);
    }
    /**
     * Process the freeze frame and load it
     * @param message The freeze frame data in bytes
     */
    onFreezeFrameMessage(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.FreezeFrame', 6);
        const view = new Uint8Array(message);
        this.freezeFrameController.processFreezeFrameMessage(view, () => this.loadFreezeFrameOrShowPlayOverlay());
    }
    /**
     * Enable the video after hiding a freeze frame
     */
    invalidateFreezeFrameAndEnableVideo() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.FreezeFrame', 6);
        setTimeout(() => {
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.HideFreezeFrameEvent());
            this.freezeFrameController.hideFreezeFrame();
        }, this.freezeFrameController.freezeFrameDelay);
        if (this.videoPlayer.getVideoElement()) {
            this.videoPlayer.setVideoEnabled(true);
        }
    }
    /**
     * Prep datachannel data for processing file extension
     * @param data the file extension data
     */
    onFileExtension(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setExtensionFromBytes(view, this.file);
    }
    /**
     * Prep datachannel data for processing the file mime type
     * @param data the file mime type data
     */
    onFileMimeType(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setMimeTypeFromBytes(view, this.file);
    }
    /**
     * Prep datachannel data for processing the file contents
     * @param data the file contents data
     */
    onFileContents(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setContentsFromBytes(view, this.file);
    }
    /**
     * Plays the stream audio and video source and sets up other pieces while the stream starts
     */
    playStream() {
        if (!this.videoPlayer.getVideoElement()) {
            const message = 'Could not play video stream because the video player was not initialized correctly.';
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamErrorEvent({ message }));
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), message);
            // set the disconnect message
            this.setDisconnectMessageOverride('Stream not initialized correctly');
            // close the connection
            this.closeSignalingServer();
            return;
        }
        if (!this.videoPlayer.hasVideoSource()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Cannot play stream, the video element has no srcObject to play.');
            return;
        }
        this.setTouchInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.TouchInput));
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamEvent());
        if (this.streamController.audioElement.srcObject) {
            this.streamController.audioElement.muted =
                this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.StartVideoMuted);
            this.streamController.audioElement
                .play()
                .then(() => {
                this.playVideo();
            })
                .catch((onRejectedReason) => {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), onRejectedReason);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.');
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamRejectedEvent({
                    reason: onRejectedReason
                }));
            });
        }
        else {
            this.playVideo();
        }
        this.shouldShowPlayOverlay = false;
        this.freezeFrameController.showFreezeFrame();
    }
    /**
     * Plays the video stream
     */
    playVideo() {
        // handle play() with promise as it is an asynchronous call
        this.videoPlayer.play().catch((onRejectedReason) => {
            if (this.streamController.audioElement.srcObject) {
                this.streamController.audioElement.pause();
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), onRejectedReason);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.');
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamRejectedEvent({ reason: onRejectedReason }));
        });
    }
    /**
     * Enable the video to play automatically if enableAutoplay is true
     */
    autoPlayVideoOrSetUpPlayOverlay() {
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.AutoPlayVideo)) {
            // attempt to play the video
            this.playStream();
        }
        this.resizePlayerStyle();
    }
    /**
     * Connect to the Signaling server
     */
    connectToSignallingServer() {
        const signallingUrl = this.signallingUrlBuilder();
        this.webSocketController.connect(signallingUrl);
    }
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    startSession(peerConfig) {
        this.peerConfig = peerConfig;
        // check for forcing turn
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.ForceTURN)) {
            // check for a turn server
            const hasTurnServer = this.checkTurnServerAvailability(peerConfig);
            // close and error if turn is forced and there is no turn server
            if (!hasTurnServer) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'No turn server was found in the Peer Connection Options. TURN cannot be forced, closing connection. Please use STUN instead');
                this.setDisconnectMessageOverride('TURN cannot be forced, closing connection. Please use STUN instead.');
                this.closeSignalingServer();
                return;
            }
        }
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_18__.PeerConnectionController(this.peerConfig, this.config, this.preferredCodec);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = (event) => this.handleVideoStats(event);
        /* When the Peer Connection wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = (offer) => this.handleSendWebRTCOffer(offer);
        /* When the Peer Connection wants to send an answer have it handled */
        this.peerConnectionController.onSendWebRTCAnswer = (offer) => this.handleSendWebRTCAnswer(offer);
        /* When the Peer Connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = (peerConnectionIceEvent) => this.handleSendIceCandidate(peerConnectionIceEvent);
        /* When the Peer Connection has a data channel created for it by the browser, handle it */
        this.peerConnectionController.onDataChannel = (datachannelEvent) => this.handleDataChannel(datachannelEvent);
        // set up webRtc text overlays
        this.peerConnectionController.showTextOverlayConnecting = () => this.pixelStreaming._onWebRtcConnecting();
        this.peerConnectionController.showTextOverlaySetupFailure = () => this.pixelStreaming._onWebRtcFailed();
        let webRtcConnectedSent = false;
        this.peerConnectionController.onIceConnectionStateChange = () => {
            // Browsers emit "connected" when getting first connection and "completed" when finishing
            // candidate checking. However, sometimes browsers can skip "connected" and only emit "completed".
            // Therefore need to check both cases and emit onWebRtcConnected only once on the first hit.
            if (!webRtcConnectedSent &&
                ["connected", "completed"].includes(this.peerConnectionController.peerConnection.iceConnectionState)) {
                this.pixelStreaming._onWebRtcConnected();
                webRtcConnectedSent = true;
            }
        };
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = (trackEvent) => this.streamController.handleOnTrack(trackEvent);
        /* Start the Hand shake process by creating an Offer */
        const BrowserSendsOffer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer);
        if (BrowserSendsOffer) {
            // If browser is sending the offer, create an offer and send it to the streamer
            this.sendrecvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, 'cirrus', this.datachannelOptions);
            this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
            this.peerConnectionController.createOffer(this.sdpConstraints, this.config);
        }
    }
    /**
     * Checks the peer connection options for a turn server and returns true or false
     */
    checkTurnServerAvailability(options) {
        // if iceServers is empty return false this should not be the general use case but is here incase
        if (!options.iceServers) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'A turn sever was not found');
            return false;
        }
        // loop through the ice servers to check for a turn url
        for (const iceServer of options.iceServers) {
            for (const url of iceServer.urls) {
                if (url.includes('turn')) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `A turn sever was found at ${url}`);
                    return true;
                }
            }
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'A turn sever was not found');
        return false;
    }
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    handleOnConfigMessage(messageConfig) {
        this.resizePlayerStyle();
        // Tell the WebRtcController to start a session with the peer options sent from the signaling server
        this.startSession(messageConfig.peerConnectionOptions);
        // When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onWebRtcAnswer = (messageAnswer) => this.handleWebRtcAnswer(messageAnswer);
        this.webSocketController.onWebRtcOffer = (messageOffer) => this.handleWebRtcOffer(messageOffer);
        this.webSocketController.onWebRtcPeerDataChannels = (messageDataChannels) => this.handleWebRtcSFUPeerDatachannels(messageDataChannels);
        // When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onIceCandidate = (iceCandidate) => this.handleIceCandidate(iceCandidate);
    }
    /**
     * Handles when the signalling server gives us the list of streamer ids.
     */
    handleStreamerListMessage(messageStreamerList) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Got streamer list ${messageStreamerList.ids}`, 6);
        if (this.isReconnecting) {
            if (messageStreamerList.ids.includes(this.subscribedStream)) {
                // If we're reconnecting and the previously subscribed stream has come back, resubscribe to it
                this.isReconnecting = false;
                this.reconnectAttempt = 0;
                this.webSocketController.sendSubscribe(this.subscribedStream);
            }
            else if (this.reconnectAttempt < this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.MaxReconnectAttempts)) {
                // Our previous stream hasn't come back, wait 2 seconds and request an updated stream list
                this.reconnectAttempt++;
                setTimeout(() => {
                    this.webSocketController.requestStreamerList();
                }, 2000);
            }
            else {
                // We've exhausted our reconnect attempts, return to main screen
                this.reconnectAttempt = 0;
                this.isReconnecting = false;
                this.shouldReconnect = false;
                this.webSocketController.close();
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, "");
                this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, []);
            }
        }
        else {
            const settingOptions = [...messageStreamerList.ids]; // copy the original messageStreamerList.ids
            settingOptions.unshift(''); // add an empty option at the top
            this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, settingOptions);
            const urlParams = new URLSearchParams(window.location.search);
            let autoSelectedStreamerId = null;
            if (messageStreamerList.ids.length == 1) {
                // If there's only a single streamer, subscribe to it regardless of what is in the URL
                autoSelectedStreamerId = messageStreamerList.ids[0];
            }
            else if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.PreferSFU) &&
                messageStreamerList.ids.includes('SFU')) {
                // If the SFU toggle is on and there's an SFU connected, subscribe to it regardless of what is in the URL
                autoSelectedStreamerId = 'SFU';
            }
            else if (urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId) &&
                messageStreamerList.ids.includes(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId))) {
                // If there's a streamer ID in the URL and a streamer with this ID is connected, set it as the selected streamer
                autoSelectedStreamerId = urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId);
            }
            if (autoSelectedStreamerId !== null) {
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, autoSelectedStreamerId);
            }
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.StreamerListMessageEvent({
                messageStreamerList,
                autoSelectedStreamerId
            }));
        }
    }
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer SDP from the peer.
     */
    handleWebRtcAnswer(Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Got answer sdp ${Answer.sdp}`, 6);
        const sdpAnswer = {
            sdp: Answer.sdp,
            type: 'answer'
        };
        this.peerConnectionController.receiveAnswer(sdpAnswer);
        this.handlePostWebrtcNegotiation();
    }
    /**
     * Handle the RTC offer from a WebRTC peer (received through the signalling server).
     * @param Offer - Offer SDP from the peer.
     */
    handleWebRtcOffer(Offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Got offer sdp ${Offer.sdp}`, 6);
        this.isUsingSFU = Offer.sfu ? Offer.sfu : false;
        if (this.isUsingSFU) {
            // Disable negotiating with the sfu as the sfu only supports one codec at a time
            this.peerConnectionController.preferredCodec = '';
        }
        const sdpOffer = {
            sdp: Offer.sdp,
            type: 'offer'
        };
        this.peerConnectionController.receiveOffer(sdpOffer, this.config);
        this.handlePostWebrtcNegotiation();
    }
    /**
     * Handle when the SFU provides the peer with its data channels
     * @param DataChannels - The message from the SFU containing the data channels ids
     */
    handleWebRtcSFUPeerDatachannels(DataChannels) {
        const SendOptions = {
            ordered: true,
            negotiated: true,
            id: DataChannels.sendStreamId
        };
        const unidirectional = DataChannels.sendStreamId != DataChannels.recvStreamId;
        this.sendrecvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, unidirectional ? 'send-datachannel' : 'datachannel', SendOptions);
        if (unidirectional) {
            const RecvOptions = {
                ordered: true,
                negotiated: true,
                id: DataChannels.recvStreamId
            };
            this.recvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, 'recv-datachannel', RecvOptions);
            this.recvDataChannelController.handleOnOpen = () => this.webSocketController.sendSFURecvDataChannelReady();
            // If we're uni-directional, only the recv data channel should handle incoming messages
            this.recvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
        }
        else {
            // else our primary datachannel is send/recv so it can handle incoming messages
            this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
        }
    }
    handlePostWebrtcNegotiation() {
        // start the afk warning timer as PS is now running
        this.afkController.startAfkWarningTimer();
        // show the overlay that we have negotiated a connection
        this.pixelStreaming._onWebRtcSdp();
        if (this.statsTimerHandle && this.statsTimerHandle !== undefined) {
            window.clearInterval(this.statsTimerHandle);
        }
        this.statsTimerHandle = window.setInterval(() => this.getStats(), 1000);
        /*  */
        this.setMouseInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.MouseInput));
        this.setKeyboardInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.KeyboardInput));
        this.setGamePadInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.GamepadInput));
    }
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    handleIceCandidate(iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Web RTC Controller: onWebRtcIce', 6);
        const candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    }
    /**
     * Send the ice Candidate to the signaling server via websocket
     * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    handleSendIceCandidate(iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'OnIceCandidate', 6);
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    }
    /**
     * Send the ice Candidate to the signaling server via websocket
     * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    handleDataChannel(datachannelEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Data channel created for us by browser as we are a receiving peer.', 6);
        this.sendrecvDataChannelController.dataChannel =
            datachannelEvent.channel;
        // Data channel was created for us, so we just need to setup its callbacks and array type
        this.sendrecvDataChannelController.setupDataChannel();
        this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
    }
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    handleSendWebRTCOffer(offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Sending the offer to the Server', 6);
        this.webSocketController.sendWebRtcOffer(offer);
    }
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param answer - RTC Session Description
     */
    handleSendWebRTCAnswer(answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Sending the answer to the Server', 6);
        this.webSocketController.sendWebRtcAnswer(answer);
        if (this.isUsingSFU) {
            this.webSocketController.sendWebRtcDatachannelRequest();
        }
    }
    /**
     * Set the freeze frame overlay to the player div
     */
    setUpMouseAndFreezeFrame() {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.videoElementParentClientRect = this.videoPlayer
            .getVideoParentElement()
            .getBoundingClientRect();
        this.coordinateConverter.setupNormalizeAndQuantize();
        this.freezeFrameController.freezeFrame.resize();
    }
    /**
     * Close the Connection to the signaling server
     */
    closeSignalingServer() {
        var _a;
        // We explicitly called close, therefore we don't want to trigger auto reconnect
        this.shouldReconnect = false;
        (_a = this.webSocketController) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * Close the peer connection
     */
    closePeerConnection() {
        var _a;
        (_a = this.peerConnectionController) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * Close all connections
     */
    close() {
        this.closeSignalingServer();
        this.closePeerConnection();
    }
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    getStats() {
        this.peerConnectionController.generateStats();
    }
    /**
     * Send a Latency Test Request to the UE Instance
     */
    sendLatencyTest() {
        this.latencyStartTime = Date.now();
        this.sendDescriptorController.sendLatencyTest({
            StartTime: this.latencyStartTime
        });
    }
    /**
     * Send the MinQP encoder setting to the UE Instance.
     * @param minQP - The lower bound for QP when encoding
     * valid values are (1-51) where:
     * 1 = Best quality but highest bitrate.
     * 51 = Worst quality but lowest bitrate.
     * By default the minQP is 1 meaning the encoder is free
     * to aim for the best quality it can on the given network link.
     */
    sendEncoderMinQP(minQP) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `MinQP=${minQP}\n`, 6);
        if (minQP != null) {
            this.sendDescriptorController.emitCommand({
                'Encoder.MinQP': minQP
            });
        }
    }
    /**
     * Send the MaxQP encoder setting to the UE Instance.
     * @param maxQP - The upper bound for QP when encoding
     * valid values are (1-51) where:
     * 1 = Best quality but highest bitrate.
     * 51 = Worst quality but lowest bitrate.
     * By default the maxQP is 51 meaning the encoder is free
     * to drop quality as low as needed on the given network link.
     */
    sendEncoderMaxQP(maxQP) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `MaxQP=${maxQP}\n`, 6);
        if (maxQP != null) {
            this.sendDescriptorController.emitCommand({
                'Encoder.MaxQP': maxQP
            });
        }
    }
    /**
     * Send the { WebRTC.MinBitrate: SomeNumber }} command to UE to set
     * the minimum bitrate that we allow WebRTC to use
     * (note setting this too high in poor networks can be problematic).
     * @param minBitrate - The minimum bitrate we would like WebRTC to not fall below.
     */
    sendWebRTCMinBitrate(minBitrate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `WebRTC Min Bitrate=${minBitrate}`, 6);
        if (minBitrate != null) {
            this.sendDescriptorController.emitCommand({
                'WebRTC.MinBitrate': minBitrate
            });
        }
    }
    /**
     * Send the { WebRTC.MaxBitrate: SomeNumber }} command to UE to set
     * the minimum bitrate that we allow WebRTC to use
     * (note setting this too low could result in blocky video).
     * @param minBitrate - The minimum bitrate we would like WebRTC to not fall below.
     */
    sendWebRTCMaxBitrate(maxBitrate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `WebRTC Max Bitrate=${maxBitrate}`, 6);
        if (maxBitrate != null) {
            this.sendDescriptorController.emitCommand({
                'WebRTC.MaxBitrate': maxBitrate
            });
        }
    }
    /**
     * Send the { WebRTC.Fps: SomeNumber }} UE 5.0+
     * and { WebRTC.MaxFps } UE 4.27 command to set
     * the maximum fps we would like WebRTC to stream at.
     * @param fps - The maximum stream fps.
     */
    sendWebRTCFps(fps) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `WebRTC FPS=${fps}`, 6);
        if (fps != null) {
            this.sendDescriptorController.emitCommand({ 'WebRTC.Fps': fps });
            this.sendDescriptorController.emitCommand({ 'WebRTC.MaxFps': fps }); /* TODO: Remove when UE 4.27 unsupported. */
        }
    }
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    sendShowFps() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending show stat to UE   ----', 6);
        this.sendDescriptorController.emitCommand({ 'stat.fps': '' });
    }
    /**
     * Send an Iframe request to the streamer
     */
    sendIframeRequest() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending Request for an IFrame  ----', 6);
        this.streamMessageController.toStreamerHandlers.get('IFrameRequest')();
    }
    /**
     * Send a UIInteraction message
     */
    emitUIInteraction(descriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending custom UIInteraction message   ----', 6);
        this.sendDescriptorController.emitUIInteraction(descriptor);
    }
    /**
     * Send a Command message
     */
    emitCommand(descriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending custom Command message   ----', 6);
        this.sendDescriptorController.emitCommand(descriptor);
    }
    /**
     * Send a console command message
     */
    emitConsoleCommand(command) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending custom Command:ConsoleCommand message   ----', 6);
        this.sendDescriptorController.emitCommand({
            ConsoleCommand: command,
        });
    }
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    sendRequestQualityControlOwnership() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending Request to Control Quality  ----', 6);
        this.toStreamerMessagesController.SendRequestQualityControl();
    }
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param message - Latency Test Timings
     */
    handleLatencyTestResult(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.latencyTest', 6);
        const latencyAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_19__.LatencyTestResults();
        Object.assign(latencyTestResults, JSON.parse(latencyAsString));
        latencyTestResults.processFields();
        latencyTestResults.testStartTimeMs = this.latencyStartTime;
        latencyTestResults.browserReceiptTimeMs = Date.now();
        latencyTestResults.latencyExcludingDecode = ~~(latencyTestResults.browserReceiptTimeMs -
            latencyTestResults.testStartTimeMs);
        latencyTestResults.testDuration = ~~(latencyTestResults.TransmissionTimeMs -
            latencyTestResults.ReceiptTimeMs);
        latencyTestResults.networkLatency = ~~(latencyTestResults.latencyExcludingDecode -
            latencyTestResults.testDuration);
        if (latencyTestResults.frameDisplayDeltaTimeMs &&
            latencyTestResults.browserReceiptTimeMs) {
            latencyTestResults.endToEndLatency =
                ~~(latencyTestResults.frameDisplayDeltaTimeMs +
                    latencyTestResults.networkLatency,
                    +latencyTestResults.CaptureToSendMs);
        }
        this.pixelStreaming._onLatencyTestResult(latencyTestResults);
    }
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param message - Initial Encoder and Web RTC Settings
     */
    handleInitialSettings(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.InitialSettings', 6);
        const payloadAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const parsedInitialSettings = JSON.parse(payloadAsString);
        const initialSettings = new _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_20__.InitialSettings();
        if (parsedInitialSettings.Encoder) {
            initialSettings.EncoderSettings = parsedInitialSettings.Encoder;
        }
        if (parsedInitialSettings.WebRTC) {
            initialSettings.WebRTCSettings = parsedInitialSettings.WebRTC;
        }
        if (parsedInitialSettings.PixelStreaming) {
            initialSettings.PixelStreamingSettings =
                parsedInitialSettings.PixelStreaming;
        }
        if (parsedInitialSettings.ConfigOptions && parsedInitialSettings.ConfigOptions.DefaultToHover !== undefined) {
            this.config.setFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.HoveringMouseMode, !!parsedInitialSettings.ConfigOptions.DefaultToHover);
        }
        initialSettings.ueCompatible();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), payloadAsString, 6);
        this.pixelStreaming._onInitialSettings(initialSettings);
    }
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param message - Encoders Quantization Parameter
     */
    handleVideoEncoderAvgQP(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.VideoEncoderAvgQP', 6);
        const AvgQP = Number(new TextDecoder('utf-16').decode(message.slice(1)));
        this.setVideoEncoderAvgQP(AvgQP);
    }
    /**
     * Handles when the video element has been loaded with a srcObject
     */
    handleVideoInitialized() {
        this.pixelStreaming._onVideoInitialized();
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.resizePlayerStyle();
        this.videoPlayer.updateVideoStreamSize();
    }
    /**
     * Flag set if the user has Quality Ownership
     * @param message - Does the current client have Quality Ownership
     */
    onQualityControlOwnership(message) {
        const view = new Uint8Array(message);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.QualityControlOwnership', 6);
        this.isQualityController = new Boolean(view[1]).valueOf();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Received quality controller message, will control quality: ${this.isQualityController}`);
        this.pixelStreaming._onQualityControlOwnership(this.isQualityController);
    }
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    handleVideoStats(stats) {
        this.pixelStreaming._onVideoStats(stats);
    }
    /**
     * To Resize the Video Player element
     */
    resizePlayerStyle() {
        this.videoPlayer.resizePlayerStyle();
    }
    /**
     * Get the overridden disconnect message
     */
    getDisconnectMessageOverride() {
        return this.disconnectMessageOverride;
    }
    /**
     * Set the override for the disconnect message
     */
    setDisconnectMessageOverride(message) {
        this.disconnectMessageOverride = message;
    }
    setPreferredCodec(codec) {
        this.preferredCodec = codec;
        if (this.peerConnectionController) {
            this.peerConnectionController.preferredCodec = codec;
            this.peerConnectionController.updateCodecSelection = false;
        }
    }
    setVideoEncoderAvgQP(avgQP) {
        this.videoAvgQp = avgQP;
        this.pixelStreaming._onVideoEncoderAvgQP(this.videoAvgQp);
    }
    /**
     * enables/disables keyboard event listeners
     */
    setKeyboardInputEnabled(isEnabled) {
        var _a;
        (_a = this.keyboardController) === null || _a === void 0 ? void 0 : _a.unregisterKeyBoardEvents();
        if (isEnabled) {
            this.keyboardController = this.inputClassesFactory.registerKeyBoard(this.config);
        }
    }
    /**
     * enables/disables mouse event listeners
     */
    setMouseInputEnabled(isEnabled) {
        var _a;
        (_a = this.mouseController) === null || _a === void 0 ? void 0 : _a.unregisterMouseEvents();
        if (isEnabled) {
            const mouseMode = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.HoveringMouseMode)
                ? _Config_Config__WEBPACK_IMPORTED_MODULE_11__.ControlSchemeType.HoveringMouse
                : _Config_Config__WEBPACK_IMPORTED_MODULE_11__.ControlSchemeType.LockedMouse;
            this.mouseController =
                this.inputClassesFactory.registerMouse(mouseMode);
        }
    }
    /**
     * enables/disables touch event listeners
     */
    setTouchInputEnabled(isEnabled) {
        var _a;
        (_a = this.touchController) === null || _a === void 0 ? void 0 : _a.unregisterTouchEvents();
        if (isEnabled) {
            this.touchController = this.inputClassesFactory.registerTouch(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.FakeMouseWithTouches), this.videoElementParentClientRect);
        }
    }
    /**
     * enables/disables game pad event listeners
     */
    setGamePadInputEnabled(isEnabled) {
        var _a;
        (_a = this.gamePadController) === null || _a === void 0 ? void 0 : _a.unregisterGamePadEvents();
        if (isEnabled) {
            this.gamePadController = this.inputClassesFactory.registerGamePad();
            this.gamePadController.onGamepadConnected = () => {
                this.streamMessageController.toStreamerHandlers.get('GamepadConnected')();
            };
            this.gamePadController.onGamepadDisconnected = (controllerIdx) => {
                this.streamMessageController.toStreamerHandlers.get('GamepadDisconnected')([controllerIdx]);
            };
        }
    }
    registerDataChannelEventEmitters(dataChannel) {
        dataChannel.onOpen = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.DataChannelOpenEvent({ label, event }));
        dataChannel.onClose = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.DataChannelCloseEvent({ label, event }));
        dataChannel.onError = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.DataChannelErrorEvent({ label, event }));
    }
}


/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_365759__) => {

__nested_webpack_require_365759__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_365759__.d(__webpack_exports__, {
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageOffer": () => (/* binding */ MessageOffer),
/* harmony export */   "MessageOnScreenKeyboard": () => (/* binding */ MessageOnScreenKeyboard),
/* harmony export */   "MessagePeerDataChannels": () => (/* binding */ MessagePeerDataChannels),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes),
/* harmony export */   "MessageStreamerList": () => (/* binding */ MessageStreamerList)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["STREAMER_LIST"] = "streamerList";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["OFFER"] = "offer";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageRecvTypes["PEER_DATA_CHANNELS"] = "peerDataChannels";
    MessageRecvTypes["PING"] = "ping";
    MessageRecvTypes["WARNING"] = "warning";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Concrete Received Message wrapper
 */
class MessageRecv {
}
/**
 * Authentication Required Message wrapper
 */
class MessageAuthRequired extends MessageRecv {
}
/**
 * Config Message Wrapper
 */
class MessageConfig extends MessageRecv {
}
/**
 * Streamer List Message Wrapper
 */
class MessageStreamerList extends MessageRecv {
}
/**
 * Player Count Message wrapper
 */
class MessagePlayerCount extends MessageRecv {
}
/**
 * Web RTC offer Answer Message wrapper
 */
class MessageAnswer extends MessageRecv {
}
/**
 * WebRTC sdp offer Message wrapper.
 */
class MessageOffer extends MessageRecv {
}
/**
 * Ice Candidate Message wrapper
 */
class MessageIceCandidate extends MessageRecv {
}
/**
 * Peer Data Channels Message wrapper
 */
class MessagePeerDataChannels extends MessageRecv {
}
class MessageOnScreenKeyboard {
}


/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_368639__) => {

__nested_webpack_require_368639__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_368639__.d(__webpack_exports__, {
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageListStreamers": () => (/* binding */ MessageListStreamers),
/* harmony export */   "MessagePong": () => (/* binding */ MessagePong),
/* harmony export */   "MessageSFURecvDataChannelReady": () => (/* binding */ MessageSFURecvDataChannelReady),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageSubscribe": () => (/* binding */ MessageSubscribe),
/* harmony export */   "MessageUnsubscribe": () => (/* binding */ MessageUnsubscribe),
/* harmony export */   "MessageWebRTCAnswer": () => (/* binding */ MessageWebRTCAnswer),
/* harmony export */   "MessageWebRTCDatachannelRequest": () => (/* binding */ MessageWebRTCDatachannelRequest),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_368639__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["LIST_STREAMERS"] = "listStreamers";
    MessageSendTypes["SUBSCRIBE"] = "subscribe";
    MessageSendTypes["UNSUBSCRIBE"] = "unsubscribe";
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["OFFER"] = "offer";
    MessageSendTypes["ANSWER"] = "answer";
    MessageSendTypes["DATACHANNELREQUEST"] = "dataChannelRequest";
    MessageSendTypes["SFURECVDATACHANNELREADY"] = "peerDataChannelsReady";
    MessageSendTypes["PONG"] = "pong";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
class MessageSend {
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    payload() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending => \n' + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    }
}
class MessageListStreamers extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.LIST_STREAMERS;
    }
}
class MessageSubscribe extends MessageSend {
    constructor(streamerid) {
        super();
        this.type = MessageSendTypes.SUBSCRIBE;
        this.streamerId = streamerid;
    }
}
class MessageUnsubscribe extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.UNSUBSCRIBE;
    }
}
/**
 * Instance Request Message Wrapper
 */
class MessagePong extends MessageSend {
    constructor(time) {
        super();
        this.type = MessageSendTypes.PONG;
        this.time = time;
    }
}
/**
 *  Web RTC Offer message wrapper
 */
class MessageWebRTCOffer extends MessageSend {
    /**
     * @param offer - Generated Web RTC Offer
     */
    constructor(offer) {
        super();
        this.type = MessageSendTypes.OFFER;
        if (offer) {
            this.type = offer.type;
            this.sdp = offer.sdp;
        }
    }
}
/**
 *  Web RTC Answer message wrapper
 */
class MessageWebRTCAnswer extends MessageSend {
    /**
     * @param answer - Generated Web RTC Offer
     */
    constructor(answer) {
        super();
        this.type = MessageSendTypes.ANSWER;
        if (answer) {
            this.type = answer.type;
            this.sdp = answer.sdp;
        }
    }
}
/**
 *  Web RTC Data channel request message wrapper
 */
class MessageWebRTCDatachannelRequest extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.DATACHANNELREQUEST;
    }
}
/**
 *  Web RTC SFU Data channel ready message wrapper
 */
class MessageSFURecvDataChannelReady extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.SFURECVDATACHANNELREADY;
    }
}
/**
 * RTC Ice Candidate Wrapper
 */
class MessageIceCandidate {
    /**
     * @param candidate - RTC Ice Candidate
     */
    constructor(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    payload() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending => \n' + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    }
}


/***/ }),

/***/ "./src/WebSockets/SignallingProtocol.ts":
/*!**********************************************!*\
  !*** ./src/WebSockets/SignallingProtocol.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_373907__) => {

__nested_webpack_require_373907__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_373907__.d(__webpack_exports__, {
/* harmony export */   "SignallingProtocol": () => (/* binding */ SignallingProtocol)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_373907__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_373907__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_373907__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



/**
 * Signalling protocol for handling messages from the signalling server.
 */
class SignallingProtocol {
    constructor() {
        this.FromUEMessageHandlers = new Map();
    }
    addMessageHandler(messageId, messageHandler) {
        this.FromUEMessageHandlers.set(messageId, messageHandler);
    }
    handleMessage(messageId, messageData) {
        if (this.FromUEMessageHandlers.has(messageId)) {
            this.FromUEMessageHandlers.get(messageId)(messageData);
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message type of ${messageId} does not have a message handler registered on the frontend - ignoring message.`);
        }
    }
    /**
     * Setup any default signalling message handling, these can be overridden or additional handlers added with `addMessageHandler`.
     * @param websocketController The controller to setup these handlers on.
     */
    static setupDefaultHandlers(websocketController) {
        // PING
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING, (pingPayload) => {
            // send our pong payload back to the signalling server
            const pongPayload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessagePong(new Date().getTime()).payload();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING + ': ' + pingPayload, 6);
            websocketController.webSocket.send(pongPayload);
        });
        // CONFIG
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG, (configPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG, 6);
            const config = JSON.parse(configPayload);
            websocketController.onConfig(config);
        });
        // STREAMER_LIST
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_LIST, (listPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_LIST, 6);
            const streamerList = JSON.parse(listPayload);
            websocketController.onStreamerList(streamerList);
        });
        // PLAYER_COUNT
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT, (playerCountPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT, 6);
            const playerCount = JSON.parse(playerCountPayload);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Player Count: ' + playerCount.count, 6);
        });
        // ANSWER
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER, (answerPayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER, 6);
            const answer = JSON.parse(answerPayload);
            websocketController.onWebRtcAnswer(answer);
        });
        // OFFER
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.OFFER, (offerPayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.OFFER, 6);
            const offer = JSON.parse(offerPayload);
            websocketController.onWebRtcOffer(offer);
        });
        // ICE CANDIDATE
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE, (iceCandidatePayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE, 6);
            const iceCandidate = JSON.parse(iceCandidatePayload);
            websocketController.onIceCandidate(iceCandidate.candidate);
        });
        // WARNING
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.WARNING, (warningPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Warning received: ${warningPayload}`);
        });
        // PEER DATA CHANNELS
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PEER_DATA_CHANNELS, (peerDataChannelsPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PEER_DATA_CHANNELS, 6);
            const peerDataChannels = JSON.parse(peerDataChannelsPayload);
            websocketController.onWebRtcPeerDataChannels(peerDataChannels);
        });
    }
}


/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_381138__) => {

__nested_webpack_require_381138__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_381138__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_381138__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_381138__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");
/* harmony import */ var _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_381138__(/*! ./SignallingProtocol */ "./src/WebSockets/SignallingProtocol.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



/**
 * The controller for the WebSocket and all associated methods
 */
class WebSocketController {
    constructor() {
        this.WS_OPEN_STATE = 1;
        this.onOpen = new EventTarget();
        this.onClose = new EventTarget();
        this.signallingProtocol = new _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__.SignallingProtocol();
        _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__.SignallingProtocol.setupDefaultHandlers(this);
    }
    /**
     * Connect to the signaling server
     * @param connectionURL - The Address of the signaling server
     * @returns - If there is a connection
     */
    connect(connectionURL) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), connectionURL, 6);
        try {
            this.webSocket = new WebSocket(connectionURL);
            this.webSocket.onopen = (event) => this.handleOnOpen(event);
            this.webSocket.onerror = () => this.handleOnError();
            this.webSocket.onclose = (event) => this.handleOnClose(event);
            this.webSocket.onmessage = (event) => this.handleOnMessage(event);
            this.webSocket.onmessagebinary = (event) => this.handleOnMessageBinary(event);
            return true;
        }
        catch (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(error, error);
            return false;
        }
    }
    /**
     * Handles what happens when a message is received in binary form
     * @param event - Message Received
     */
    handleOnMessageBinary(event) {
        // if the event is empty return
        if (!event || !event.data) {
            return;
        }
        // handle the binary and then handle the message
        event.data
            .text()
            .then((messageString) => {
            // build a new message
            const constructedMessage = new MessageEvent('messageFromBinary', {
                data: messageString
            });
            // send the new stringified event back into `onmessage`
            this.handleOnMessage(constructedMessage);
        })
            .catch((error) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Failed to parse binary blob from websocket, reason: ${error}`);
        });
    }
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    handleOnMessage(event) {
        // Check if websocket message is binary, if so, stringify it.
        if (event.data && event.data instanceof Blob) {
            this.handleOnMessageBinary(event);
            return;
        }
        const message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'received => \n' +
            JSON.stringify(JSON.parse(event.data), undefined, 4), 6);
        // Send to our signalling protocol to handle the incoming message
        this.signallingProtocol.handleMessage(message.type, event.data);
    }
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    handleOnOpen(event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Connected to the signalling server via WebSocket', 6);
        this.onOpen.dispatchEvent(new Event('open'));
    }
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    handleOnError() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'WebSocket error');
    }
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    handleOnClose(event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Disconnected to the signalling server via WebSocket: ' +
            JSON.stringify(event.code) +
            ' - ' +
            event.reason);
        this.onClose.dispatchEvent(new Event('close'));
    }
    requestStreamerList() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageListStreamers();
        this.webSocket.send(payload.payload());
    }
    sendSubscribe(streamerid) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageSubscribe(streamerid);
        this.webSocket.send(payload.payload());
    }
    sendUnsubscribe() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageUnsubscribe();
        this.webSocket.send(payload.payload());
    }
    sendWebRtcOffer(offer) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    }
    sendWebRtcAnswer(answer) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCAnswer(answer);
        this.webSocket.send(payload.payload());
    }
    sendWebRtcDatachannelRequest() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCDatachannelRequest();
        this.webSocket.send(payload.payload());
    }
    sendSFURecvDataChannelReady() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageSFURecvDataChannelReady();
        this.webSocket.send(payload.payload());
    }
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    sendIceCandidate(candidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Sending Ice Candidate');
        if (this.webSocket &&
            this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            const IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    }
    /**
     * Closes the Websocket connection
     */
    close() {
        var _a;
        (_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.close();
    }
    /** Event used for Displaying websocket closed messages */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebSocketOncloseOverlayMessage(event) { }
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onConfig(messageConfig) { }
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onStreamerList(messageStreamerList) { }
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onIceCandidate(iceCandidate) { }
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcAnswer(messageAnswer) { }
    /**
     * Event is fired when the websocket receives the offer for the RTC peer Connection
     * @param messageOffer - The sdp offer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcOffer(messageOffer) { }
    /**
     * Event is fired when the websocket receives the data channels for the RTC peer Connection from the SFU
     * @param messageDataChannels - The data channels details
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcPeerDataChannels(messageDataChannels) { }
}


/***/ }),

/***/ "./src/WebXR/WebXRController.ts":
/*!**************************************!*\
  !*** ./src/WebXR/WebXRController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_390943__) => {

__nested_webpack_require_390943__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_390943__.d(__webpack_exports__, {
/* harmony export */   "WebXRController": () => (/* binding */ WebXRController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_390943__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_WebGLUtils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_390943__(/*! ../Util/WebGLUtils */ "./src/Util/WebGLUtils.ts");
/* harmony import */ var _Inputs_XRGamepadController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_390943__(/*! ../Inputs/XRGamepadController */ "./src/Inputs/XRGamepadController.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_390943__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
/* harmony import */ var _pixelstreamingfrontend__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_390943__(/*! ../pixelstreamingfrontend */ "./src/Config/Config.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





class WebXRController {
    constructor(webRtcPlayerController) {
        this.xrSession = null;
        this.webRtcController = webRtcPlayerController;
        this.xrControllers = [];
        this.xrGamepadController = new _Inputs_XRGamepadController__WEBPACK_IMPORTED_MODULE_0__.XRGamepadController(this.webRtcController.streamMessageController);
        this.onSessionEnded = new EventTarget();
        this.onSessionStarted = new EventTarget();
        this.onFrame = new EventTarget();
    }
    xrClicked() {
        if (!this.xrSession) {
            navigator.xr
                .requestSession('immersive-vr')
                .then((session) => {
                this.onXrSessionStarted(session);
            });
        }
        else {
            this.xrSession.end();
        }
    }
    onXrSessionEnded() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'XR Session ended');
        this.xrSession = null;
        this.onSessionEnded.dispatchEvent(new Event('xrSessionEnded'));
    }
    onXrSessionStarted(session) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'XR Session started');
        this.xrSession = session;
        this.xrSession.addEventListener('end', () => {
            this.onXrSessionEnded();
        });
        const canvas = document.createElement('canvas');
        this.gl = canvas.getContext('webgl2', {
            xrCompatible: true
        });
        this.xrSession.updateRenderState({
            baseLayer: new XRWebGLLayer(this.xrSession, this.gl)
        });
        // setup vertex shader
        const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);
        this.gl.shaderSource(vertexShader, _Util_WebGLUtils__WEBPACK_IMPORTED_MODULE_2__.WebGLUtils.vertexShader());
        this.gl.compileShader(vertexShader);
        // setup fragment shader
        const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);
        this.gl.shaderSource(fragmentShader, _Util_WebGLUtils__WEBPACK_IMPORTED_MODULE_2__.WebGLUtils.fragmentShader());
        this.gl.compileShader(fragmentShader);
        // setup GLSL program
        const shaderProgram = this.gl.createProgram();
        this.gl.attachShader(shaderProgram, vertexShader);
        this.gl.attachShader(shaderProgram, fragmentShader);
        this.gl.linkProgram(shaderProgram);
        this.gl.useProgram(shaderProgram);
        // look up where vertex data needs to go
        this.positionLocation = this.gl.getAttribLocation(shaderProgram, 'a_position');
        this.texcoordLocation = this.gl.getAttribLocation(shaderProgram, 'a_texCoord');
        // Create a buffer to put three 2d clip space points in
        this.positionBuffer = this.gl.createBuffer();
        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);
        // Turn on the position attribute
        this.gl.enableVertexAttribArray(this.positionLocation);
        // Create a texture.
        const texture = this.gl.createTexture();
        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);
        // Set the parameters so we can render any size image.
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
        this.texcoordBuffer = this.gl.createBuffer();
        // lookup uniforms
        this.resolutionLocation = this.gl.getUniformLocation(shaderProgram, 'u_resolution');
        this.offsetLocation = this.gl.getUniformLocation(shaderProgram, 'u_offset');
        session.requestReferenceSpace('local').then((refSpace) => {
            this.xrRefSpace = refSpace;
            this.xrSession.requestAnimationFrame((time, frame) => this.onXrFrame(time, frame));
        });
        this.onSessionStarted.dispatchEvent(new Event('xrSessionStarted'));
    }
    onXrFrame(time, frame) {
        const pose = frame.getViewerPose(this.xrRefSpace);
        if (pose) {
            const matrix = pose.transform.matrix;
            const mat = [];
            for (let i = 0; i < 16; i++) {
                mat[i] = new Float32Array([matrix[i]])[0];
            }
            // prettier-ignore
            this.webRtcController.streamMessageController.toStreamerHandlers.get('XRHMDTransform')([
                mat[0], mat[4], mat[8], mat[12],
                mat[1], mat[5], mat[9], mat[13],
                mat[2], mat[6], mat[10], mat[14],
                mat[3], mat[7], mat[11], mat[15]
            ]);
            const glLayer = this.xrSession.renderState.baseLayer;
            // If we do have a valid pose, bind the WebGL layer's framebuffer,
            // which is where any content to be displayed on the XRDevice must be
            // rendered.
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, glLayer.framebuffer);
            // Upload the image into the texture. WebGL knows how to extract the current frame from the video element
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.webRtcController.videoPlayer.getVideoElement());
            this.render(this.webRtcController.videoPlayer.getVideoElement());
        }
        if (this.webRtcController.config.isFlagEnabled(_pixelstreamingfrontend__WEBPACK_IMPORTED_MODULE_3__.Flags.XRControllerInput)) {
            this.xrSession.inputSources.forEach((source, index, array) => {
                this.xrGamepadController.updateStatus(source, frame, this.xrRefSpace);
            }, this);
        }
        this.xrSession.requestAnimationFrame((time, frame) => this.onXrFrame(time, frame));
        this.onFrame.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_4__.XrFrameEvent({
            time,
            frame
        }));
    }
    render(videoElement) {
        if (!this.gl) {
            return;
        }
        const glLayer = this.xrSession.renderState.baseLayer;
        this.gl.viewport(0, 0, glLayer.framebufferWidth, glLayer.framebufferHeight);
        this.gl.uniform4f(this.offsetLocation, 1.0, 1.0, 0.0, 0.0);
        // Set rectangle
        // prettier-ignore
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
            0, 0,
            videoElement.videoWidth, 0,
            0, videoElement.videoHeight,
            0, videoElement.videoHeight,
            videoElement.videoWidth, 0,
            videoElement.videoWidth, videoElement.videoHeight
        ]), this.gl.STATIC_DRAW);
        // Provide texture coordinates for the rectangle
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
            0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0
        ]), this.gl.STATIC_DRAW);
        let size; // components per iteration
        let type; // the data type
        let normalize; // normalize the data
        let stride; // 0 = move forward size * sizeof(type) each iteration to get the next position
        let offset; // start position of the buffer
        // Bind the position buffer.
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);
        // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)
        size = 2; // 2 components per iteration
        type = this.gl.FLOAT; // the data is 32bit floats
        normalize = false; // don't normalize the data
        stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position
        offset = 0; // start at the beginning of the buffer
        this.gl.vertexAttribPointer(this.positionLocation, size, type, normalize, stride, offset);
        // Turn on the texcoord attribute
        this.gl.enableVertexAttribArray(this.texcoordLocation);
        // bind the texcoord buffer.
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);
        // Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)
        size = 2; // 2 components per iteration
        type = this.gl.FLOAT; // the data is 32bit floats
        normalize = false; // don't normalize the data
        stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position
        offset = 0; // start at the beginning of the buffer
        this.gl.vertexAttribPointer(this.texcoordLocation, size, type, normalize, stride, offset);
        // set the resolution
        this.gl.uniform2f(this.resolutionLocation, videoElement.videoWidth, videoElement.videoHeight);
        // draw the rectangle.
        const primitiveType = this.gl.TRIANGLES;
        const count = 6;
        offset = 0;
        this.gl.drawArrays(primitiveType, offset, count);
    }
    static isSessionSupported(mode) {
        if (navigator.xr) {
            return navigator.xr.isSessionSupported(mode);
        }
        else {
            return new Promise(() => {
                return false;
            });
        }
    }
}


/***/ }),

/***/ "sdp":
/*!**********************!*\
  !*** external "sdp" ***!
  \**********************/
/***/ ((module) => {

var x = y => { var x = {}; __nested_webpack_require_402084__.d(x, y); return x; }
var y = x => () => x
module.exports = sdp__WEBPACK_IMPORTED_MODULE_0__;

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nested_webpack_require_402084__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_402084__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nested_webpack_require_402084__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nested_webpack_require_402084__.o(definition, key) && !__nested_webpack_require_402084__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nested_webpack_require_402084__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_402084__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************************!*\
  !*** ./src/pixelstreamingfrontend.ts ***!
  \***************************************/
__nested_webpack_require_402084__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_402084__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _AFK_AFKController__WEBPACK_IMPORTED_MODULE_9__.AFKController),
/* harmony export */   "AfkTimedOutEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkWarningUpdateEvent),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_12__.AggregatedStats),
/* harmony export */   "CandidatePairStats": () => (/* reexport safe */ _PeerConnectionController_CandidatePairStats__WEBPACK_IMPORTED_MODULE_19__.CandidatePairStats),
/* harmony export */   "CandidateStat": () => (/* reexport safe */ _PeerConnectionController_CandidateStat__WEBPACK_IMPORTED_MODULE_20__.CandidateStat),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.ControlSchemeType),
/* harmony export */   "DataChannelCloseEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.DataChannelErrorEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.DataChannelOpenEvent),
/* harmony export */   "DataChannelStats": () => (/* reexport safe */ _PeerConnectionController_DataChannelStats__WEBPACK_IMPORTED_MODULE_21__.DataChannelStats),
/* harmony export */   "EncoderSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.EncoderSettings),
/* harmony export */   "EventEmitter": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.EventEmitter),
/* harmony export */   "Flags": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Flags),
/* harmony export */   "HideFreezeFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.HideFreezeFrameEvent),
/* harmony export */   "InboundAudioStats": () => (/* reexport safe */ _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_22__.InboundAudioStats),
/* harmony export */   "InboundVideoStats": () => (/* reexport safe */ _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_22__.InboundVideoStats),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.InitialSettings),
/* harmony export */   "InitialSettingsEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.LatencyTestResultEvent),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_10__.LatencyTestResults),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.LoadFreezeFrameEvent),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_13__.Logger),
/* harmony export */   "MessageRecv": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_16__.MessageRecv),
/* harmony export */   "MessageSend": () => (/* reexport safe */ _WebSockets_MessageSend__WEBPACK_IMPORTED_MODULE_15__.MessageSend),
/* harmony export */   "MessageStreamerList": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_16__.MessageStreamerList),
/* harmony export */   "NumericParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.NumericParameters),
/* harmony export */   "OptionParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.OptionParameters),
/* harmony export */   "OutBoundVideoStats": () => (/* reexport safe */ _PeerConnectionController_OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_23__.OutBoundVideoStats),
/* harmony export */   "PixelStreaming": () => (/* reexport safe */ _PixelStreaming_PixelStreaming__WEBPACK_IMPORTED_MODULE_8__.PixelStreaming),
/* harmony export */   "PlayStreamErrorEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.PlayStreamRejectedEvent),
/* harmony export */   "SettingBase": () => (/* reexport safe */ _Config_SettingBase__WEBPACK_IMPORTED_MODULE_3__.SettingBase),
/* harmony export */   "SettingFlag": () => (/* reexport safe */ _Config_SettingFlag__WEBPACK_IMPORTED_MODULE_4__.SettingFlag),
/* harmony export */   "SettingNumber": () => (/* reexport safe */ _Config_SettingNumber__WEBPACK_IMPORTED_MODULE_5__.SettingNumber),
/* harmony export */   "SettingOption": () => (/* reexport safe */ _Config_SettingOption__WEBPACK_IMPORTED_MODULE_6__.SettingOption),
/* harmony export */   "SettingText": () => (/* reexport safe */ _Config_SettingText__WEBPACK_IMPORTED_MODULE_7__.SettingText),
/* harmony export */   "SettingsChangedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.SettingsChangedEvent),
/* harmony export */   "SignallingProtocol": () => (/* reexport safe */ _WebSockets_SignallingProtocol__WEBPACK_IMPORTED_MODULE_18__.SignallingProtocol),
/* harmony export */   "StatsReceivedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamReconnectEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamerListMessageEvent),
/* harmony export */   "TextParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.TextParameters),
/* harmony export */   "UnquantizedAndDenormalizeUnsigned": () => (/* reexport safe */ _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_14__.UnquantizedDenormalizedUnsignedCoord),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.VideoInitializedEvent),
/* harmony export */   "WebRTCSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.WebRTCSettings),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcFailedEvent),
/* harmony export */   "WebRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.WebRtcPlayerController),
/* harmony export */   "WebRtcSdpEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcSdpEvent),
/* harmony export */   "WebSocketController": () => (/* reexport safe */ _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_17__.WebSocketController),
/* harmony export */   "WebXRController": () => (/* reexport safe */ _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_1__.WebXRController),
/* harmony export */   "XrFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.XrSessionStartedEvent)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_402084__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_402084__(/*! ./WebXR/WebXRController */ "./src/WebXR/WebXRController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_402084__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Config_SettingBase__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_402084__(/*! ./Config/SettingBase */ "./src/Config/SettingBase.ts");
/* harmony import */ var _Config_SettingFlag__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_402084__(/*! ./Config/SettingFlag */ "./src/Config/SettingFlag.ts");
/* harmony import */ var _Config_SettingNumber__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_402084__(/*! ./Config/SettingNumber */ "./src/Config/SettingNumber.ts");
/* harmony import */ var _Config_SettingOption__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_402084__(/*! ./Config/SettingOption */ "./src/Config/SettingOption.ts");
/* harmony import */ var _Config_SettingText__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_402084__(/*! ./Config/SettingText */ "./src/Config/SettingText.ts");
/* harmony import */ var _PixelStreaming_PixelStreaming__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_402084__(/*! ./PixelStreaming/PixelStreaming */ "./src/PixelStreaming/PixelStreaming.ts");
/* harmony import */ var _AFK_AFKController__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_402084__(/*! ./AFK/AFKController */ "./src/AFK/AFKController.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_402084__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_402084__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_402084__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_402084__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_402084__(/*! ./Util/CoordinateConverter */ "./src/Util/CoordinateConverter.ts");
/* harmony import */ var _WebSockets_MessageSend__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_402084__(/*! ./WebSockets/MessageSend */ "./src/WebSockets/MessageSend.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_402084__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_402084__(/*! ./WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _WebSockets_SignallingProtocol__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_402084__(/*! ./WebSockets/SignallingProtocol */ "./src/WebSockets/SignallingProtocol.ts");
/* harmony import */ var _PeerConnectionController_CandidatePairStats__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_402084__(/*! ./PeerConnectionController/CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _PeerConnectionController_CandidateStat__WEBPACK_IMPORTED_MODULE_20__ = __nested_webpack_require_402084__(/*! ./PeerConnectionController/CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _PeerConnectionController_DataChannelStats__WEBPACK_IMPORTED_MODULE_21__ = __nested_webpack_require_402084__(/*! ./PeerConnectionController/DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_22__ = __nested_webpack_require_402084__(/*! ./PeerConnectionController/InboundRTPStats */ "./src/PeerConnectionController/InboundRTPStats.ts");
/* harmony import */ var _PeerConnectionController_OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_23__ = __nested_webpack_require_402084__(/*! ./PeerConnectionController/OutBoundRTPStats */ "./src/PeerConnectionController/OutBoundRTPStats.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__ = __nested_webpack_require_402084__(/*! ./Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


























})();

var __webpack_exports__AfkLogic = __webpack_exports__.AfkLogic;
var __webpack_exports__AfkTimedOutEvent = __webpack_exports__.AfkTimedOutEvent;
var __webpack_exports__AfkWarningActivateEvent = __webpack_exports__.AfkWarningActivateEvent;
var __webpack_exports__AfkWarningDeactivateEvent = __webpack_exports__.AfkWarningDeactivateEvent;
var __webpack_exports__AfkWarningUpdateEvent = __webpack_exports__.AfkWarningUpdateEvent;
var __webpack_exports__AggregatedStats = __webpack_exports__.AggregatedStats;
var __webpack_exports__CandidatePairStats = __webpack_exports__.CandidatePairStats;
var __webpack_exports__CandidateStat = __webpack_exports__.CandidateStat;
var __webpack_exports__Config = __webpack_exports__.Config;
var __webpack_exports__ControlSchemeType = __webpack_exports__.ControlSchemeType;
var __webpack_exports__DataChannelCloseEvent = __webpack_exports__.DataChannelCloseEvent;
var __webpack_exports__DataChannelErrorEvent = __webpack_exports__.DataChannelErrorEvent;
var __webpack_exports__DataChannelOpenEvent = __webpack_exports__.DataChannelOpenEvent;
var __webpack_exports__DataChannelStats = __webpack_exports__.DataChannelStats;
var __webpack_exports__EncoderSettings = __webpack_exports__.EncoderSettings;
var __webpack_exports__EventEmitter = __webpack_exports__.EventEmitter;
var __webpack_exports__Flags = __webpack_exports__.Flags;
var __webpack_exports__HideFreezeFrameEvent = __webpack_exports__.HideFreezeFrameEvent;
var __webpack_exports__InboundAudioStats = __webpack_exports__.InboundAudioStats;
var __webpack_exports__InboundVideoStats = __webpack_exports__.InboundVideoStats;
var __webpack_exports__InitialSettings = __webpack_exports__.InitialSettings;
var __webpack_exports__InitialSettingsEvent = __webpack_exports__.InitialSettingsEvent;
var __webpack_exports__LatencyTestResultEvent = __webpack_exports__.LatencyTestResultEvent;
var __webpack_exports__LatencyTestResults = __webpack_exports__.LatencyTestResults;
var __webpack_exports__LoadFreezeFrameEvent = __webpack_exports__.LoadFreezeFrameEvent;
var __webpack_exports__Logger = __webpack_exports__.Logger;
var __webpack_exports__MessageRecv = __webpack_exports__.MessageRecv;
var __webpack_exports__MessageSend = __webpack_exports__.MessageSend;
var __webpack_exports__MessageStreamerList = __webpack_exports__.MessageStreamerList;
var __webpack_exports__NumericParameters = __webpack_exports__.NumericParameters;
var __webpack_exports__OptionParameters = __webpack_exports__.OptionParameters;
var __webpack_exports__OutBoundVideoStats = __webpack_exports__.OutBoundVideoStats;
var __webpack_exports__PixelStreaming = __webpack_exports__.PixelStreaming;
var __webpack_exports__PlayStreamErrorEvent = __webpack_exports__.PlayStreamErrorEvent;
var __webpack_exports__PlayStreamEvent = __webpack_exports__.PlayStreamEvent;
var __webpack_exports__PlayStreamRejectedEvent = __webpack_exports__.PlayStreamRejectedEvent;
var __webpack_exports__SettingBase = __webpack_exports__.SettingBase;
var __webpack_exports__SettingFlag = __webpack_exports__.SettingFlag;
var __webpack_exports__SettingNumber = __webpack_exports__.SettingNumber;
var __webpack_exports__SettingOption = __webpack_exports__.SettingOption;
var __webpack_exports__SettingText = __webpack_exports__.SettingText;
var __webpack_exports__SettingsChangedEvent = __webpack_exports__.SettingsChangedEvent;
var __webpack_exports__SignallingProtocol = __webpack_exports__.SignallingProtocol;
var __webpack_exports__StatsReceivedEvent = __webpack_exports__.StatsReceivedEvent;
var __webpack_exports__StreamLoadingEvent = __webpack_exports__.StreamLoadingEvent;
var __webpack_exports__StreamPreConnectEvent = __webpack_exports__.StreamPreConnectEvent;
var __webpack_exports__StreamPreDisconnectEvent = __webpack_exports__.StreamPreDisconnectEvent;
var __webpack_exports__StreamReconnectEvent = __webpack_exports__.StreamReconnectEvent;
var __webpack_exports__StreamerListMessageEvent = __webpack_exports__.StreamerListMessageEvent;
var __webpack_exports__TextParameters = __webpack_exports__.TextParameters;
var __webpack_exports__UnquantizedAndDenormalizeUnsigned = __webpack_exports__.UnquantizedAndDenormalizeUnsigned;
var __webpack_exports__VideoEncoderAvgQPEvent = __webpack_exports__.VideoEncoderAvgQPEvent;
var __webpack_exports__VideoInitializedEvent = __webpack_exports__.VideoInitializedEvent;
var __webpack_exports__WebRTCSettings = __webpack_exports__.WebRTCSettings;
var __webpack_exports__WebRtcAutoConnectEvent = __webpack_exports__.WebRtcAutoConnectEvent;
var __webpack_exports__WebRtcConnectedEvent = __webpack_exports__.WebRtcConnectedEvent;
var __webpack_exports__WebRtcConnectingEvent = __webpack_exports__.WebRtcConnectingEvent;
var __webpack_exports__WebRtcDisconnectedEvent = __webpack_exports__.WebRtcDisconnectedEvent;
var __webpack_exports__WebRtcFailedEvent = __webpack_exports__.WebRtcFailedEvent;
var __webpack_exports__WebRtcPlayerController = __webpack_exports__.WebRtcPlayerController;
var __webpack_exports__WebRtcSdpEvent = __webpack_exports__.WebRtcSdpEvent;
var __webpack_exports__WebSocketController = __webpack_exports__.WebSocketController;
var __webpack_exports__WebXRController = __webpack_exports__.WebXRController;
var __webpack_exports__XrFrameEvent = __webpack_exports__.XrFrameEvent;
var __webpack_exports__XrSessionEndedEvent = __webpack_exports__.XrSessionEndedEvent;
var __webpack_exports__XrSessionStartedEvent = __webpack_exports__.XrSessionStartedEvent;


//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQW1CO1FBQ3pDLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRTtZQUNkLE9BQU8sU0FBUyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDthQUFNO1lBQ0gsT0FBTyxJQUFJLE9BQU8sQ0FBVSxHQUFHLEVBQUU7Z0JBQzdCLE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0NBQ0o7Ozs7Ozs7Ozs7O0FDOVRELGVBQWUsWUFBWSw2QkFBNkI7QUFDeEQ7QUFDQTs7Ozs7O1NDRkE7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx5Q0FBeUMsd0NBQXdDO1VBQ2pGO1VBQ0E7VUFDQTs7Ozs7VUNQQTs7Ozs7VUNBQTtVQUNBO1VBQ0E7VUFDQSx1REFBdUQsaUJBQWlCO1VBQ3hFO1VBQ0EsZ0RBQWdELGFBQWE7VUFDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkEsa0RBQWtEO0FBRTZCO0FBQ3JCO0FBYWpDO0FBQzBCO0FBQ0E7QUFDSTtBQUNBO0FBQ0o7QUFDYztBQUVEO0FBRU07QUFLL0I7QUFDc0M7QUFDcEM7QUFDOEU7QUFDaEU7QUFDd0I7QUFDUjtBQUNGO0FBRWM7QUFDVjtBQUNNO0FBSTNCO0FBQzZCO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9BRksvQUZLQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0NvbmZpZy9Db25maWcudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Db25maWcvU2V0dGluZ0Jhc2UudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Db25maWcvU2V0dGluZ0ZsYWcudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Db25maWcvU2V0dGluZ051bWJlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0NvbmZpZy9TZXR0aW5nT3B0aW9uLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvQ29uZmlnL1NldHRpbmdUZXh0LnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZS50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0lucHV0cy9GYWtlVG91Y2hDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL0dhbWVwYWRDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL0hvdmVyaW5nTW91c2VFdmVudHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvSW5wdXRDbGFzc2VzRmFjdG9yeS50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0lucHV0cy9LZXlib2FyZENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvTG9ja2VkTW91c2VFdmVudHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvTW91c2VCdXR0b25zLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL01vdXNlQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL1hSR2FtZXBhZENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cy50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlU3RhdC50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cy50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9PdXRCb3VuZFJUUFN0YXRzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TZXNzaW9uU3RhdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvU3RyZWFtU3RhdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9QaXhlbFN0cmVhbWluZy9QaXhlbFN0cmVhbWluZy50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1VJL09uU2NyZWVuS2V5Ym9hcmQudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TZW5kTWVzc2FnZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9Ud29XYXlNYXAudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VdGlsL0ZpbGVVdGlsLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvVXRpbC9XZWJHTFV0aWxzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvVXRpbC9XZWJYUlV0aWxzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvVmlkZW9QbGF5ZXIvU3RyZWFtQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1dlYlNvY2tldHMvU2lnbmFsbGluZ1Byb3RvY29sLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViWFIvV2ViWFJDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvZXh0ZXJuYWwgbW9kdWxlIFwic2RwXCIiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgQ29uZmlnLCBGbGFncywgTnVtZXJpY1BhcmFtZXRlcnMgfSBmcm9tICcuLi9Db25maWcvQ29uZmlnJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcbmltcG9ydCB7IFBpeGVsU3RyZWFtaW5nIH0gZnJvbSAnLi4vUGl4ZWxTdHJlYW1pbmcvUGl4ZWxTdHJlYW1pbmcnO1xyXG5pbXBvcnQge1xyXG4gICAgQWZrVGltZWRPdXRFdmVudCxcclxuICAgIEFma1dhcm5pbmdBY3RpdmF0ZUV2ZW50LFxyXG4gICAgQWZrV2FybmluZ0RlYWN0aXZhdGVFdmVudCxcclxuICAgIEFma1dhcm5pbmdVcGRhdGVFdmVudFxyXG59IGZyb20gJy4uL1V0aWwvRXZlbnRFbWl0dGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBRktDb250cm9sbGVyIHtcclxuICAgIC8vIHRpbWUgb3V0IGxvZ2ljIGRldGFpbHNcclxuICAgIGNsb3NlVGltZW91dCA9IDEwO1xyXG4gICAgYWN0aXZlID0gZmFsc2U7XHJcbiAgICBjb3VudGRvd25BY3RpdmUgPSBmYWxzZTtcclxuICAgIHdhcm5UaW1lcjogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gPSB1bmRlZmluZWQ7XHJcbiAgICBjb3VudERvd24gPSAwO1xyXG4gICAgY291bnREb3duVGltZXI6IFJldHVyblR5cGU8dHlwZW9mIHNldEludGVydmFsPiA9IHVuZGVmaW5lZDtcclxuICAgIGNvbmZpZzogQ29uZmlnO1xyXG4gICAgcGl4ZWxTdHJlYW1pbmc6IFBpeGVsU3RyZWFtaW5nO1xyXG4gICAgb25EaXNtaXNzQWZrOiAoKSA9PiB2b2lkO1xyXG5cclxuICAgIG9uQUZLVGltZWRPdXRDYWxsYmFjazogKCkgPT4gdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBjb25maWc6IENvbmZpZyxcclxuICAgICAgICBwaXhlbFN0cmVhbWluZzogUGl4ZWxTdHJlYW1pbmcsXHJcbiAgICAgICAgb25EaXNtaXNzQWZrOiAoKSA9PiB2b2lkXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nID0gcGl4ZWxTdHJlYW1pbmc7XHJcbiAgICAgICAgdGhpcy5vbkRpc21pc3NBZmsgPSBvbkRpc21pc3NBZms7XHJcbiAgICAgICAgdGhpcy5vbkFGS1RpbWVkT3V0Q2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgJ0FGSyB0aW1lZCBvdXQsIGRpZCB5b3Ugd2FudCB0byBvdmVycmlkZSB0aGlzIGNhbGxiYWNrPydcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1ldGhvZHMgdGhhdCBvY2N1ciB3aGVuIGFuIGFmayBldmVudCBsaXN0ZW5lciBpcyBjbGlja2VkXHJcbiAgICAgKi9cclxuICAgIG9uQWZrQ2xpY2soKSB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNvdW50RG93blRpbWVyKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuY291bnRkb3duQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgbmV3IEFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0IHRoZSB3YXJuaW5nIHRpbWVyIGlmIGEgdGltZW91dCBpcyBzZXQgZ3JlYXRlciB0aGF0IDAgc2Vjb25kc1xyXG4gICAgICovXHJcbiAgICBzdGFydEFma1dhcm5pbmdUaW1lcigpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoXHJcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2Vjc1xyXG4gICAgICAgICAgICApID4gMCAmJlxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkFGS0RldGVjdGlvbilcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0b3AgdGhlIGFmayB3YXJuaW5nIHRpbWVyXHJcbiAgICAgKi9cclxuICAgIHN0b3BBZmtXYXJuaW5nVGltZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLndhcm5UaW1lcik7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNvdW50RG93blRpbWVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhdXNlIHRoZSB0aW1lciB3aGljaCB3aGVuIGVsYXBzZWQgd2lsbCB3YXJuIHRoZSB1c2VyIHRoZXkgYXJlIGluYWN0aXZlLlxyXG4gICAgICovXHJcbiAgICBwYXVzZUFma1dhcm5pbmdUaW1lcigpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgdGhlIHVzZXIgaW50ZXJhY3RzIHRoZW4gcmVzZXQgdGhlIHdhcm5pbmcgdGltZXIuXHJcbiAgICAgKi9cclxuICAgIHJlc2V0QWZrV2FybmluZ1RpbWVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSAmJiB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkFGS0RldGVjdGlvbikpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2FyblRpbWVyKTtcclxuICAgICAgICAgICAgdGhpcy53YXJuVGltZXIgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5hY3RpdmF0ZUFma0V2ZW50KCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLkFGS1RpbWVvdXRTZWNzXHJcbiAgICAgICAgICAgICAgICApICogMTAwMFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3cgdGhlIEFGSyBvdmVybGF5IGFuZCBiZWdpbiB0aGUgY291bnREb3duXHJcbiAgICAgKi9cclxuICAgIGFjdGl2YXRlQWZrRXZlbnQoKSB7XHJcbiAgICAgICAgLy8gUGF1c2UgdGhlIHRpbWVyIHdoaWxlIHRoZSB1c2VyIGlzIGxvb2tpbmcgYXQgdGhlIGluYWN0aXZpdHkgd2FybmluZyBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5wYXVzZUFma1dhcm5pbmdUaW1lcigpO1xyXG5cclxuICAgICAgICAvLyBpbnN0YW50aWF0ZSBhIG5ldyBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICBuZXcgQWZrV2FybmluZ0FjdGl2YXRlRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgY291bnREb3duOiB0aGlzLmNvdW50RG93bixcclxuICAgICAgICAgICAgICAgIGRpc21pc3NBZms6IHRoaXMub25EaXNtaXNzQWZrXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIG91ciBjb3VudERvd24gdGltZXIgYW5kIG92ZXJsYXkgY29udGVudHNcclxuICAgICAgICB0aGlzLmNvdW50RG93biA9IHRoaXMuY2xvc2VUaW1lb3V0O1xyXG4gICAgICAgIHRoaXMuY291bnRkb3duQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgIG5ldyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQoeyBjb3VudERvd246IHRoaXMuY291bnREb3duIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gaWYgd2UgYXJlIGluIGxvY2tlZCBtb3VzZSBleGl0IHBvaW50ZXJsb2NrXHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkhvdmVyaW5nTW91c2VNb2RlKSkge1xyXG4gICAgICAgICAgICAvLyBtaW5vciBoYWNrIHRvIGFsbGV2aWF0ZSBpb3Mgbm90IHN1cHBvcnRpbmcgcG9pbnRlcmxvY2tcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaykge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IG91ciBjb3VudERvd24gaW50ZXJ2YWwgYWNjb3JkaW5nbHlcclxuICAgICAgICB0aGlzLmNvdW50RG93blRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50RG93bi0tO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudERvd24gPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIHVzZXIgZmFpbGVkIHRvIGNsaWNrIHNvIGhpZGUgdGhlIG92ZXJsYXkgYW5kIGRpc2Nvbm5lY3QgdGhlbS5cclxuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgICAgICAgICBuZXcgQWZrVGltZWRPdXRFdmVudCgpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkFGS1RpbWVkT3V0Q2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnWW91IGhhdmUgYmVlbiBkaXNjb25uZWN0ZWQgZHVlIHRvIGluYWN0aXZpdHknXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaCBvZmYgdGhlIGFmayBmZWF0dXJlIGFzIHN0cmVhbSBoYXMgY2xvc2VkXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgICAgICAgICBuZXcgQWZrV2FybmluZ1VwZGF0ZUV2ZW50KHsgY291bnREb3duOiB0aGlzLmNvdW50RG93biB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgU2V0dGluZ0ZsYWcgfSBmcm9tICcuL1NldHRpbmdGbGFnJztcclxuaW1wb3J0IHsgU2V0dGluZ051bWJlciB9IGZyb20gJy4vU2V0dGluZ051bWJlcic7XHJcbmltcG9ydCB7IFNldHRpbmdUZXh0IH0gZnJvbSAnLi9TZXR0aW5nVGV4dCc7XHJcbmltcG9ydCB7IFNldHRpbmdPcHRpb24gfSBmcm9tICcuL1NldHRpbmdPcHRpb24nO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFNldHRpbmdzQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vVXRpbC9FdmVudEVtaXR0ZXInO1xyXG5pbXBvcnQgeyBTZXR0aW5nQmFzZSB9IGZyb20gJy4vU2V0dGluZ0Jhc2UnO1xyXG5cclxuLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiBmbGFncyB0aGF0IGNhbiBiZSB0b2dnbGVkIGFuZCBhcmUgY29yZSB0byBhbGwgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2VzLlxyXG4gKiBUaGVzZSBhcmUgdXNlZCBpbiB0aGUgYENvbmZpZy5GbGFnc2AgbWFwLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZsYWdzIHtcclxuICAgIHN0YXRpYyBBdXRvQ29ubmVjdCA9ICdBdXRvQ29ubmVjdCcgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgQXV0b1BsYXlWaWRlbyA9ICdBdXRvUGxheVZpZGVvJyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBBRktEZXRlY3Rpb24gPSAnVGltZW91dElmSWRsZScgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgQnJvd3NlclNlbmRPZmZlciA9ICdPZmZlclRvUmVjZWl2ZScgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgSG92ZXJpbmdNb3VzZU1vZGUgPSAnSG92ZXJpbmdNb3VzZScgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgRm9yY2VNb25vQXVkaW8gPSAnRm9yY2VNb25vQXVkaW8nIGFzIGNvbnN0O1xyXG4gICAgc3RhdGljIEZvcmNlVFVSTiA9ICdGb3JjZVRVUk4nIGFzIGNvbnN0O1xyXG4gICAgc3RhdGljIEZha2VNb3VzZVdpdGhUb3VjaGVzID0gJ0Zha2VNb3VzZVdpdGhUb3VjaGVzJyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBJc1F1YWxpdHlDb250cm9sbGVyID0gJ0NvbnRyb2xzUXVhbGl0eScgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24gPSAnTWF0Y2hWaWV3cG9ydFJlcycgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgUHJlZmVyU0ZVID0gJ3ByZWZlclNGVScgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgU3RhcnRWaWRlb011dGVkID0gJ1N0YXJ0VmlkZW9NdXRlZCcgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgU3VwcHJlc3NCcm93c2VyS2V5cyA9ICdTdXBwcmVzc0Jyb3dzZXJLZXlzJyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBVc2VNaWMgPSAnVXNlTWljJyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBLZXlib2FyZElucHV0ID0gJ0tleWJvYXJkSW5wdXQnIGFzIGNvbnN0O1xyXG4gICAgc3RhdGljIE1vdXNlSW5wdXQgPSAnTW91c2VJbnB1dCcgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgVG91Y2hJbnB1dCA9ICdUb3VjaElucHV0JyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBHYW1lcGFkSW5wdXQgPSAnR2FtZXBhZElucHV0JyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBYUkNvbnRyb2xsZXJJbnB1dCA9ICdYUkNvbnRyb2xsZXJJbnB1dCcgYXMgY29uc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEZsYWdzS2V5cyA9IEV4Y2x1ZGU8a2V5b2YgdHlwZW9mIEZsYWdzLCAncHJvdG90eXBlJz47XHJcbmV4cG9ydCB0eXBlIEZsYWdzSWRzID0gdHlwZW9mIEZsYWdzW0ZsYWdzS2V5c107XHJcblxyXG5jb25zdCBpc0ZsYWdJZCA9IChpZDogc3RyaW5nKTogaWQgaXMgRmxhZ3NJZHMgPT5cclxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEZsYWdzKS5zb21lKFxyXG4gICAgICAgIChuYW1lOiBGbGFnc0tleXMpID0+IEZsYWdzW25hbWVdID09PSBpZFxyXG4gICAgKTtcclxuXHJcbi8qKlxyXG4gKiBBIGNvbGxlY3Rpb24gb2YgbnVtZXJpYyBwYXJhbWV0ZXJzIHRoYXQgYXJlIGNvcmUgdG8gYWxsIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlcy5cclxuICpcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOdW1lcmljUGFyYW1ldGVycyB7XHJcbiAgICBzdGF0aWMgQUZLVGltZW91dFNlY3MgPSAnQUZLVGltZW91dCcgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgTWluUVAgPSAnTWluUVAnIGFzIGNvbnN0O1xyXG4gICAgc3RhdGljIE1heFFQID0gJ01heFFQJyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBXZWJSVENGUFMgPSAnV2ViUlRDRlBTJyBhcyBjb25zdDtcclxuICAgIHN0YXRpYyBXZWJSVENNaW5CaXRyYXRlID0gJ1dlYlJUQ01pbkJpdHJhdGUnIGFzIGNvbnN0O1xyXG4gICAgc3RhdGljIFdlYlJUQ01heEJpdHJhdGUgPSAnV2ViUlRDTWF4Qml0cmF0ZScgYXMgY29uc3Q7XHJcbiAgICBzdGF0aWMgTWF4UmVjb25uZWN0QXR0ZW1wdHMgPSAnTWF4UmVjb25uZWN0QXR0ZW1wdHMnIGFzIGNvbnN0O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBOdW1lcmljUGFyYW1ldGVyc0tleXMgPSBFeGNsdWRlPFxyXG4gICAga2V5b2YgdHlwZW9mIE51bWVyaWNQYXJhbWV0ZXJzLFxyXG4gICAgJ3Byb3RvdHlwZSdcclxuPjtcclxuZXhwb3J0IHR5cGUgTnVtZXJpY1BhcmFtZXRlcnNJZHMgPVxyXG4gICAgdHlwZW9mIE51bWVyaWNQYXJhbWV0ZXJzW051bWVyaWNQYXJhbWV0ZXJzS2V5c107XHJcblxyXG5jb25zdCBpc051bWVyaWNJZCA9IChpZDogc3RyaW5nKTogaWQgaXMgTnVtZXJpY1BhcmFtZXRlcnNJZHMgPT5cclxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE51bWVyaWNQYXJhbWV0ZXJzKS5zb21lKFxyXG4gICAgICAgIChuYW1lOiBOdW1lcmljUGFyYW1ldGVyc0tleXMpID0+IE51bWVyaWNQYXJhbWV0ZXJzW25hbWVdID09PSBpZFxyXG4gICAgKTtcclxuXHJcbi8qKlxyXG4gKiBBIGNvbGxlY3Rpb24gb2YgdGV4dHVhbCBwYXJhbWV0ZXJzIHRoYXQgYXJlIGNvcmUgdG8gYWxsIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlcy5cclxuICpcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUZXh0UGFyYW1ldGVycyB7XHJcbiAgICBzdGF0aWMgU2lnbmFsbGluZ1NlcnZlclVybCA9ICdzcycgYXMgY29uc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRleHRQYXJhbWV0ZXJzS2V5cyA9IEV4Y2x1ZGU8XHJcbiAgICBrZXlvZiB0eXBlb2YgVGV4dFBhcmFtZXRlcnMsXHJcbiAgICAncHJvdG90eXBlJ1xyXG4+O1xyXG5leHBvcnQgdHlwZSBUZXh0UGFyYW1ldGVyc0lkcyA9IHR5cGVvZiBUZXh0UGFyYW1ldGVyc1tUZXh0UGFyYW1ldGVyc0tleXNdO1xyXG5cclxuY29uc3QgaXNUZXh0SWQgPSAoaWQ6IHN0cmluZyk6IGlkIGlzIFRleHRQYXJhbWV0ZXJzSWRzID0+XHJcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhUZXh0UGFyYW1ldGVycykuc29tZShcclxuICAgICAgICAobmFtZTogVGV4dFBhcmFtZXRlcnNLZXlzKSA9PiBUZXh0UGFyYW1ldGVyc1tuYW1lXSA9PT0gaWRcclxuICAgICk7XHJcblxyXG4vKipcclxuICogQSBjb2xsZWN0aW9uIG9mIGVudW0gYmFzZWQgcGFyYW1ldGVycyB0aGF0IGFyZSBjb3JlIHRvIGFsbCBQaXhlbCBTdHJlYW1pbmcgZXhwZXJpZW5jZXMuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT3B0aW9uUGFyYW1ldGVycyB7XHJcbiAgICBzdGF0aWMgUHJlZmVycmVkQ29kZWMgPSAnUHJlZmVycmVkQ29kZWMnIGFzIGNvbnN0O1xyXG4gICAgc3RhdGljIFN0cmVhbWVySWQgPSAnU3RyZWFtZXJJZCcgYXMgY29uc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIE9wdGlvblBhcmFtZXRlcnNLZXlzID0gRXhjbHVkZTxcclxuICAgIGtleW9mIHR5cGVvZiBPcHRpb25QYXJhbWV0ZXJzLFxyXG4gICAgJ3Byb3RvdHlwZSdcclxuPjtcclxuZXhwb3J0IHR5cGUgT3B0aW9uUGFyYW1ldGVyc0lkcyA9IHR5cGVvZiBPcHRpb25QYXJhbWV0ZXJzW09wdGlvblBhcmFtZXRlcnNLZXlzXTtcclxuXHJcbmNvbnN0IGlzT3B0aW9uSWQgPSAoaWQ6IHN0cmluZyk6IGlkIGlzIE9wdGlvblBhcmFtZXRlcnNJZHMgPT5cclxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9wdGlvblBhcmFtZXRlcnMpLnNvbWUoXHJcbiAgICAgICAgKG5hbWU6IE9wdGlvblBhcmFtZXRlcnNLZXlzKSA9PiBPcHRpb25QYXJhbWV0ZXJzW25hbWVdID09PSBpZFxyXG4gICAgKTtcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IHR5cGVzIGZvciBpbmZlcnJpbmcgZGF0YSB0eXBlIGJhc2VkIG9uIHNldHRpbmcgSURcclxuICovXHJcbmV4cG9ydCB0eXBlIE9wdGlvbklkcyA9XHJcbiAgICB8IEZsYWdzSWRzXHJcbiAgICB8IE51bWVyaWNQYXJhbWV0ZXJzSWRzXHJcbiAgICB8IFRleHRQYXJhbWV0ZXJzSWRzXHJcbiAgICB8IE9wdGlvblBhcmFtZXRlcnNJZHM7XHJcbmV4cG9ydCB0eXBlIE9wdGlvbktleXM8VD4gPSBUIGV4dGVuZHMgRmxhZ3NJZHNcclxuICAgID8gYm9vbGVhblxyXG4gICAgOiBUIGV4dGVuZHMgTnVtZXJpY1BhcmFtZXRlcnNJZHNcclxuICAgID8gbnVtYmVyXHJcbiAgICA6IFQgZXh0ZW5kcyBUZXh0UGFyYW1ldGVyc0lkc1xyXG4gICAgPyBzdHJpbmdcclxuICAgIDogVCBleHRlbmRzIE9wdGlvblBhcmFtZXRlcnNJZHNcclxuICAgID8gc3RyaW5nXHJcbiAgICA6IG5ldmVyO1xyXG5cclxuZXhwb3J0IHR5cGUgQWxsU2V0dGluZ3MgPSB7XHJcbiAgICBbSyBpbiBPcHRpb25JZHNdOiBPcHRpb25LZXlzPEs+O1xyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb25maWdQYXJhbXMge1xyXG4gICAgLyoqIEluaXRpYWwgUGl4ZWwgU3RyZWFtaW5nIHNldHRpbmdzICovXHJcbiAgICBpbml0aWFsU2V0dGluZ3M/OiBQYXJ0aWFsPEFsbFNldHRpbmdzPjtcclxuICAgIC8qKiBJZiB1c2VVcmxQYXJhbXMgaXMgc2V0IHRydWUsIHdpbGwgcmVhZCBpbml0aWFsIHZhbHVlcyBmcm9tIFVSTCBwYXJhbWV0ZXJzIGFuZCBwZXJzaXN0IGNoYW5nZWQgc2V0dGluZ3MgaW50byBVUkwgKi9cclxuICAgIHVzZVVybFBhcmFtcz86IGJvb2xlYW47XHJcbn1cclxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XHJcbiAgICAvKiBBIG1hcCBvZiBmbGFncyB0aGF0IGNhbiBiZSB0b2dnbGVkIC0gb3B0aW9ucyB0aGF0IGNhbiBiZSBzZXQgaW4gdGhlIGFwcGxpY2F0aW9uIC0gZS5nLiBVc2UgTWljPyAqL1xyXG4gICAgcHJpdmF0ZSBmbGFncyA9IG5ldyBNYXA8RmxhZ3NJZHMsIFNldHRpbmdGbGFnPigpO1xyXG5cclxuICAgIC8qIEEgbWFwIG9mIG51bWVyaWNhbCBzZXR0aW5ncyAtIG9wdGlvbnMgdGhhdCBjYW4gYmUgaW4gdGhlIGFwcGxpY2F0aW9uIC0gZS5nLiBNaW5CaXRyYXRlICovXHJcbiAgICBwcml2YXRlIG51bWVyaWNQYXJhbWV0ZXJzID0gbmV3IE1hcDxOdW1lcmljUGFyYW1ldGVyc0lkcywgU2V0dGluZ051bWJlcj4oKTtcclxuXHJcbiAgICAvKiBBIG1hcCBvZiB0ZXh0IHNldHRpbmdzIC0gZS5nLiBzaWduYWxsaW5nIHNlcnZlciB1cmwgKi9cclxuICAgIHByaXZhdGUgdGV4dFBhcmFtZXRlcnMgPSBuZXcgTWFwPFRleHRQYXJhbWV0ZXJzSWRzLCBTZXR0aW5nVGV4dD4oKTtcclxuXHJcbiAgICAvKiBBIG1hcCBvZiBlbnVtIGJhc2VkIHNldHRpbmdzIC0gZS5nLiBwcmVmZXJyZWQgY29kZWMgKi9cclxuICAgIHByaXZhdGUgb3B0aW9uUGFyYW1ldGVycyA9IG5ldyBNYXA8T3B0aW9uUGFyYW1ldGVyc0lkcywgU2V0dGluZ09wdGlvbj4oKTtcclxuXHJcbiAgICBwcml2YXRlIF91c2VVcmxQYXJhbXM6IGJvb2xlYW47XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tIFNldHRpbmdzIC0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWdQYXJhbXMgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IHsgaW5pdGlhbFNldHRpbmdzLCB1c2VVcmxQYXJhbXMgfSA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLl91c2VVcmxQYXJhbXMgPSAhIXVzZVVybFBhcmFtcztcclxuICAgICAgICB0aGlzLnBvcHVsYXRlRGVmYXVsdFNldHRpbmdzKHRoaXMuX3VzZVVybFBhcmFtcyk7XHJcbiAgICAgICAgaWYgKGluaXRpYWxTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNldHRpbmdzKGluaXRpYWxTZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJ1ZSBpZiByZWFkaW5nIGNvbmZpZ3VyYXRpb24gaW5pdGlhbCB2YWx1ZXMgZnJvbSBVUkwgcGFyYW1ldGVycywgYW5kXHJcbiAgICAgKiBwZXJzaXN0aW5nIGNoYW5nZXMgaW4gVVJMIHdoZW4gY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB1c2VVcmxQYXJhbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZVVybFBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBvcHVsYXRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhIFBpeGVsIFN0cmVhbWluZyBhcHBsaWNhdGlvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHBvcHVsYXRlRGVmYXVsdFNldHRpbmdzKHVzZVVybFBhcmFtczogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRleHQgUGFyYW1ldGVyc1xyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICB0aGlzLnRleHRQYXJhbWV0ZXJzLnNldChcclxuICAgICAgICAgICAgVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdUZXh0KFxyXG4gICAgICAgICAgICAgICAgVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCxcclxuICAgICAgICAgICAgICAgICdTaWduYWxsaW5nIHVybCcsXHJcbiAgICAgICAgICAgICAgICAnVXJsIG9mIHRoZSBzaWduYWxsaW5nIHNlcnZlcicsXHJcbiAgICAgICAgICAgICAgICAobG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3dzczovLycgOiAnd3M6Ly8nKSArXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgcmVhZGFiaWxpdHksIHdlIG9taXQgdGhlIHBvcnQgaWYgaXQncyA4MFxyXG4gICAgICAgICAgICAgICAgICAgICh3aW5kb3cubG9jYXRpb24ucG9ydCA9PT0gJzgwJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wb3J0ID09PSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYDoke3dpbmRvdy5sb2NhdGlvbi5wb3J0fWApLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuc2V0KFxyXG4gICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nT3B0aW9uKFxyXG4gICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxyXG4gICAgICAgICAgICAgICAgJ1N0cmVhbWVyIElEJyxcclxuICAgICAgICAgICAgICAgICdUaGUgSUQgb2YgdGhlIHN0cmVhbWVyIHRvIHN0cmVhbS4nLFxyXG4gICAgICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICAgICAgICBbXSxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW51bSBQYXJhbWV0ZXJzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLnNldChcclxuICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYyxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdPcHRpb24oXHJcbiAgICAgICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjLFxyXG4gICAgICAgICAgICAgICAgJ1ByZWZlcnJlZCBDb2RlYycsXHJcbiAgICAgICAgICAgICAgICAnVGhlIHByZWZlcnJlZCBjb2RlYyB0byBiZSB1c2VkIGR1cmluZyBjb2RlYyBuZWdvdGlhdGlvbicsXHJcbiAgICAgICAgICAgICAgICAnSDI2NCBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDJlMDFmJyxcclxuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnJvd3NlclN1cHBvcnRlZENvZGVjczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyeSBnZXQgdGhlIGluZm8gbmVlZGVkIGZyb20gdGhlIFJUQ1J0cFJlY2VpdmVyLiBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIG9uIGNocm9tZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3MucHVzaCgnT25seSBhdmFpbGFibGUgb24gQ2hyb21lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyU3VwcG9ydGVkQ29kZWNzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IC8oVlBcXGR8SDI2XFxkfEFWMSkuKi87XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZWNzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKCd2aWRlbycpLmNvZGVjcztcclxuICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZm9yRWFjaCgoY29kZWMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjLm1pbWVUeXBlLnNwbGl0KCcvJylbMV0gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb2RlYy5zZHBGbXRwTGluZSB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hlci5leGVjKHN0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJvd3NlclN1cHBvcnRlZENvZGVjcy5wdXNoKHN0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlclN1cHBvcnRlZENvZGVjcztcclxuICAgICAgICAgICAgICAgIH0pKCksXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHRcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQm9vbGVhbiBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5BdXRvQ29ubmVjdCxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuQXV0b0Nvbm5lY3QsXHJcbiAgICAgICAgICAgICAgICAnQXV0byBjb25uZWN0IHRvIHN0cmVhbScsXHJcbiAgICAgICAgICAgICAgICAnV2hldGhlciB3ZSBzaG91bGQgYXR0ZW1wdCB0byBhdXRvIGNvbm5lY3QgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyIG9yIHNob3cgYSBjbGljayB0byBzdGFydCBwcm9tcHQuJyxcclxuICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuQXV0b1BsYXlWaWRlbyxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuQXV0b1BsYXlWaWRlbyxcclxuICAgICAgICAgICAgICAgICdBdXRvIHBsYXkgdmlkZW8nLFxyXG4gICAgICAgICAgICAgICAgJ1doZW4gdmlkZW8gaXMgcmVhZHkgYXV0b21hdGljYWxseSBzdGFydCBwbGF5aW5nIGl0IGFzIG9wcG9zZWQgdG8gc2hvd2luZyBhIHBsYXkgYnV0dG9uLicsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuQnJvd3NlclNlbmRPZmZlcixcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuQnJvd3NlclNlbmRPZmZlcixcclxuICAgICAgICAgICAgICAgICdCcm93c2VyIHNlbmQgb2ZmZXInLFxyXG4gICAgICAgICAgICAgICAgJ0Jyb3dzZXIgd2lsbCBpbml0aWF0ZSB0aGUgV2ViUlRDIGhhbmRzaGFrZSBieSBzZW5kaW5nIHRoZSBvZmZlciB0byB0aGUgc3RyZWFtZXInLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5Vc2VNaWMsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcclxuICAgICAgICAgICAgICAgIEZsYWdzLlVzZU1pYyxcclxuICAgICAgICAgICAgICAgICdVc2UgbWljcm9waG9uZScsXHJcbiAgICAgICAgICAgICAgICAnTWFrZSBicm93c2VyIHJlcXVlc3QgbWljcm9waG9uZSBhY2Nlc3MgYW5kIG9wZW4gYW4gaW5wdXQgYXVkaW8gdHJhY2suJyxcclxuICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuU3RhcnRWaWRlb011dGVkLFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXHJcbiAgICAgICAgICAgICAgICBGbGFncy5TdGFydFZpZGVvTXV0ZWQsXHJcbiAgICAgICAgICAgICAgICAnU3RhcnQgdmlkZW8gbXV0ZWQnLFxyXG4gICAgICAgICAgICAgICAgJ1ZpZGVvIHdpbGwgc3RhcnQgbXV0ZWQgaWYgdHJ1ZS4nLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzLFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXHJcbiAgICAgICAgICAgICAgICBGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzLFxyXG4gICAgICAgICAgICAgICAgJ1N1cHByZXNzIGJyb3dzZXIga2V5cycsXHJcbiAgICAgICAgICAgICAgICAnU3VwcHJlc3MgY2VydGFpbiBicm93c2VyIGtleXMgdGhhdCB3ZSB1c2UgaW4gVUUsIGZvciBleGFtcGxlIEY1IHRvIHNob3cgc2hhZGVyIGNvbXBsZXhpdHkgaW5zdGVhZCBvZiByZWZyZXNoIHRoZSBwYWdlLicsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuUHJlZmVyU0ZVLFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXHJcbiAgICAgICAgICAgICAgICBGbGFncy5QcmVmZXJTRlUsXHJcbiAgICAgICAgICAgICAgICAnUHJlZmVyIFNGVScsXHJcbiAgICAgICAgICAgICAgICAnVHJ5IHRvIGNvbm5lY3QgdG8gdGhlIFNGVSBpbnN0ZWFkIG9mIFAyUC4nLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyLFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXHJcbiAgICAgICAgICAgICAgICBGbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyLFxyXG4gICAgICAgICAgICAgICAgJ0lzIHF1YWxpdHkgY29udHJvbGxlcj8nLFxyXG4gICAgICAgICAgICAgICAgJ1RydWUgaWYgdGhpcyBwZWVyIGNvbnRyb2xzIHN0cmVhbSBxdWFsaXR5JyxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5Gb3JjZU1vbm9BdWRpbyxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuRm9yY2VNb25vQXVkaW8sXHJcbiAgICAgICAgICAgICAgICAnRm9yY2UgbW9ubyBhdWRpbycsXHJcbiAgICAgICAgICAgICAgICAnRm9yY2UgYnJvd3NlciB0byByZXF1ZXN0IG1vbm8gYXVkaW8gaW4gdGhlIFNEUCcsXHJcbiAgICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXHJcbiAgICAgICAgICAgIEZsYWdzLkZvcmNlVFVSTixcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuRm9yY2VUVVJOLFxyXG4gICAgICAgICAgICAgICAgJ0ZvcmNlIFRVUk4nLFxyXG4gICAgICAgICAgICAgICAgJ09ubHkgZ2VuZXJhdGUgVFVSTi9SZWxheWVkIElDRSBjYW5kaWRhdGVzLicsXHJcbiAgICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXHJcbiAgICAgICAgICAgIEZsYWdzLkFGS0RldGVjdGlvbixcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuQUZLRGV0ZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgJ0FGSyBpZiBpZGxlJyxcclxuICAgICAgICAgICAgICAgICdUaW1lb3V0IHRoZSBleHBlcmllbmNlIGlmIHVzZXIgaXMgQUZLIGZvciBhIHBlcmlvZC4nLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbixcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24sXHJcbiAgICAgICAgICAgICAgICAnTWF0Y2ggdmlld3BvcnQgcmVzb2x1dGlvbicsXHJcbiAgICAgICAgICAgICAgICAnUGl4ZWwgU3RyZWFtaW5nIHdpbGwgYmUgaW5zdHJ1Y3RlZCB0byBkeW5hbWljYWxseSByZXNpemUgdGhlIHZpZGVvIHN0cmVhbSB0byBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gZWxlbWVudC4nLFxyXG4gICAgICAgICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29udHJvbCBTY2hlbWU6IExvY2tlZCBNb3VzZScsXHJcbiAgICAgICAgICAgICAgICAnRWl0aGVyIGxvY2tlZCBtb3VzZSwgd2hlcmUgdGhlIHBvaW50ZXIgaXMgY29uc3VtZWQgYnkgdGhlIHZpZGVvIGFuZCBsb2NrZWQgdG8gaXQsIG9yIGhvdmVyaW5nIG1vdXNlLCB3aGVyZSB0aGUgbW91c2UgaXMgbm90IGNvbnN1bWVkLicsXHJcbiAgICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtcyxcclxuICAgICAgICAgICAgICAgIChpc0hvdmVyaW5nTW91c2U6IGJvb2xlYW4sIHNldHRpbmc6IFNldHRpbmdCYXNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZy5sYWJlbCA9IGBDb250cm9sIFNjaGVtZTogJHtpc0hvdmVyaW5nTW91c2UgPyAnSG92ZXJpbmcnIDogJ0xvY2tlZCd9IE1vdXNlYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5GYWtlTW91c2VXaXRoVG91Y2hlcyxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMsXHJcbiAgICAgICAgICAgICAgICAnRmFrZSBtb3VzZSB3aXRoIHRvdWNoZXMnLFxyXG4gICAgICAgICAgICAgICAgJ0Egc2luZ2xlIGZpbmdlciB0b3VjaCBpcyBjb252ZXJ0ZWQgaW50byBhIG1vdXNlIGV2ZW50LiBUaGlzIGFsbG93cyBhIG5vbi10b3VjaCBhcHBsaWNhdGlvbiB0byBiZSBjb250cm9sbGVkIHBhcnRpYWxseSB2aWEgYSB0b3VjaCBkZXZpY2UuJyxcclxuICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuS2V5Ym9hcmRJbnB1dCxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuS2V5Ym9hcmRJbnB1dCxcclxuICAgICAgICAgICAgICAgICdLZXlib2FyZCBpbnB1dCcsXHJcbiAgICAgICAgICAgICAgICAnSWYgZW5hYmxlZCwgc2VuZCBrZXlib2FyZCBldmVudHMgdG8gc3RyZWFtZXInLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXHJcbiAgICAgICAgICAgIEZsYWdzLk1vdXNlSW5wdXQsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcclxuICAgICAgICAgICAgICAgIEZsYWdzLk1vdXNlSW5wdXQsXHJcbiAgICAgICAgICAgICAgICAnTW91c2UgaW5wdXQnLFxyXG4gICAgICAgICAgICAgICAgJ0lmIGVuYWJsZWQsIHNlbmQgbW91c2UgZXZlbnRzIHRvIHN0cmVhbWVyJyxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxyXG4gICAgICAgICAgICBGbGFncy5Ub3VjaElucHV0LFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXHJcbiAgICAgICAgICAgICAgICBGbGFncy5Ub3VjaElucHV0LFxyXG4gICAgICAgICAgICAgICAgJ1RvdWNoIGlucHV0JyxcclxuICAgICAgICAgICAgICAgICdJZiBlbmFibGVkLCBzZW5kIHRvdWNoIGV2ZW50cyB0byBzdHJlYW1lcicsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuR2FtZXBhZElucHV0LFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXHJcbiAgICAgICAgICAgICAgICBGbGFncy5HYW1lcGFkSW5wdXQsXHJcbiAgICAgICAgICAgICAgICAnR2FtZXBhZCBpbnB1dCcsXHJcbiAgICAgICAgICAgICAgICAnSWYgZW5hYmxlZCwgc2VuZCBnYW1lcGFkIGV2ZW50cyB0byBzdHJlYW1lcicsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChcclxuICAgICAgICAgICAgRmxhZ3MuWFJDb250cm9sbGVySW5wdXQsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcclxuICAgICAgICAgICAgICAgIEZsYWdzLlhSQ29udHJvbGxlcklucHV0LFxyXG4gICAgICAgICAgICAgICAgJ1hSIGNvbnRyb2xsZXIgaW5wdXQnLFxyXG4gICAgICAgICAgICAgICAgJ0lmIGVuYWJsZWQsIHNlbmQgWFIgY29udHJvbGxlciBldmVudHMgdG8gc3RyZWFtZXInLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTnVtZXJpYyBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KFxyXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcyxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdOdW1iZXIoXHJcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcyxcclxuICAgICAgICAgICAgICAgICdBRksgdGltZW91dCcsXHJcbiAgICAgICAgICAgICAgICAnVGhlIHRpbWUgKGluIHNlY29uZHMpIGl0IHRha2VzIGZvciB0aGUgYXBwbGljYXRpb24gdG8gdGltZSBvdXQgaWYgQUZLIHRpbWVvdXQgaXMgZW5hYmxlZC4nLFxyXG4gICAgICAgICAgICAgICAgMCAvKm1pbiovLFxyXG4gICAgICAgICAgICAgICAgNjAwIC8qbWF4Ki8sXHJcbiAgICAgICAgICAgICAgICAxMjAgLyp2YWx1ZSovLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChcclxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxyXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsXHJcbiAgICAgICAgICAgICAgICAnTWF4IFJlY29ubmVjdHMnLFxyXG4gICAgICAgICAgICAgICAgJ01heGltdW0gbnVtYmVyIG9mIHJlY29ubmVjdHMgdGhlIGFwcGxpY2F0aW9uIHdpbGwgYXR0ZW1wdCB3aGVuIGEgc3RyZWFtZXIgZGlzY29ubmVjdHMuJyxcclxuICAgICAgICAgICAgICAgIDAgLyptaW4qLyxcclxuICAgICAgICAgICAgICAgIDk5OSAvKm1heCovLFxyXG4gICAgICAgICAgICAgICAgMyAvKnZhbHVlKi8sXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KFxyXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5NaW5RUCxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdOdW1iZXIoXHJcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5NaW5RUCxcclxuICAgICAgICAgICAgICAgICdNaW4gUVAnLFxyXG4gICAgICAgICAgICAgICAgJ1RoZSBsb3dlciBib3VuZCBmb3IgdGhlIHF1YW50aXphdGlvbiBwYXJhbWV0ZXIgKFFQKSBvZiB0aGUgZW5jb2Rlci4gMCA9IEJlc3QgcXVhbGl0eSwgNTEgPSB3b3JzdCBxdWFsaXR5LicsXHJcbiAgICAgICAgICAgICAgICAwIC8qbWluKi8sXHJcbiAgICAgICAgICAgICAgICA1MSAvKm1heCovLFxyXG4gICAgICAgICAgICAgICAgMCAvKnZhbHVlKi8sXHJcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KFxyXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5NYXhRUCxcclxuICAgICAgICAgICAgbmV3IFNldHRpbmdOdW1iZXIoXHJcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5NYXhRUCxcclxuICAgICAgICAgICAgICAgICdNYXggUVAnLFxyXG4gICAgICAgICAgICAgICAgJ1RoZSB1cHBlciBib3VuZCBmb3IgdGhlIHF1YW50aXphdGlvbiBwYXJhbWV0ZXIgKFFQKSBvZiB0aGUgZW5jb2Rlci4gMCA9IEJlc3QgcXVhbGl0eSwgNTEgPSB3b3JzdCBxdWFsaXR5LicsXHJcbiAgICAgICAgICAgICAgICAwIC8qbWluKi8sXHJcbiAgICAgICAgICAgICAgICA1MSAvKm1heCovLFxyXG4gICAgICAgICAgICAgICAgNTEgLyp2YWx1ZSovLFxyXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChcclxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTLFxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZ051bWJlcihcclxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUyxcclxuICAgICAgICAgICAgICAgICdNYXggRlBTJyxcclxuICAgICAgICAgICAgICAgICdUaGUgbWF4aW11bSBGUFMgdGhhdCBXZWJSVEMgd2lsbCB0cnkgdG8gdHJhbnNtaXQgZnJhbWVzIGF0LicsXHJcbiAgICAgICAgICAgICAgICAxIC8qbWluKi8sXHJcbiAgICAgICAgICAgICAgICA5OTkgLyptYXgqLyxcclxuICAgICAgICAgICAgICAgIDYwIC8qdmFsdWUqLyxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoXHJcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxyXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSxcclxuICAgICAgICAgICAgICAgICdNaW4gQml0cmF0ZSAoa2JwcyknLFxyXG4gICAgICAgICAgICAgICAgJ1RoZSBtaW5pbXVtIGJpdHJhdGUgdGhhdCBXZWJSVEMgc2hvdWxkIHVzZS4nLFxyXG4gICAgICAgICAgICAgICAgMCAvKm1pbiovLFxyXG4gICAgICAgICAgICAgICAgNTAwMDAwIC8qbWF4Ki8sXHJcbiAgICAgICAgICAgICAgICAwIC8qdmFsdWUqLyxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoXHJcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxyXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSxcclxuICAgICAgICAgICAgICAgICdNYXggQml0cmF0ZSAoa2JwcyknLFxyXG4gICAgICAgICAgICAgICAgJ1RoZSBtYXhpbXVtIGJpdHJhdGUgdGhhdCBXZWJSVEMgc2hvdWxkIHVzZS4nLFxyXG4gICAgICAgICAgICAgICAgMCAvKm1pbiovLFxyXG4gICAgICAgICAgICAgICAgNTAwMDAwIC8qbWF4Ki8sXHJcbiAgICAgICAgICAgICAgICAwIC8qdmFsdWUqLyxcclxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgbnVtZXJpYyBzZXR0aW5nIGlzIHRvZ2dsZWQuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxyXG4gICAgICogQHBhcmFtIG9uQ2hhbmdlZExpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIG51bWVyaWMgdmFsdWUgY2hhbmdlcy5cclxuICAgICAqL1xyXG4gICAgX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXHJcbiAgICAgICAgaWQ6IE51bWVyaWNQYXJhbWV0ZXJzSWRzLFxyXG4gICAgICAgIG9uQ2hhbmdlZExpc3RlbmVyOiAobmV3VmFsdWU6IG51bWJlcikgPT4gdm9pZFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgICAgICAuZ2V0KGlkKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9uQ2hhbmdlZExpc3RlbmVyKG9uQ2hhbmdlZExpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2FkZE9uT3B0aW9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICBpZDogT3B0aW9uUGFyYW1ldGVyc0lkcyxcclxuICAgICAgICBvbkNoYW5nZWRMaXN0ZW5lcjogKG5ld1ZhbHVlOiBzdHJpbmcpID0+IHZvaWRcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnNcclxuICAgICAgICAgICAgICAgIC5nZXQoaWQpXHJcbiAgICAgICAgICAgICAgICAuYWRkT25DaGFuZ2VkTGlzdGVuZXIob25DaGFuZ2VkTGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIG51bWVyaWMgc2V0dGluZyB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBnZXR0aW5nIGEgdmFsdWUgZm9yLlxyXG4gICAgICogQHJldHVybnMgVGhlIG51bWVyaWMgdmFsdWUgc3RvcmVkIGluIHRoZSBwYXJhbWV0ZXIgd2l0aCB0aGUgcGFzc2VkIGlkLlxyXG4gICAgICovXHJcbiAgICBnZXROdW1lcmljU2V0dGluZ1ZhbHVlKGlkOiBOdW1lcmljUGFyYW1ldGVyc0lkcyk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW1lcmljUGFyYW1ldGVycy5nZXQoaWQpLm51bWJlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG51bWVyaWMgc2V0dGluZyB3aXRoIHRoZSBpZCBvZiAke2lkfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHRleHQgc2V0dGluZyB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBnZXR0aW5nIGEgdmFsdWUgZm9yLlxyXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgc3RvcmVkIGluIHRoZSBwYXJhbWV0ZXIgd2l0aCB0aGUgcGFzc2VkIGlkLlxyXG4gICAgICovXHJcbiAgICBnZXRUZXh0U2V0dGluZ1ZhbHVlKGlkOiBUZXh0UGFyYW1ldGVyc0lkcyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0UGFyYW1ldGVycy5nZXQoaWQpLnZhbHVlIGFzIHN0cmluZztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG51bWVyaWMgc2V0dGluZyB3aXRoIHRoZSBpZCBvZiAke2lkfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBudW1iZXIgaW4gdGhlIHNldHRpbmcuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBudW1lcmljIHNldHRpbmcgd2UgYXJlIGludGVyZXN0ZWQgaW4uXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIG51bWVyaWMgdmFsdWUgdG8gc2V0LlxyXG4gICAgICovXHJcbiAgICBzZXROdW1lcmljU2V0dGluZyhpZDogTnVtZXJpY1BhcmFtZXRlcnNJZHMsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5udW1lcmljUGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuZ2V0KGlkKS5udW1iZXIgPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG51bWVyaWMgc2V0dGluZyB3aXRoIHRoZSBpZCBvZiAke2lkfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgZmxhZyBpcyB0b2dnbGVkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgZmxhZy5cclxuICAgICAqIEBwYXJhbSBvbkNoYW5nZUxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIF9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXHJcbiAgICAgICAgaWQ6IEZsYWdzSWRzLFxyXG4gICAgICAgIG9uQ2hhbmdlTGlzdGVuZXI6IChuZXdGbGFnVmFsdWU6IGJvb2xlYW4pID0+IHZvaWRcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5mbGFncy5nZXQoaWQpLm9uQ2hhbmdlID0gb25DaGFuZ2VMaXN0ZW5lcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIHRleHQgaXMgY2hhbmdlZC5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGZsYWcuXHJcbiAgICAgKiBAcGFyYW0gb25DaGFuZ2VMaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBfYWRkT25UZXh0U2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICBpZDogVGV4dFBhcmFtZXRlcnNJZHMsXHJcbiAgICAgICAgb25DaGFuZ2VMaXN0ZW5lcjogKG5ld1RleHRWYWx1ZTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy50ZXh0UGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGlkKS5vbkNoYW5nZSA9IG9uQ2hhbmdlTGlzdGVuZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBvcHRpb24gd2hpY2ggaGFzIHRoZSBnaXZlbiBpZC5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIEByZXR1cm5zIFRoZSBTZXR0aW5nT3B0aW9uIG9iamVjdCBtYXRjaGluZyBpZFxyXG4gICAgICovXHJcbiAgICBnZXRTZXR0aW5nT3B0aW9uKGlkOiBPcHRpb25QYXJhbWV0ZXJzSWRzKTogU2V0dGluZ09wdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uUGFyYW1ldGVycy5nZXQoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSB2YWx1ZSBvZiB0aGUgY29uZmlndXJhdGlvbiBmbGFnIHdoaWNoIGhhcyB0aGUgZ2l2ZW4gaWQuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIGZsYWcuXHJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBmbGFnIGlzIGVuYWJsZWQuXHJcbiAgICAgKi9cclxuICAgIGlzRmxhZ0VuYWJsZWQoaWQ6IEZsYWdzSWRzKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MuZ2V0KGlkKS5mbGFnIGFzIGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZmxhZyB0byBiZSBlbmFibGVkL2Rpc2FibGVkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgZmxhZyB0byB0b2dnbGUuXHJcbiAgICAgKiBAcGFyYW0gZmxhZ0VuYWJsZWQgVHJ1ZSBpZiB0aGUgZmxhZyBzaG91bGQgYmUgZW5hYmxlZC5cclxuICAgICAqL1xyXG4gICAgc2V0RmxhZ0VuYWJsZWQoaWQ6IEZsYWdzSWRzLCBmbGFnRW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICghdGhpcy5mbGFncy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBDYW5ub3QgdG9nZ2xlIGZsYWcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy5mbGFncyBtYXAuYFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmxhZ3MuZ2V0KGlkKS5mbGFnID0gZmxhZ0VuYWJsZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSB0ZXh0IHNldHRpbmcuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBzZXR0aW5nXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ1ZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgaW4gdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIHNldFRleHRTZXR0aW5nKGlkOiBUZXh0UGFyYW1ldGVyc0lkcywgc2V0dGluZ1ZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIXRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICBMb2dnZXIuV2FybmluZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgQ2Fubm90IHNldCB0ZXh0IHNldHRpbmcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy50ZXh0UGFyYW1ldGVycyBtYXAuYFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGlkKS50ZXh0ID0gc2V0dGluZ1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgb3B0aW9uIHNldHRpbmcgbGlzdCBvZiBvcHRpb25zLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgc2V0dGluZ1xyXG4gICAgICogQHBhcmFtIHNldHRpbmdPcHRpb25zIFRoZSB2YWx1ZXMgdGhlIHNldHRpbmcgY291bGQgdGFrZVxyXG4gICAgICovXHJcbiAgICBzZXRPcHRpb25TZXR0aW5nT3B0aW9ucyhcclxuICAgICAgICBpZDogT3B0aW9uUGFyYW1ldGVyc0lkcyxcclxuICAgICAgICBzZXR0aW5nT3B0aW9uczogQXJyYXk8c3RyaW5nPlxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvblBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICBMb2dnZXIuV2FybmluZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgQ2Fubm90IHNldCB0ZXh0IHNldHRpbmcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy5vcHRpb25QYXJhbWV0ZXJzIG1hcC5gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChpZCkub3B0aW9ucyA9IHNldHRpbmdPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBvcHRpb24gZW51bSBzZXR0aW5ncyBzZWxlY3RlZCBvcHRpb24uXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBzZXR0aW5nXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ09wdGlvbnMgVGhlIHZhbHVlIHRvIHNlbGVjdCBvdXQgb2YgYWxsIHRoZSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHNldE9wdGlvblNldHRpbmdWYWx1ZShpZDogT3B0aW9uUGFyYW1ldGVyc0lkcywgc2V0dGluZ1ZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uUGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBDYW5ub3Qgc2V0IHRleHQgc2V0dGluZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLmVudW1QYXJhbWV0ZXJzIG1hcC5gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChpZCkuc2VsZWN0ZWQgPSBzZXR0aW5nVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBsYWJlbCBmb3IgdGhlIGZsYWcuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxyXG4gICAgICogQHBhcmFtIGxhYmVsIFRoZSBuZXcgbGFiZWwgdG8gdXNlIGZvciB0aGUgZmxhZy5cclxuICAgICAqL1xyXG4gICAgc2V0RmxhZ0xhYmVsKGlkOiBGbGFnc0lkcywgbGFiZWw6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5mbGFncy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBDYW5ub3Qgc2V0IGxhYmVsIGZvciBmbGFnIGNhbGxlZCAke2lkfSAtIGl0IGRvZXMgbm90IGV4aXN0IGluIHRoZSBDb25maWcuZmxhZ3MgbWFwLmBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLmdldChpZCkubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgYSBzdWJzZXQgb2YgYWxsIHNldHRpbmdzIGluIG9uZSBmdW5jdGlvbiBjYWxsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyBBIChwYXJ0aWFsKSBsaXN0IG9mIHNldHRpbmdzIHRvIHNldFxyXG4gICAgICovXHJcbiAgICBzZXRTZXR0aW5ncyhzZXR0aW5nczogUGFydGlhbDxBbGxTZXR0aW5ncz4pIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzZXR0aW5ncykpIHtcclxuICAgICAgICAgICAgaWYgKGlzRmxhZ0lkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxhZ0VuYWJsZWQoa2V5LCBzZXR0aW5nc1trZXldKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc051bWVyaWNJZChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE51bWVyaWNTZXR0aW5nKGtleSwgc2V0dGluZ3Nba2V5XSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUZXh0SWQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZXh0U2V0dGluZyhrZXksIHNldHRpbmdzW2tleV0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT3B0aW9uSWQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoa2V5LCBzZXR0aW5nc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgc2V0dGluZ3NcclxuICAgICAqIEByZXR1cm5zIEFsbCBzZXR0aW5nIHZhbHVlcyBhcyBhbiBvYmplY3Qgd2l0aCBzZXR0aW5nIGlkcyBhcyBrZXlzXHJcbiAgICAgKi9cclxuICAgIGdldFNldHRpbmdzKCk6IFBhcnRpYWw8QWxsU2V0dGluZ3M+IHtcclxuICAgICAgICBjb25zdCBzZXR0aW5nczogUGFydGlhbDxBbGxTZXR0aW5ncz4gPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLmZsYWdzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBzZXR0aW5nc1trZXldID0gdmFsdWUuZmxhZztcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5udW1lcmljUGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlLm51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy50ZXh0UGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlLnRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMub3B0aW9uUGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlLnNlbGVjdGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2V0dGluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIEZsYWcgc2V0dGluZ3MgYXMgYW4gYXJyYXkuXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgU2V0dGluZ0ZsYWcgb2JqZWN0c1xyXG4gICAgICovXHJcbiAgICBnZXRGbGFncygpOiBBcnJheTxTZXR0aW5nRmxhZz4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZmxhZ3MudmFsdWVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBUZXh0IHNldHRpbmdzIGFzIGFuIGFycmF5LlxyXG4gICAgICogQHJldHVybnMgQWxsIFNldHRpbmdUZXh0IG9iamVjdHNcclxuICAgICAqL1xyXG4gICAgZ2V0VGV4dFNldHRpbmdzKCk6IEFycmF5PFNldHRpbmdUZXh0PiB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy50ZXh0UGFyYW1ldGVycy52YWx1ZXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIE51bWJlciBzZXR0aW5ncyBhcyBhbiBhcnJheS5cclxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nTnVtYmVyIG9iamVjdHNcclxuICAgICAqL1xyXG4gICAgZ2V0TnVtZXJpY1NldHRpbmdzKCk6IEFycmF5PFNldHRpbmdOdW1iZXI+IHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnZhbHVlcygpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgT3B0aW9uIHNldHRpbmdzIGFzIGFuIGFycmF5LlxyXG4gICAgICogQHJldHVybnMgQWxsIFNldHRpbmdPcHRpb24gb2JqZWN0c1xyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25TZXR0aW5ncygpOiBBcnJheTxTZXR0aW5nT3B0aW9uPiB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5vcHRpb25QYXJhbWV0ZXJzLnZhbHVlcygpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVtaXQgZXZlbnRzIHdoZW4gc2V0dGluZ3MgY2hhbmdlLlxyXG4gICAgICogQHBhcmFtIGV2ZW50RW1pdHRlclxyXG4gICAgICovXHJcbiAgICBfcmVnaXN0ZXJPbkNoYW5nZUV2ZW50cyhldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcikge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZmxhZ3Mua2V5cygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZsYWcgPSB0aGlzLmZsYWdzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAoZmxhZykge1xyXG4gICAgICAgICAgICAgICAgZmxhZy5vbkNoYW5nZUVtaXQgPSAobmV3VmFsdWU6IGJvb2xlYW4pID0+XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nc0NoYW5nZWRFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZmxhZy5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmbGFnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZmxhZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5udW1lcmljUGFyYW1ldGVycy5rZXlzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gdGhpcy5udW1lcmljUGFyYW1ldGVycy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyLm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZTogbnVtYmVyKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2V0dGluZ3NDaGFuZ2VkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG51bWJlci5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBudW1iZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMudGV4dFBhcmFtZXRlcnMua2V5cygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHRQYXJhbWV0ZXJzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAodGV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5vbkNoYW5nZUVtaXQgPSAobmV3VmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNldHRpbmdzQ2hhbmdlZEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0ZXh0LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9wdGlvblBhcmFtZXRlcnMua2V5cygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMub3B0aW9uUGFyYW1ldGVycy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2V0dGluZ3NDaGFuZ2VkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbi5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogVGhlIGVudW0gYXNzb2NpYXRlZCB3aXRoIHRoZSBtb3VzZSBiZWluZyBsb2NrZWQgb3IgaG92ZXJpbmdcclxuICovXHJcbmV4cG9ydCBlbnVtIENvbnRyb2xTY2hlbWVUeXBlIHtcclxuICAgIExvY2tlZE1vdXNlID0gMCxcclxuICAgIEhvdmVyaW5nTW91c2UgPSAxXHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBhIHNldHRpbmcgdGhhdCBoYXMgYSB0ZXh0IGxhYmVsIGFuZCBhbiBhcmJpdHJhcnkgc2V0dGluZyB2YWx1ZSBpdCBzdG9yZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2V0dGluZ0Jhc2Uge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBfbGFiZWw6IHN0cmluZztcclxuICAgIF92YWx1ZTogdW5rbm93bjtcclxuICAgIG9uQ2hhbmdlOiAoY2hhbmdlZFZhbHVlOiB1bmtub3duLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4gdm9pZDtcclxuICAgIG9uQ2hhbmdlRW1pdDogKGNoYW5nZWRWYWx1ZTogdW5rbm93bikgPT4gdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICBkZWZhdWx0U2V0dGluZ1ZhbHVlOiB1bmtub3duLFxyXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG5cdFx0ZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXI6IChjaGFuZ2VkVmFsdWU6IHVua25vd24sIHNldHRpbmc6IFNldHRpbmdCYXNlKSA9PiB2b2lkID0gKCkgPT4geyAvKiBEbyBub3RoaW5nLCB0byBiZSBvdmVycmlkZGVuLiAqLyB9XHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXI7XHJcblxyXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvKiBEbyBub3RoaW5nLCB0byBiZSBvdmVycmlkZGVuLiAqL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRlZmF1bHRTZXR0aW5nVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGxhYmVsIHRleHQgZm9yIHRoZSBzZXR0aW5nLlxyXG4gICAgICogQHBhcmFtIGxhYmVsIHNldHRpbmcgbGFiZWwuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgbGFiZWwoaW5MYWJlbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbGFiZWwgPSBpbkxhYmVsO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0KHRoaXMuX3ZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRoZSBsYWJlbCB0ZXh0IGZvciB0aGUgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBsYWJlbCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIHNldHRpbmcncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB2YWx1ZSgpOiB1bmtub3duIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIHNldHRpbmcncyBzdG9yZWQgdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gaW5WYWx1ZSBUaGUgbmV3IHZhbHVlIGZvciB0aGUgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCB2YWx1ZShpblZhbHVlOiB1bmtub3duKSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBpblZhbHVlO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0KHRoaXMuX3ZhbHVlKTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHR5cGUgeyBGbGFnc0lkcyB9IGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHsgU2V0dGluZ0Jhc2UgfSBmcm9tICcuL1NldHRpbmdCYXNlJztcclxuXHJcbi8qKlxyXG4gKiBBIGJvb2xlYW4gZmxhZyBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nRmxhZzxcclxuICAgIEN1c3RvbUlkcyBleHRlbmRzIHN0cmluZyA9IEZsYWdzSWRzXHJcbj4gZXh0ZW5kcyBTZXR0aW5nQmFzZSB7XHJcbiAgICBpZDogRmxhZ3NJZHMgfCBDdXN0b21JZHM7XHJcbiAgICBvbkNoYW5nZUVtaXQ6IChjaGFuZ2VkVmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICB1c2VVcmxQYXJhbXM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgaWQ6IEZsYWdzSWRzIHwgQ3VzdG9tSWRzLFxyXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICBkZWZhdWx0RmxhZ1ZhbHVlOiBib29sZWFuLFxyXG4gICAgICAgIHVzZVVybFBhcmFtczogYm9vbGVhbixcclxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuXHRcdGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyOiAoY2hhbmdlZFZhbHVlOiB1bmtub3duLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4gdm9pZCA9ICgpID0+IHsgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi8gfVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdEZsYWdWYWx1ZSwgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGlmICghdXNlVXJsUGFyYW1zIHx8ICF1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmxhZyA9IGRlZmF1bHRGbGFnVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcGFyc2UgZmxhZyBmcm9tIHVybCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtRmxhZyA9IHRoaXMuZ2V0VXJsUGFyYW1GbGFnKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmxhZyA9IHVybFBhcmFtRmxhZztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51c2VVcmxQYXJhbXMgPSB1c2VVcmxQYXJhbXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSB0aGUgZmxhZyB2YWx1ZSBmcm9tIHRoZSB1cmwgcGFyYW1ldGVycy5cclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHVybCBwYXJhbWV0ZXJzIGNvbnRhaW5zIC8/aWQsIGJ1dCBGYWxzZSBpZiAvP2lkPWZhbHNlXHJcbiAgICAgKi9cclxuICAgIGdldFVybFBhcmFtRmxhZygpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGlmICh1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy5nZXQodGhpcy5pZCkgPT09ICdmYWxzZScgfHxcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy5nZXQodGhpcy5pZCkgPT09ICdGYWxzZSdcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcnNpc3QgdGhlIHNldHRpbmcgdmFsdWUgaW4gVVJMLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlVVJMUGFyYW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVzZVVybFBhcmFtcykge1xyXG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtc1xyXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mbGFnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMuc2V0KHRoaXMuaWQsICd0cnVlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMuc2V0KHRoaXMuaWQsICdmYWxzZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcclxuICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMudG9TdHJpbmcoKSAhPT0gJydcclxuICAgICAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHtsb2NhdGlvbi5wYXRobmFtZX1gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5hYmxlcyB0aGlzIGZsYWcuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbmFibGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mbGFnID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIHNldHRpbmcncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBmbGFnKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMudmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIHNldHRpbmcncyBzdG9yZWQgdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gaW5WYWx1ZSBUaGUgbmV3IHZhbHVlIGZvciB0aGUgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBmbGFnKGluVmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gaW5WYWx1ZTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHR5cGUgeyBOdW1lcmljUGFyYW1ldGVyc0lkcyB9IGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHsgU2V0dGluZ0Jhc2UgfSBmcm9tICcuL1NldHRpbmdCYXNlJztcclxuXHJcbi8qKlxyXG4gKiBBIG51bWJlciBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC4gTWluIGFuZCBtYXggbGltaXQgdGhlIHJhbmdlIG9mIGFsbG93ZWQgdmFsdWVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdOdW1iZXI8XHJcbiAgICBDdXN0b21JZHMgZXh0ZW5kcyBzdHJpbmcgPSBOdW1lcmljUGFyYW1ldGVyc0lkc1xyXG4+IGV4dGVuZHMgU2V0dGluZ0Jhc2Uge1xyXG4gICAgX21pbjogbnVtYmVyO1xyXG4gICAgX21heDogbnVtYmVyO1xyXG5cclxuICAgIGlkOiBOdW1lcmljUGFyYW1ldGVyc0lkcyB8IEN1c3RvbUlkcztcclxuICAgIG9uQ2hhbmdlRW1pdDogKGNoYW5nZWRWYWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgdXNlVXJsUGFyYW1zOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGlkOiBOdW1lcmljUGFyYW1ldGVyc0lkcyB8IEN1c3RvbUlkcyxcclxuICAgICAgICBsYWJlbDogc3RyaW5nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICAgICAgbWluOiBudW1iZXIsXHJcbiAgICAgICAgbWF4OiBudW1iZXIsXHJcbiAgICAgICAgZGVmYXVsdE51bWJlcjogbnVtYmVyLFxyXG4gICAgICAgIHVzZVVybFBhcmFtczogYm9vbGVhbixcclxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuXHRcdGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyOiAoY2hhbmdlZFZhbHVlOiB1bmtub3duLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4gdm9pZCA9ICgpID0+IHsgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi8gfVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdE51bWJlciwgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICB0aGlzLl9taW4gPSBtaW47XHJcbiAgICAgICAgdGhpcy5fbWF4ID0gbWF4O1xyXG5cclxuICAgICAgICAvLyBhdHRlbXB0IHRvIHJlYWQgdGhlIG51bWJlciBmcm9tIHRoZSB1cmwgcGFyYW1zXHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAoIXVzZVVybFBhcmFtcyB8fCAhdXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm51bWJlciA9IGRlZmF1bHROdW1iZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBOdW1iZXIucGFyc2VJbnQodXJsUGFyYW1zLmdldCh0aGlzLmlkKSk7XHJcbiAgICAgICAgICAgIHRoaXMubnVtYmVyID0gTnVtYmVyLmlzTmFOKHBhcnNlZFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0TnVtYmVyXHJcbiAgICAgICAgICAgICAgICA6IHBhcnNlZFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcnNpc3QgdGhlIHNldHRpbmcgdmFsdWUgaW4gVVJMLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlVVJMUGFyYW1zKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnVzZVVybFBhcmFtcykge1xyXG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtcyBsaWtlID9pZD1udW1iZXJcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLm51bWJlci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFxyXG4gICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAnJyxcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy50b1N0cmluZygpICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYCR7bG9jYXRpb24ucGF0aG5hbWV9PyR7dXJsUGFyYW1zfWBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG51bWJlciB2YWx1ZSAod2lsbCBiZSBjbGFtcGVkIHdpdGhpbiByYW5nZSkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgbnVtYmVyKG5ld051bWJlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2xhbXAobmV3TnVtYmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgc3RvcmVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IG51bWJlcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlIGFzIG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsYW1wcyBhIG51bWJlciBiZXR3ZWVuIHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgKGluY2x1c2l2ZSkuXHJcbiAgICAgKiBAcGFyYW0gaW5OdW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cclxuICAgICAqIEByZXR1cm5zIFRoZSBjbGFtcGVkIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNsYW1wKGluTnVtYmVyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih0aGlzLl9tYXgsIGluTnVtYmVyKSwgdGhpcy5fbWluKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWVcclxuICAgICAqIEByZXR1cm5zIFRoZSBtaW5pbXVtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbWluKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gdmFsdWVcclxuICAgICAqIEByZXR1cm5zIFRoZSBtYXhpbXVtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbWF4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNoYW5nZSBsaXN0ZW5lciB0byB0aGUgbnVtYmVyIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZE9uQ2hhbmdlZExpc3RlbmVyKG9uQ2hhbmdlZEZ1bmM6IChuZXdOdW1iZXI6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBvbkNoYW5nZWRGdW5jO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgdHlwZSB7IE9wdGlvblBhcmFtZXRlcnNJZHMgfSBmcm9tICcuL0NvbmZpZyc7XHJcbmltcG9ydCB7IFNldHRpbmdCYXNlIH0gZnJvbSAnLi9TZXR0aW5nQmFzZSc7XHJcblxyXG4vKipcclxuICogQW4gT3B0aW9uIHNldHRpbmcgb2JqZWN0IHdpdGggYSB0ZXh0IGxhYmVsLiBBbGxvd3MgeW91IHRvIHNwZWNpZnkgYW4gYXJyYXkgb2Ygb3B0aW9ucyBhbmQgc2VsZWN0IG9uZSBvZiB0aGVtLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdPcHRpb248XHJcbiAgICBDdXN0b21JZHMgZXh0ZW5kcyBzdHJpbmcgPSBPcHRpb25QYXJhbWV0ZXJzSWRzXHJcbj4gZXh0ZW5kcyBTZXR0aW5nQmFzZSB7XHJcbiAgICBpZDogT3B0aW9uUGFyYW1ldGVyc0lkcyB8IEN1c3RvbUlkcztcclxuICAgIG9uQ2hhbmdlRW1pdDogKGNoYW5nZWRWYWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgX29wdGlvbnM6IEFycmF5PHN0cmluZz47XHJcbiAgICB1c2VVcmxQYXJhbXM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgaWQ6IE9wdGlvblBhcmFtZXRlcnNJZHMgfCBDdXN0b21JZHMsXHJcbiAgICAgICAgbGFiZWw6IHN0cmluZyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxyXG4gICAgICAgIGRlZmF1bHRUZXh0VmFsdWU6IHN0cmluZyxcclxuICAgICAgICBvcHRpb25zOiBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgIHVzZVVybFBhcmFtczogYm9vbGVhbixcclxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuXHRcdGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyOiAoY2hhbmdlZFZhbHVlOiB1bmtub3duLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4gdm9pZCA9ICgpID0+IHsgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi8gfVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgW2RlZmF1bHRUZXh0VmFsdWUsIGRlZmF1bHRUZXh0VmFsdWVdLCBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcik7XHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBzdHJpbmdUb01hdGNoOiBzdHJpbmcgPVxyXG4gICAgICAgICAgICB1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyh0aGlzLmlkKVxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmdldFVybFBhcmFtVGV4dCgpXHJcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRUZXh0VmFsdWU7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHN0cmluZ1RvTWF0Y2g7XHJcbiAgICAgICAgdGhpcy51c2VVcmxQYXJhbXMgPSB1c2VVcmxQYXJhbXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSB0aGUgdGV4dCB2YWx1ZSBmcm9tIHRoZSB1cmwgcGFyYW1ldGVycy5cclxuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IHZhbHVlIHBhcnNlZCBmcm9tIHRoZSB1cmwgaWYgdGhlIHVybCBwYXJhbWV0ZXJzIGNvbnRhaW5zIC8/aWQ9dmFsdWUsIGJ1dCBlbXB0eSBzdHJpbmcgaWYganVzdCAvP2lkIG9yIG5vIHVybCBwYXJhbSBmb3VuZC5cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsUGFyYW1UZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAodXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdXJsUGFyYW1zLmdldCh0aGlzLmlkKSA/PyAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVVUkxQYXJhbXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB1cmwgcGFyYW1zXHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgdGhpcy5zZWxlY3RlZCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcclxuICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMudG9TdHJpbmcoKSAhPT0gJydcclxuICAgICAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHtsb2NhdGlvbi5wYXRobmFtZX1gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY2hhbmdlIGxpc3RlbmVyIHRvIHRoZSBzZWxlY3QgZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZE9uQ2hhbmdlZExpc3RlbmVyKG9uQ2hhbmdlZEZ1bmM6IChuZXdWYWx1ZTogc3RyaW5nKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlZEZ1bmM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgYXZhaWxhYmxlIG9wdGlvbnMgYXMgYW4gYXJyYXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBvcHRpb25zKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB2YWx1ZXMgQXJyYXkgb2Ygb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IG9wdGlvbnModmFsdWVzOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlcztcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlRW1pdCh0aGlzLnNlbGVjdGVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFNlbGVjdGVkIG9wdGlvbiBhcyBhIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHNlbGVjdGVkIG9wdGlvbiBpZiBpdCBtYXRjaGVzIG9uZSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBTZWxlY3RlZCBvcHRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBzZWxlY3RlZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gQSB1c2VyIG1heSBub3Qgc3BlY2lmeSB0aGUgZnVsbCBwb3NzaWJsZSB2YWx1ZSBzbyB3ZSBpbnN0ZWFkIHVzZSB0aGUgY2xvc2VzdCBtYXRjaC5cclxuICAgICAgICAvLyBlZyA/eHh4PUgyNjQgd291bGQgc2VsZWN0ICdIMjY0IGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTE7cHJvZmlsZS1sZXZlbC1pZD00MjAwMWYnXHJcbiAgICAgICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gdGhpcy5vcHRpb25zLmZpbHRlcihcclxuICAgICAgICAgICAgKG9wdGlvbjogc3RyaW5nKSA9PiBvcHRpb24uaW5kZXhPZih2YWx1ZSkgIT09IC0xXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoZmlsdGVyZWRMaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZmlsdGVyZWRMaXN0WzBdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHR5cGUgeyBUZXh0UGFyYW1ldGVyc0lkcyB9IGZyb20gJy4vQ29uZmlnJztcclxuaW1wb3J0IHsgU2V0dGluZ0Jhc2UgfSBmcm9tICcuL1NldHRpbmdCYXNlJztcclxuXHJcbi8qKlxyXG4gKiBBIHRleHQgc2V0dGluZyBvYmplY3Qgd2l0aCBhIHRleHQgbGFiZWwuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2V0dGluZ1RleHQ8XHJcbiAgICBDdXN0b21JZHMgZXh0ZW5kcyBzdHJpbmcgPSBUZXh0UGFyYW1ldGVyc0lkc1xyXG4+IGV4dGVuZHMgU2V0dGluZ0Jhc2Uge1xyXG4gICAgaWQ6IFRleHRQYXJhbWV0ZXJzSWRzIHwgQ3VzdG9tSWRzO1xyXG4gICAgb25DaGFuZ2VFbWl0OiAoY2hhbmdlZFZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICB1c2VVcmxQYXJhbXM6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgaWQ6IFRleHRQYXJhbWV0ZXJzSWRzIHwgQ3VzdG9tSWRzLFxyXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcclxuICAgICAgICBkZWZhdWx0VGV4dFZhbHVlOiBzdHJpbmcsXHJcbiAgICAgICAgdXNlVXJsUGFyYW1zOiBib29sZWFuLFxyXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG5cdFx0ZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXI6IChjaGFuZ2VkVmFsdWU6IHVua25vd24sIHNldHRpbmc6IFNldHRpbmdCYXNlKSA9PiB2b2lkID0gKCkgPT4geyAvKiBEbyBub3RoaW5nLCB0byBiZSBvdmVycmlkZGVuLiAqLyB9XHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBkZWZhdWx0VGV4dFZhbHVlLCBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcik7XHJcblxyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKCF1c2VVcmxQYXJhbXMgfHwgIXVybFBhcmFtcy5oYXModGhpcy5pZCkpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0ID0gZGVmYXVsdFRleHRWYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBwYXJzZSBmbGFnIGZyb20gdXJsIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1GbGFnID0gdGhpcy5nZXRVcmxQYXJhbVRleHQoKTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdXJsUGFyYW1GbGFnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRoZSB0ZXh0IHZhbHVlIGZyb20gdGhlIHVybCBwYXJhbWV0ZXJzLlxyXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgcGFyc2VkIGZyb20gdGhlIHVybCBpZiB0aGUgdXJsIHBhcmFtZXRlcnMgY29udGFpbnMgLz9pZD12YWx1ZSwgYnV0IGVtcHR5IHN0cmluZyBpZiBqdXN0IC8/aWQgb3Igbm8gdXJsIHBhcmFtIGZvdW5kLlxyXG4gICAgICovXHJcbiAgICBnZXRVcmxQYXJhbVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGlmICh1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1cmxQYXJhbXMuZ2V0KHRoaXMuaWQpID8/ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJzaXN0IHRoZSBzZXR0aW5nIHZhbHVlIGluIFVSTC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZVVSTFBhcmFtcygpIHtcclxuICAgICAgICBpZiAodGhpcy51c2VVcmxQYXJhbXMpIHtcclxuICAgICAgICAgICAgLy8gc2V0IHVybCBwYXJhbXNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLnRleHQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXHJcbiAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHtsb2NhdGlvbi5wYXRobmFtZX0/JHt1cmxQYXJhbXN9YFxyXG4gICAgICAgICAgICAgICAgICAgIDogYCR7bG9jYXRpb24ucGF0aG5hbWV9YFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIHNldHRpbmcncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0ZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBzZXR0aW5nJ3Mgc3RvcmVkIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIGluVmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgdGV4dChpblZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gaW5WYWx1ZTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgU2VuZGluZyBhbmQgUmVjZWl2aW5nIG9mIG1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZSB2aWEgdGhlIERhdGEgQ2hhbm5lbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhdGFDaGFubmVsQ29udHJvbGxlciB7XHJcbiAgICBkYXRhQ2hhbm5lbDogUlRDRGF0YUNoYW5uZWw7XHJcbiAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb247XHJcbiAgICBkYXRhY2hhbm5lbE9wdGlvbnM6IFJUQ0RhdGFDaGFubmVsSW5pdDtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBpc1JlY2VpdmluZ0ZyZWV6ZUZyYW1lID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBkYXRhY2hhbm5lbCBjb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YUNoYW5uZWxJbnN0YW5jZSgpOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVG8gQ3JlYXRlIGFuZCBTZXQgdXAgYSBEYXRhIENoYW5uZWxcclxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbiAtIFRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgLSBMYWJlbCBvZiB0aGUgRGF0YSBDaGFubmVsXHJcbiAgICAgKiBAcGFyYW0gZGF0YWNoYW5uZWxPcHRpb25zIC0gT3B0aW9uYWwgUlRDIERhdGFDaGFubmVsIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY3JlYXRlRGF0YUNoYW5uZWwoXHJcbiAgICAgICAgcGVlckNvbm5lY3Rpb246IFJUQ1BlZXJDb25uZWN0aW9uLFxyXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICAgICAgZGF0YWNoYW5uZWxPcHRpb25zPzogUlRDRGF0YUNoYW5uZWxJbml0XHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uID0gcGVlckNvbm5lY3Rpb247XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zID0gZGF0YWNoYW5uZWxPcHRpb25zO1xyXG4gICAgICAgIGlmIChkYXRhY2hhbm5lbE9wdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFjaGFubmVsT3B0aW9ucyA9IHt9IGFzIFJUQ0RhdGFDaGFubmVsSW5pdDtcclxuICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMub3JkZXJlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsID0gdGhpcy5wZWVyQ29ubmVjdGlvbi5jcmVhdGVEYXRhQ2hhbm5lbChcclxuICAgICAgICAgICAgdGhpcy5sYWJlbCxcclxuICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnNcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc2V0dXBEYXRhQ2hhbm5lbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldHVwRGF0YUNoYW5uZWwoKSB7XHJcbiAgICAgICAgLy9XZSBXYW50IGFuIEFycmF5IEJ1ZmZlciBub3QgYSBibG9iXHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ub3BlbiA9IChldjogRXZlbnQpID0+IHRoaXMuaGFuZGxlT25PcGVuKGV2KTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9uY2xvc2UgPSAoZXY6IEV2ZW50KSA9PiB0aGlzLmhhbmRsZU9uQ2xvc2UoZXYpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwub25tZXNzYWdlID0gKGV2OiBNZXNzYWdlRXZlbnQpID0+XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9uZXJyb3IgPSAoZXY6IE1lc3NhZ2VFdmVudCkgPT4gdGhpcy5oYW5kbGVPbkVycm9yKGV2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgRGF0YSBDaGFubmVsIGlzIG9wZW5lZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk9wZW4oZXY6IEV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgYERhdGEgQ2hhbm5lbCAoJHt0aGlzLmxhYmVsfSkgb3BlbmVkLmAsXHJcbiAgICAgICAgICAgIDdcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMub25PcGVuKHRoaXMuZGF0YUNoYW5uZWw/LmxhYmVsLCBldik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIERhdGEgQ2hhbm5lbCBpcyBjbG9zZWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25DbG9zZShldjogRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBgRGF0YSBDaGFubmVsICgke3RoaXMubGFiZWx9KSBjbG9zZWQuYCxcclxuICAgICAgICAgICAgN1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5vbkNsb3NlKHRoaXMuZGF0YUNoYW5uZWw/LmxhYmVsLCBldik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNZXNzYWdlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uTWVzc2FnZShldmVudDogTWVzc2FnZUV2ZW50KSB7XHJcbiAgICAgICAgLy8gSGlnaGVyIGxvZyBsZXZlbCB0byBwcmV2ZW50IGxvZyBzcGFtIHdpdGggbWVzc2FnZXMgcmVjZWl2ZWRcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBgRGF0YSBDaGFubmVsICgke3RoaXMubGFiZWx9KSBtZXNzYWdlOiAke2V2ZW50fWAsXHJcbiAgICAgICAgICAgIDhcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGFuIGVycm9yIGlzIHRocm93blxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gRXJyb3IgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25FcnJvcihldmVudDogTWVzc2FnZUV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgYERhdGEgQ2hhbm5lbCAoJHt0aGlzLmxhYmVsfSkgZXJyb3I6ICR7ZXZlbnR9YCxcclxuICAgICAgICAgICAgN1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5vbkVycm9yKHRoaXMuZGF0YUNoYW5uZWw/LmxhYmVsLCBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVycmlkZSB0byByZWdpc3RlciBvbk9wZW4gaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGxhYmVsIERhdGEgY2hhbm5lbCBsYWJlbCAoXCJkYXRhY2hhbm5lbFwiLCBcInNlbmQtZGF0YWNoYW5uZWxcIiwgXCJyZWN2LWRhdGFjaGFubmVsXCIpXHJcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25PcGVuKGxhYmVsOiBzdHJpbmcsIGV2OiBFdmVudCkge1xyXG4gICAgICAgIC8vIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb25cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJyaWRlIHRvIHJlZ2lzdGVyIG9uQ2xvc2UgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGxhYmVsIERhdGEgY2hhbm5lbCBsYWJlbCAoXCJkYXRhY2hhbm5lbFwiLCBcInNlbmQtZGF0YWNoYW5uZWxcIiwgXCJyZWN2LWRhdGFjaGFubmVsXCIpXHJcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25DbG9zZShsYWJlbDogc3RyaW5nLCBldjogRXZlbnQpIHtcclxuICAgICAgICAvLyBlbXB0eSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVycmlkZSB0byByZWdpc3RlciBvbkVycm9yIGhhbmRsZXJcclxuICAgICAqIEBwYXJhbSBsYWJlbCBEYXRhIGNoYW5uZWwgbGFiZWwgKFwiZGF0YWNoYW5uZWxcIiwgXCJzZW5kLWRhdGFjaGFubmVsXCIsIFwicmVjdi1kYXRhY2hhbm5lbFwiKVxyXG4gICAgICogQHBhcmFtIGV2IGV2ZW50XHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uRXJyb3IobGFiZWw6IHN0cmluZywgZXY6IEV2ZW50KSB7XHJcbiAgICAgICAgLy8gZW1wdHkgZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSAnLi9EYXRhQ2hhbm5lbENvbnRyb2xsZXInO1xyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIHNlbmRpbmcgZGF0YSBjaGFubmVsIG1lc3NhZ2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGF0YUNoYW5uZWxTZW5kZXIge1xyXG4gICAgZGF0YUNoYW5uZWxQcm92aWRlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsUHJvdmlkZXIgLSBEYXRhIGNoYW5uZWwgb2JqZWN0IHR5cGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YUNoYW5uZWxQcm92aWRlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyID0gZGF0YUNoYW5uZWxQcm92aWRlcjtcclxuICAgIH1cclxuXHJcbiAgICBjYW5TZW5kKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5uZWxQcm92aWRlci5nZXREYXRhQ2hhbm5lbEluc3RhbmNlKCkuZGF0YUNoYW5uZWwgIT09XHJcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyLmdldERhdGFDaGFubmVsSW5zdGFuY2UoKS5kYXRhQ2hhbm5lbFxyXG4gICAgICAgICAgICAgICAgLnJlYWR5U3RhdGUgPT0gJ29wZW4nXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgRGF0YSBvdmVyIHRoZSBEYXRhIGNoYW5uZWwgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gZGF0YSAtIE1lc3NhZ2UgRGF0YSBBcnJheSBCdWZmZXJcclxuICAgICAqL1xyXG4gICAgc2VuZERhdGEoZGF0YTogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICAvLyByZXNldCB0aGUgYWZrIGluYWN0aXZpdHlcclxuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbEluc3RhbmNlID1cclxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyLmdldERhdGFDaGFubmVsSW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFDaGFubmVsSW5zdGFuY2UuZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSA9PSAnb3BlbicpIHtcclxuICAgICAgICAgICAgZGF0YUNoYW5uZWxJbnN0YW5jZS5kYXRhQ2hhbm5lbC5zZW5kKGRhdGEpO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBNZXNzYWdlIFNlbnQ6ICR7bmV3IFVpbnQ4QXJyYXkoZGF0YSl9YCxcclxuICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNldEFma1dhcm5pbmdUaW1lck9uRGF0YVNlbmQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgYE1lc3NhZ2UgRmFpbGVkOiAke25ldyBVaW50OEFycmF5KGRhdGEpfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIHJlc2V0dGluZyB0aGUgQWZrIHdhcm5pbmcgdGltZXIgd2hlbiBkYXRhIGlzIHNlbnQgb3ZlciB0aGUgZGF0YSBjaGFubmVsXHJcbiAgICAgKi9cclxuICAgIHJlc2V0QWZrV2FybmluZ1RpbWVyT25EYXRhU2VuZCgpIHtcclxuICAgICAgICAvLyBCYXNlIEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIExhdGVuY3kgVGVzdCBSZXN1bHRzIERhdGFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbml0aWFsU2V0dGluZ3Mge1xyXG4gICAgUGl4ZWxTdHJlYW1pbmdTZXR0aW5nczogUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncztcclxuICAgIEVuY29kZXJTZXR0aW5nczogRW5jb2RlclNldHRpbmdzO1xyXG4gICAgV2ViUlRDU2V0dGluZ3M6IFdlYlJUQ1NldHRpbmdzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncyA9IG5ldyBQaXhlbFN0cmVhbWluZ1NldHRpbmdzKCk7XHJcbiAgICAgICAgdGhpcy5FbmNvZGVyU2V0dGluZ3MgPSBuZXcgRW5jb2RlclNldHRpbmdzKCk7XHJcbiAgICAgICAgdGhpcy5XZWJSVENTZXR0aW5ncyA9IG5ldyBXZWJSVENTZXR0aW5ncygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGZvciBjb21wYXRpYmlsaXR5IHdpdGggdGhlIEZQUyBhbmQgTWF4RlBTIHN0YXRzIGJldHdlZW4gNC4yNyBhbmQgNVxyXG4gICAgICovXHJcbiAgICB1ZUNvbXBhdGlibGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuV2ViUlRDU2V0dGluZ3MuTWF4RlBTICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5XZWJSVENTZXR0aW5ncy5GUFMgPSB0aGlzLldlYlJUQ1NldHRpbmdzLk1heEZQUztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBoYW5kbGluZyBQaXhlbCBTdHJlYW1pbmcgZGV0YWlsc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBpeGVsU3RyZWFtaW5nU2V0dGluZ3Mge1xyXG4gICAgQWxsb3dQaXhlbFN0cmVhbWluZ0NvbW1hbmRzPzogYm9vbGVhbjtcclxuICAgIERpc2FibGVMYXRlbmN5VGVzdD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBoYW5kbGluZyBlbmNvZGVyIHN0YXRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRW5jb2RlclNldHRpbmdzIHtcclxuICAgIFRhcmdldEJpdHJhdGU/OiBudW1iZXI7XHJcbiAgICBNYXhCaXRyYXRlPzogbnVtYmVyO1xyXG4gICAgTWluUVA/OiBudW1iZXI7XHJcbiAgICBNYXhRUD86IG51bWJlcjtcclxuICAgIFJhdGVDb250cm9sPzogJ0NCUicgfCAnVkJSJyB8ICdDb25zdFFQJztcclxuICAgIEZpbGxlckRhdGE/OiBib29sZWFuO1xyXG4gICAgTXVsdGlQYXNzPzogJ0RJU0FCTEVEJyB8ICdRVUFSVEVSJyB8ICdGVUxMJztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIGhhbmRsaW5nIHdlYiBydGMgc3RhdHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJSVENTZXR0aW5ncyB7XHJcbiAgICBEZWdyYWRhdGlvblByZWY/OiAnQkFMQU5DRUQnIHwgJ01BSU5UQUlOX0ZSQU1FUkFURScgfCAnTUFJTlRBSU5fUkVTT0xVVElPTic7XHJcbiAgICBNaW5CaXRyYXRlPzogbnVtYmVyO1xyXG4gICAgTWF4Qml0cmF0ZT86IG51bWJlcjtcclxuICAgIExvd1FQPzogbnVtYmVyO1xyXG4gICAgSGlnaFFQPzogbnVtYmVyO1xyXG4gICAgLy8gVUU0LjI3IGNvbXBhdGlibGVcclxuICAgIE1heEZQUz86IG51bWJlcjtcclxuICAgIC8vIFVFNSBjb21wYXRpYmxlXHJcbiAgICBGUFM/OiBudW1iZXI7XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG4vKipcclxuICogTGF0ZW5jeSBUZXN0IFJlc3VsdHMgRGF0YVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExhdGVuY3lUZXN0UmVzdWx0cyB7XHJcbiAgICAvL0ZpZWxkcyBTZXQgZnJvbSB0aGUgbGF0ZW5jeSBwYXlsb2FkIHJlZ2FyZGxlc3Mgb2YgdmVyc2lvblxyXG4gICAgUmVjZWlwdFRpbWVNczogbnVtYmVyID0gbnVsbDtcclxuICAgIFRyYW5zbWlzc2lvblRpbWVNczogbnVtYmVyID0gbnVsbDtcclxuXHJcbiAgICAvL0ZpZWxkcyBTZXQgZnJvbSB0aGUgbGF0ZW5jeSBwYXlsb2FkIGZyb20gNC4yNy4yXHJcbiAgICBQcmVDYXB0dXJlVGltZU1zOiBudW1iZXIgPSBudWxsO1xyXG4gICAgUG9zdENhcHR1cmVUaW1lTXM6IG51bWJlciA9IG51bGw7XHJcbiAgICBQcmVFbmNvZGVUaW1lTXM6IG51bWJlciA9IG51bGw7XHJcbiAgICBQb3N0RW5jb2RlVGltZU1zOiBudW1iZXIgPSBudWxsO1xyXG5cclxuICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgZnJvbSA1LjBcclxuICAgIEVuY29kZU1zOiBudW1iZXIgPSBudWxsO1xyXG4gICAgQ2FwdHVyZVRvU2VuZE1zOiBudW1iZXIgPSBudWxsO1xyXG5cclxuICAgIC8vRmllbGRzIFNldCB3aGVuIHByb2Nlc3NlZFxyXG4gICAgdGVzdFN0YXJ0VGltZU1zID0gMDtcclxuICAgIGJyb3dzZXJSZWNlaXB0VGltZU1zID0gMDtcclxuXHJcbiAgICAvL0ZpZWxkcyBzZXQgZnJvbSBjYWxjdWxhdGlvbnNcclxuICAgIGxhdGVuY3lFeGNsdWRpbmdEZWNvZGUgPSAwO1xyXG4gICAgdGVzdER1cmF0aW9uID0gMDtcclxuICAgIC8vdWVMYXRlbmN5OiBudW1iZXIgPSAwO1xyXG4gICAgbmV0d29ya0xhdGVuY3kgPSAwO1xyXG4gICAgYnJvd3NlclNlbmRMYXRlbmN5ID0gMDtcclxuICAgIGZyYW1lRGlzcGxheURlbHRhVGltZU1zID0gMDtcclxuICAgIGVuZFRvRW5kTGF0ZW5jeSA9IDA7XHJcbiAgICAvL3VlUGl4ZWxTdHJlYW1MYXRlbmN5OiBudW1iZXIgPSAwO1xyXG4gICAgZW5jb2RlTGF0ZW5jeSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBEZWx0YSBUaW1lIE1pbGxpc2Vjb25kc1xyXG4gICAgICogQHBhcmFtIERlbHRhVGltZU1zIC0gRGVsdGEgVGltZSBNaWxsaXNlY29uZHNcclxuICAgICAqL1xyXG4gICAgc2V0RnJhbWVEaXNwbGF5RGVsdGFUaW1lKERlbHRhVGltZU1zOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZURpc3BsYXlEZWx0YVRpbWVNcyA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPSBNYXRoLnJvdW5kKERlbHRhVGltZU1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBlbmNvZGVyIHRpbWVzIGFuZCBzZXQgdGhlbVxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzRmllbGRzKCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5FbmNvZGVNcyA9PSBudWxsICYmXHJcbiAgICAgICAgICAgICh0aGlzLlByZUVuY29kZVRpbWVNcyAhPSBudWxsIHx8IHRoaXMuUG9zdEVuY29kZVRpbWVNcyAhPSBudWxsKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBTZXR0aW5nIEVuY29kZSBNcyBcXG4gJHt0aGlzLlBvc3RFbmNvZGVUaW1lTXN9IFxcbiAke3RoaXMuUHJlRW5jb2RlVGltZU1zfWAsXHJcbiAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuRW5jb2RlTXMgPSB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgLSB0aGlzLlByZUVuY29kZVRpbWVNcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5DYXB0dXJlVG9TZW5kTXMgPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAodGhpcy5QcmVDYXB0dXJlVGltZU1zICE9IG51bGwgfHwgdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyAhPSBudWxsKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBTZXR0aW5nIENhcHR1cmVUb1NlbmRNcyBNcyBcXG4gJHt0aGlzLlBvc3RDYXB0dXJlVGltZU1zfSBcXG4gJHt0aGlzLlByZUNhcHR1cmVUaW1lTXN9YCxcclxuICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5DYXB0dXJlVG9TZW5kTXMgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyAtIHRoaXMuUHJlQ2FwdHVyZVRpbWVNcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBtYW5hZ2luZyB0aGUgZnJlZXplIGZyYW1lIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZyZWV6ZUZyYW1lIHtcclxuICAgIHByb3RlY3RlZCByb290RGl2OiBIVE1MRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCByb290RWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBpbWFnZUVsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBmcmVlemVGcmFtZUhlaWdodCA9IDA7XHJcbiAgICBmcmVlemVGcmFtZVdpZHRoID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBhIGZyZWV6ZSBmcmFtZVxyXG4gICAgICogQHBhcmFtIHJvb3REaXYgdGhlIGRpdiB0aGF0IGEgZnJlZXplIGZyYW1lIGVsZW1lbnQgd2lsbCBiZSBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvb3REaXY6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5yb290RGl2ID0gcm9vdERpdjtcclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuaWQgPSAnZnJlZXplRnJhbWUnO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS56SW5kZXggPSAnMjAnO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGUgdGhlIGltYWdlIHBsYWNlIGhvbGRlclxyXG4gICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICAgICAgICAvLyBhcHBlbmQgdGhlIGltYWdlIGludG8gdGhlIHJvb3QgZWxlbWVudCBhbmQgYXBwZW5kIHRoZSBlbGVtZW50IHRvIHRoZSByb290IGRpdlxyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pbWFnZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucm9vdERpdi5hcHBlbmRDaGlsZCh0aGlzLnJvb3RFbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIGVsZW1lbnQgZm9yIHNob3dpbmdcclxuICAgICAqL1xyXG4gICAgc2V0RWxlbWVudEZvclNob3coKSB7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIGVsZW1lbnQgZm9yIGhpZGluZ1xyXG4gICAgICovXHJcbiAgICBzZXRFbGVtZW50Rm9ySGlkZSgpIHtcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGZyZWV6ZSBmcmFtZXMgaW1hZ2Ugc291cmNlXHJcbiAgICAgKiBAcGFyYW0ganBlZyAtIHRoZSBmcmVlemUgZnJhbWUgaW1hZ2UgYXMgYSBieXRlIGFycmF5IGRhdGFcclxuICAgICAqL1xyXG4gICAgdXBkYXRlSW1hZ2VFbGVtZW50U291cmNlKGpwZWc6IFVpbnQ4QXJyYXkpIHtcclxuICAgICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFxyXG4gICAgICAgICAgICBqcGVnLnJlZHVjZSgoZGF0YSwgYnl0ZSkgPT4gZGF0YSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSksICcnKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3JjID0gJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJyArIGJhc2U2NDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZGltZW5zaW9ucyBmb3IgdGhlIGZyZWV6ZSBmcmFtZSBmcm9tIHRoZSBlbGVtZW50IGFuZCByZXNpemUgaXRcclxuICAgICAqL1xyXG4gICAgc2V0RGltZW5zaW9uc0Zyb21FbGVtZW50QW5kUmVzaXplKCkge1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVIZWlnaHQgPSB0aGlzLmltYWdlRWxlbWVudC5uYXR1cmFsSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVXaWR0aCA9IHRoaXMuaW1hZ2VFbGVtZW50Lm5hdHVyYWxXaWR0aDtcclxuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplIGEgZnJlZXplIGZyYW1lIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVzaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZyZWV6ZUZyYW1lV2lkdGggIT09IDAgJiYgdGhpcy5mcmVlemVGcmFtZUhlaWdodCAhPT0gMCkge1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheVdpZHRoID0gMDtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlIZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheVRvcCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBkaXNwbGF5TGVmdCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEFzcGVjdFJhdGlvID1cclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdERpdi5jbGllbnRXaWR0aCAvIHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvQXNwZWN0UmF0aW8gPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZVdpZHRoIC8gdGhpcy5mcmVlemVGcmFtZUhlaWdodDtcclxuICAgICAgICAgICAgaWYgKHBhcmVudEFzcGVjdFJhdGlvIDwgdmlkZW9Bc3BlY3RSYXRpbykge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheVdpZHRoID0gdGhpcy5yb290RGl2LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUhlaWdodCA9IE1hdGguZmxvb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290RGl2LmNsaWVudFdpZHRoIC8gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUb3AgPSBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnJvb3REaXYuY2xpZW50SGVpZ2h0IC0gZGlzcGxheUhlaWdodCkgKiAwLjVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TGVmdCA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5V2lkdGggPSBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQgKiB2aWRlb0FzcGVjdFJhdGlvXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUhlaWdodCA9IHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5VG9wID0gMDtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlMZWZ0ID0gTWF0aC5mbG9vcihcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5yb290RGl2LmNsaWVudFdpZHRoIC0gZGlzcGxheVdpZHRoKSAqIDAuNVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5yb290RGl2Lm9mZnNldFdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLnJvb3REaXYub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5sZWZ0ID0gMCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUudG9wID0gMCArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS53aWR0aCA9IGRpc3BsYXlXaWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS5sZWZ0ID0gZGlzcGxheUxlZnQgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS50b3AgPSBkaXNwbGF5VG9wICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5pbXBvcnQgeyBGcmVlemVGcmFtZSB9IGZyb20gJy4vRnJlZXplRnJhbWUnO1xyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIGNvbnRyb2xsaW5nIGZyZWV6ZSBmcmFtZSBmdW5jdGlvbmFsaXR5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRnJlZXplRnJhbWVDb250cm9sbGVyIHtcclxuICAgIGZyZWV6ZUZyYW1lOiBGcmVlemVGcmFtZTtcclxuICAgIHJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgc2l6ZSA9IDA7XHJcbiAgICBqcGVnOiBVaW50OEFycmF5ID0gdW5kZWZpbmVkO1xyXG4gICAgdmFsaWQgPSBmYWxzZTtcclxuICAgIGZyZWV6ZUZyYW1lRGVsYXkgPSA1MDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBhIGZyZWV6ZSBmcmFtZSBjb250cm9sbGVyXHJcbiAgICAgKiBAcGFyYW0gcm9vdERpdiAtIHRoZSBkaXYgdGhhdCBhIGZyZWV6ZSBmcmFtZSBlbGVtZW50IHdpbGwgYmUgaW5qZWN0ZWQgaW50b1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihyb290RGl2OiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWUgPSBuZXcgRnJlZXplRnJhbWUocm9vdERpdik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHRoZSBmcmVlemUgZnJhbWUgaWYgaXQgaXMgdmFsaWRcclxuICAgICAqL1xyXG4gICAgc2hvd0ZyZWV6ZUZyYW1lKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RWxlbWVudEZvclNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlIHRoZSBmcmVlemUgZnJhbWUgYW5kIHNldCB0aGUgdmFsaWRpdHkgdG8gZmFsc2VcclxuICAgICAqL1xyXG4gICAgaGlkZUZyZWV6ZUZyYW1lKCkge1xyXG4gICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnNldEVsZW1lbnRGb3JIaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGZyZWV6ZSBmcmFtZXMgaW1hZ2Ugc291cmNlIGFuZCBsb2FkIGl0XHJcbiAgICAgKiBAcGFyYW0ganBlZyAtIHRoZSBmcmVlemUgZnJhbWUgaW1hZ2UgYXMgYSBieXRlIGFycmF5IGRhdGFcclxuICAgICAqIEBwYXJhbSBvbkxvYWRDYWxsQmFjayAtIGEgY2FsbCBiYWNrIGZvciBtYW5hZ2luZyBpZiB0aGUgcGxheSBvdmVybGF5IG5lZWRzIHRvIGJlIHNob3duIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVGcmVlemVGcmFtZUFuZFNob3coanBlZzogVWludDhBcnJheSwgb25Mb2FkQ2FsbEJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnVwZGF0ZUltYWdlRWxlbWVudFNvdXJjZShqcGVnKTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLmltYWdlRWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RGltZW5zaW9uc0Zyb21FbGVtZW50QW5kUmVzaXplKCk7XHJcbiAgICAgICAgICAgIG9uTG9hZENhbGxCYWNrKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIG5ldyBmcmVlemUgZnJhbWUgaW1hZ2UgYW5kIHVwZGF0ZSBpdFxyXG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZnJlZXplIGZyYW1lIGltYWdlIGFzIGEgYnl0ZSBhcnJheSBkYXRhXHJcbiAgICAgKiBAcGFyYW0gb25Mb2FkQ2FsbEJhY2sgLSBhIGNhbGwgYmFjayBmb3IgbWFuYWdpbmcgaWYgdGhlIHBsYXkgb3ZlcmxheSBuZWVkcyB0byBiZSBzaG93biBvciBub3RcclxuICAgICAqL1xyXG4gICAgcHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZSh2aWV3OiBVaW50OEFycmF5LCBvbkxvYWRDYWxsQmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIC8vIFJlc2V0IGZyZWV6ZSBmcmFtZSBpZiB3ZSBnb3QgYSBmcmVlemUgZnJhbWUgbWVzc2FnZSBhbmQgd2UgYXJlIG5vdCBcInJlY2VpdmluZ1wiIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMucmVjZWl2aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmpwZWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IHRvdGFsIHNpemUgb2YgZnJlZXplIGZyYW1lIChhY3Jvc3MgYWxsIGNodW5rcylcclxuICAgICAgICB0aGlzLnNpemUgPSBuZXcgRGF0YVZpZXcodmlldy5zbGljZSgxLCA1KS5idWZmZXIpLmdldEludDMyKDAsIHRydWUpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGpwZWcgcGFydCBvZiB0aGUgcGF5bG9hZFxyXG4gICAgICAgIGNvbnN0IGpwZWdCeXRlcyA9IHZpZXcuc2xpY2UoMSArIDQpO1xyXG5cclxuICAgICAgICAvLyBBcHBlbmQgdG8gZXhpc3RpbmcganBlZyB0aGF0IGhvbGRzIHRoZSBmcmVlemUgZnJhbWVcclxuICAgICAgICBpZiAodGhpcy5qcGVnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGpwZWcgPSBuZXcgVWludDhBcnJheSh0aGlzLmpwZWcubGVuZ3RoICsganBlZ0J5dGVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGpwZWcuc2V0KHRoaXMuanBlZywgMCk7XHJcbiAgICAgICAgICAgIGpwZWcuc2V0KGpwZWdCeXRlcywgdGhpcy5qcGVnLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuanBlZyA9IGpwZWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vIGV4aXN0aW5nIGZyZWV6ZSBmcmFtZSBqcGVnLCBtYWtlIG9uZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmpwZWcgPSBqcGVnQnl0ZXM7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgcmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZnJlZXplIGZyYW1lOiAke3RoaXMuanBlZy5sZW5ndGh9LyR7dGhpcy5zaXplfWAsXHJcbiAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGaW5pc2hlZCByZWNlaXZpbmcgZnJlZXplIGZyYW1lLCB3ZSBjYW4gc2hvdyBpdCBub3dcclxuICAgICAgICBpZiAodGhpcy5qcGVnLmxlbmd0aCA9PT0gdGhpcy5zaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGByZWNlaXZlZCBjb21wbGV0ZSBmcmVlemUgZnJhbWUgJHt0aGlzLnNpemV9YCxcclxuICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGcmVlemVGcmFtZUFuZFNob3codGhpcy5qcGVnLCBvbkxvYWRDYWxsQmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdlIHJlY2VpdmVkIG1vcmUgZGF0YSB0aGFuIHRoZSBmcmVlemUgZnJhbWUgcGF5bG9hZCBtZXNzYWdlIGluZGljYXRlICh0aGlzIGlzIGFuIGVycm9yKVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuanBlZy5sZW5ndGggPiB0aGlzLnNpemUpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGByZWNlaXZlZCBiaWdnZXIgZnJlZXplIGZyYW1lIHRoYW4gYWR2ZXJ0aXNlZDogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuanBlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyJztcclxuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XHJcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tICcuL0lUb3VjaENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBNb3VzZUJ1dHRvbiB9IGZyb20gJy4vTW91c2VCdXR0b25zJztcclxuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lclRyYWNrZXIgfSBmcm9tICcuLi9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyJztcclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgZm9yIHRoZSB1c2FnZSBvZiBmYWtlIHRvdWNoIGV2ZW50cyBhbmQgaW1wbGVtZW50cyBJVG91Y2hDb250cm9sbGVyXHJcbiAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciBmb3IgdGhlIERhdGEgY2hhbm5lbFxyXG4gKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IC0gVGhlIHZpZGVvIHBsYXllciBET00gZWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZha2VUb3VjaENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVG91Y2hDb250cm9sbGVyIHtcclxuICAgIGZha2VUb3VjaEZpbmdlcjogRmFrZVRvdWNoRmluZ2VyO1xyXG4gICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyO1xyXG4gICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyO1xyXG4gICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlcjtcclxuICAgIHZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3Q6IERPTVJlY3Q7XHJcblxyXG4gICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICBwcml2YXRlIHRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciAtIFN0cmVhbSBtZXNzYWdlIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgLSBWaWRlbyBlbGVtZW50IGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZUNvbnZlcnRlciAtIEEgY29vcmRpbmF0ZSBjb252ZXJ0ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLFxyXG4gICAgICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcixcclxuICAgICAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IGNvb3JkaW5hdGVDb252ZXJ0ZXI7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaHN0YXJ0ID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaGVuZCA9IChldjogVG91Y2hFdmVudCkgPT4gdGhpcy5vblRvdWNoRW5kKGV2KTtcclxuICAgICAgICBjb25zdCBvbnRvdWNobW92ZSA9IChldjogVG91Y2hFdmVudCkgPT4gdGhpcy5vblRvdWNoTW92ZShldik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb250b3VjaG1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb250b3VjaGVuZClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVyIGFsbCB0b3VjaCBldmVudHNcclxuICAgICAqL1xyXG4gICAgdW5yZWdpc3RlclRvdWNoRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB2aWRlbyBFbGVtZW50IFBhcmVudCBDbGllbnQgUmVjdCBudW1iZXJzIGZvciB0aGlzIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCAtIGEgaHRtbCBFbGVtZW50UGFyZW50Q2xpZW50UmVjdCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgc2V0VmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCh2aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0OiBET01SZWN0KSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0ID0gdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBiZWdpbnNcclxuICAgICAqIEBwYXJhbSB0b3VjaCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIG9uVG91Y2hTdGFydCh0b3VjaDogVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZha2VUb3VjaEZpbmdlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0X3RvdWNoID0gdG91Y2guY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgIHRoaXMuZmFrZVRvdWNoRmluZ2VyID0gbmV3IEZha2VUb3VjaEZpbmdlcihcclxuICAgICAgICAgICAgICAgIGZpcnN0X3RvdWNoLmlkZW50aWZpZXIsXHJcbiAgICAgICAgICAgICAgICBmaXJzdF90b3VjaC5jbGllbnRYIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LmxlZnQsXHJcbiAgICAgICAgICAgICAgICBmaXJzdF90b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LnRvcFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID1cclxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCgnbW91c2VlbnRlcicsIGZpcnN0X3RvdWNoKTtcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIueCxcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXHJcbiAgICAgICAgICAgICAgICBNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgICAgIGNvb3JkLnlcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdWNoLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgZW5kc1xyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoRW5kKHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW3RdO1xyXG4gICAgICAgICAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdGhpcy5mYWtlVG91Y2hGaW5nZXIuaWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPVxyXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QubGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LnRvcDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkID1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh4LCB5KTtcclxuICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgTW91c2VCdXR0b24ubWFpbkJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLnlcclxuICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCgnbW91c2VsZWF2ZScsIHRvdWNoKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT24gYSBNb3ZlIHRvdWNoIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIG9uVG91Y2hNb3ZlKHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LnRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LnRvdWNoZXNbdF07XHJcbiAgICAgICAgICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLmZha2VUb3VjaEZpbmdlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9XHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2guY2xpZW50WCAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IHRvdWNoLmNsaWVudFkgLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QudG9wO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmQgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCAtIHRoaXMuZmFrZVRvdWNoRmluZ2VyLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgLSB0aGlzLmZha2VUb3VjaEZpbmdlci55XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlTW92ZScpKFtcclxuICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLnksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEueCxcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS55XHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnggPSB4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIueSA9IHk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgaW50ZXJmYWNlIGZvciBmaW5nZXIgcG9zaXRpb24gbWFwcGluZ1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZha2VUb3VjaEZpbmdlciB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkIC0gdGhlIGJ1dHRvbiBpZFxyXG4gICAgICogQHBhcmFtIHggLSB0aGUgeCBheGlzIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0geSAtIHRoZSB5IGF4aXMgdmFsdWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJUcmFja2VyIH0gZnJvbSAnLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlcic7XHJcbmltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICcuL0dhbWVwYWRUeXBlcyc7XHJcblxyXG4vKipcclxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBnYW1lcGFkcyBhbmQgY29udHJvbGxlcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHYW1lUGFkQ29udHJvbGxlciB7XHJcbiAgICBjb250cm9sbGVyczogQXJyYXk8Q29udHJvbGxlcj47XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IChjYWxsYmFjazogRnJhbWVSZXF1ZXN0Q2FsbGJhY2spID0+IG51bWJlcjtcclxuICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcclxuXHJcbiAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgIHByaXZhdGUgZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IEV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcblxyXG4gICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gKFxyXG4gICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gICAgICAgICkuYmluZCh3aW5kb3cpO1xyXG4gICAgICAgIGNvbnN0IGJyb3dzZXJXaW5kb3cgPSB3aW5kb3cgYXMgV2luZG93O1xyXG4gICAgICAgIGlmICgnR2FtZXBhZEV2ZW50JyBpbiBicm93c2VyV2luZG93KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uR2FtZVBhZENvbm5lY3RlZCA9IChldjogR2FtZXBhZEV2ZW50KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lUGFkQ29ubmVjdEhhbmRsZXIoZXYpO1xyXG4gICAgICAgICAgICBjb25zdCBvbkdhbWVQYWREaXNjb25uZWN0ZWQgPSAoZXY6IEdhbWVwYWRFdmVudCkgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGV2KTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRjb25uZWN0ZWQnLCBvbkdhbWVQYWRDb25uZWN0ZWQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZ2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uR2FtZVBhZERpc2Nvbm5lY3RlZCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgICAgICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdnYW1lcGFkY29ubmVjdGVkJywgb25HYW1lUGFkQ29ubmVjdGVkKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICAgICAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZ2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uR2FtZVBhZERpc2Nvbm5lY3RlZClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCdXZWJLaXRHYW1lcGFkRXZlbnQnIGluIGJyb3dzZXJXaW5kb3cpIHtcclxuICAgICAgICAgICAgY29uc3Qgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkID0gKGV2OiBHYW1lcGFkRXZlbnQpID0+IHRoaXMuZ2FtZVBhZENvbm5lY3RIYW5kbGVyKGV2KTtcclxuICAgICAgICAgICAgY29uc3Qgb25XZWJraXRHYW1lUGFkRGlzY29ubmVjdGVkID0gKGV2OiBHYW1lcGFkRXZlbnQpID0+IHRoaXMuZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGV2KTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGdhbWVwYWRjb25uZWN0ZWQnLCBvbldlYmtpdEdhbWVQYWRDb25uZWN0ZWQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgICAgICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRnYW1lcGFkY29ubmVjdGVkJywgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICAgICAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIGlmIChuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBnYW1lcGFkIG9mIG5hdmlnYXRvci5nZXRHYW1lcGFkcygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZXBhZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVBhZENvbm5lY3RIYW5kbGVyKG5ldyBHYW1lcGFkRXZlbnQoJ2dhbWVwYWRjb25uZWN0ZWQnLCB7IGdhbWVwYWQgfSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5yZWdpc3RlcnMgYWxsIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJHYW1lUGFkRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcclxuICAgICAgICBmb3IoY29uc3QgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgIGlmKGNvbnRyb2xsZXIuaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkdhbWVwYWREaXNjb25uZWN0ZWQoY29udHJvbGxlci5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkQ29ubmVjdGVkID0gKCkgPT4geyAvKiAqLyB9O1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkRGlzY29ubmVjdGVkID0gKCkgPT4geyAvKiAqLyB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGdhbWVQYWRFdmVudCAtIHRoZSBhY3RpdmF0aW5nIGdhbWVwYWQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgZ2FtZVBhZENvbm5lY3RIYW5kbGVyKGdhbWVQYWRFdmVudDogR2FtZXBhZEV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnR2FtZXBhZCBjb25uZWN0IGhhbmRsZXInLCA2KTtcclxuICAgICAgICBjb25zdCBnYW1lcGFkID0gZ2FtZVBhZEV2ZW50LmdhbWVwYWQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHRlbXA6IENvbnRyb2xsZXIgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogZ2FtZXBhZCxcclxuICAgICAgICAgICAgcHJldlN0YXRlOiBnYW1lcGFkLFxyXG4gICAgICAgICAgICBpZDogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycy5wdXNoKHRlbXApO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNbZ2FtZXBhZC5pbmRleF0uY3VycmVudFN0YXRlID0gZ2FtZXBhZDtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWQuaW5kZXhdLnByZXZTdGF0ZSA9IGdhbWVwYWQ7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ2dhbWVwYWQ6ICcgKyBnYW1lcGFkLmlkICsgJyBjb25uZWN0ZWQnLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudXBkYXRlU3RhdHVzKCkpO1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkQ29ubmVjdGVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNjb25uZWN0cyB0aGUgZ2FtZXBhZCBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gZ2FtZVBhZEV2ZW50IC0gdGhlIGFjdGl2YXRpbmcgZ2FtZXBhZCBldmVudFxyXG4gICAgICovXHJcbiAgICBnYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50OiBHYW1lcGFkRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdHYW1lcGFkIGRpc2Nvbm5lY3QgaGFuZGxlcicsIDYpO1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdnYW1lcGFkOiAnICsgZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaWQgKyAnIGRpc2Nvbm5lY3RlZCcsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZWRDb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyc1tnYW1lUGFkRXZlbnQuZ2FtZXBhZC5pbmRleF07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udHJvbGxlcnNbZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSB0aGlzLmNvbnRyb2xsZXJzLmZpbHRlcihcclxuICAgICAgICAgICAgKGNvbnRyb2xsZXIpID0+IGNvbnRyb2xsZXIgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5vbkdhbWVwYWREaXNjb25uZWN0ZWQoZGVsZXRlZENvbnRyb2xsZXIuaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NhbiBmb3IgY29ubmVjdGVkIGdhbWVwYWRzXHJcbiAgICAgKi9cclxuICAgIHNjYW5HYW1lUGFkcygpIHtcclxuICAgICAgICBjb25zdCBnYW1lcGFkcyA9IG5hdmlnYXRvci5nZXRHYW1lcGFkc1xyXG4gICAgICAgICAgICA/IG5hdmlnYXRvci5nZXRHYW1lcGFkcygpXHJcbiAgICAgICAgICAgIDogbmF2aWdhdG9yLndlYmtpdEdldEdhbWVwYWRzXHJcbiAgICAgICAgICAgID8gbmF2aWdhdG9yLndlYmtpdEdldEdhbWVwYWRzKClcclxuICAgICAgICAgICAgOiBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdhbWVwYWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChnYW1lcGFkc1tpXSAmJiBnYW1lcGFkc1tpXS5pbmRleCBpbiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWRzW2ldLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXR1cyBvZiB0aGUgZ2FtZXBhZCBhbmQgc2VuZHMgdGhlIGlucHV0c1xyXG4gICAgICovXHJcbiAgICB1cGRhdGVTdGF0dXMoKSB7XHJcbiAgICAgICAgdGhpcy5zY2FuR2FtZVBhZHMoKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIG11bHRpcGxlIGNvbnRyb2xsZXJzIGluIHRoZSBjYXNlIHRoZSBtdWx0aXBsZSBnYW1lcGFkcyBhcmUgY29ubmVjdGVkXHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cm9sbGVyIG9mIHRoaXMuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCByZWNlaXZlZCBhbiBpZCAocG9zc2libGUgaWYgdXNpbmcgYW4gb2xkZXIgdmVyc2lvbiBvZiBVRSksIHJldHVybiB0byBvcmlnaW5hbCBmdW5jdGlvbmFsaXR5XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXJJbmRleCA9IChjb250cm9sbGVyLmlkID09PSB1bmRlZmluZWQpID8gdGhpcy5jb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpIDogY29udHJvbGxlci5pZDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gY29udHJvbGxlci5jdXJyZW50U3RhdGU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlci5jdXJyZW50U3RhdGUuYnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJ1dHRvbiA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlLmJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0J1dHRvbiA9IGNvbnRyb2xsZXIucHJldlN0YXRlLmJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJ1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlc3NcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBnYW1lcGFkTGF5b3V0LkxlZnRUcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICBVRXMgbGVmdCBhbmFsb2cgaGFzIGEgYnV0dG9uIGluZGV4IG9mIDVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEFuYWxvZycpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnV0dG9uLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSBnYW1lcGFkTGF5b3V0LlJpZ2h0VHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgVUVzIHJpZ2h0IGFuYWxvZyBoYXMgYSBidXR0b24gaW5kZXggb2YgNlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCdXR0b24udmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEJ1dHRvblByZXNzZWQnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNCdXR0b24ucHJlc3NlZCA/IDEgOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWN1cnJlbnRCdXR0b24ucHJlc3NlZCAmJiBwcmV2aW91c0J1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVsZWFzZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGdhbWVwYWRMYXlvdXQuTGVmdFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFVFcyBsZWZ0IGFuYWxvZyBoYXMgYSBidXR0b24gaW5kZXggb2YgNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IGdhbWVwYWRMYXlvdXQuUmlnaHRUcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICBVRXMgcmlnaHQgYW5hbG9nIGhhcyBhIGJ1dHRvbiBpbmRleCBvZiA2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQnV0dG9uUmVsZWFzZWQnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgZ2FtZXBhZCBheGVzICh3ZSB3aWxsIGluY3JlbWVudCBpbiBsb3RzIG9mIDIgYXMgdGhlcmUgaXMgMiBheGVzIHBlciBzdGljaylcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U3RhdGUuYXhlcy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgLy8gSG9yaXpvbnRhbCBheGVzIGFyZSBldmVuIG51bWJlcmVkXHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gcGFyc2VGbG9hdChjdXJyZW50U3RhdGUuYXhlc1tpXS50b0ZpeGVkKDQpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCBheGVzIGFyZSBvZGQgbnVtYmVyZWRcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9nYW1lcGFkLyNyZW1hcHBpbmcgR2FtZXBhZCBicm93c2VyIHNpZGUgc3RhbmRhcmQgbWFwcGluZyBoYXMgcG9zaXRpdmUgZG93biwgbmVnYXRpdmUgdXAuIFRoaXMgaXMgZG93bnJpZ2h0IGRpc2d1c3RpbmcuIFNvIHdlIGZpeCBpdC5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSAtcGFyc2VGbG9hdChjdXJyZW50U3RhdGUuYXhlc1tpICsgMV0udG9GaXhlZCg0KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVUUncyBhbmFsb2cgYXhlcyBmb2xsb3cgdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGJyb3dzZXJzLCBidXQgc3RhcnQgYXQgaW5kZXggMSBzbyB3ZSB3aWxsIG9mZnNldCBhcyBzdWNoXHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpICsgMSxcclxuICAgICAgICAgICAgICAgICAgICB4XHJcbiAgICAgICAgICAgICAgICBdKTsgLy8gSG9yaXpvbnRhbCBheGVzLCBvbmx5IG9mZnNldCBieSAxXHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpICsgMixcclxuICAgICAgICAgICAgICAgICAgICB5XHJcbiAgICAgICAgICAgICAgICBdKTsgLy8gVmVydGljYWwgYXhlcywgb2Zmc2V0IGJ5IHR3byAoMSB0byBtYXRjaCBVRXMgYXhlcyBjb252ZW50aW9uIGFuZCB0aGVuIGFub3RoZXIgMSBmb3IgdGhlIHZlcnRpY2FsIGF4ZXMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1tjb250cm9sbGVySW5kZXhdLnByZXZTdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZVN0YXR1cygpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25HYW1lcGFkUmVzcG9uc2VSZWNlaXZlZChnYW1lcGFkSWQ6IG51bWJlcikge1xyXG4gICAgICAgIGZvcihjb25zdCBjb250cm9sbGVyIG9mIHRoaXMuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgaWYoY29udHJvbGxlci5pZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmlkID0gZ2FtZXBhZElkO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB0byBzZW5kIHRoZSBnYW1lcGFkY29ubmVjdGVkIG1lc3NhZ2UgdG8gdGhlIGFwcGxpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIG9uR2FtZXBhZENvbm5lY3RlZCgpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IHRvIHNlbmQgdGhlIGdhbWVwYWRkaXNjb25uZWN0ZWQgbWVzc2FnZSB0byB0aGUgYXBwbGljYXRpb25cclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25HYW1lcGFkRGlzY29ubmVjdGVkKGNvbnRyb2xsZXJJZHg6IG51bWJlcikge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBBZGRpdGlvbmFsIHR5cGVzIGZvciBXaW5kb3cgYW5kIE5hdmlnYXRvclxyXG4gKi9cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgbW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrOiBGcmFtZVJlcXVlc3RDYWxsYmFjayk6IG51bWJlcjtcclxuICAgICAgICB3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2s6IEZyYW1lUmVxdWVzdENhbGxiYWNrKTogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBOYXZpZ2F0b3Ige1xyXG4gICAgICAgIHdlYmtpdEdldEdhbWVwYWRzKCk6IEdhbWVwYWRbXTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdhbWVwYWQgbGF5b3V0IGNvZGVzIGVudW1cclxuICovXHJcbmV4cG9ydCBlbnVtIGdhbWVwYWRMYXlvdXQge1xyXG4gICAgUmlnaHRDbHVzdGVyQm90dG9tQnV0dG9uID0gMCxcclxuICAgIFJpZ2h0Q2x1c3RlclJpZ2h0QnV0dG9uID0gMSxcclxuICAgIFJpZ2h0Q2x1c3RlckxlZnRCdXR0b24gPSAyLFxyXG4gICAgUmlnaHRDbHVzdGVyVG9wQnV0dG9uID0gMyxcclxuICAgIExlZnRTaG91bGRlciA9IDQsXHJcbiAgICBSaWdodFNob3VsZGVyID0gNSxcclxuICAgIExlZnRUcmlnZ2VyID0gNixcclxuICAgIFJpZ2h0VHJpZ2dlciA9IDcsXHJcbiAgICBTZWxlY3RPckJhY2sgPSA4LFxyXG4gICAgU3RhcnRPckZvcndhcmQgPSA5LFxyXG4gICAgTGVmdEFuYWxvZ1ByZXNzID0gMTAsXHJcbiAgICBSaWdodEFuYWxvZ1ByZXNzID0gMTEsXHJcbiAgICBMZWZ0Q2x1c3RlclRvcEJ1dHRvbiA9IDEyLFxyXG4gICAgTGVmdENsdXN0ZXJCb3R0b21CdXR0b24gPSAxMyxcclxuICAgIExlZnRDbHVzdGVyTGVmdEJ1dHRvbiA9IDE0LFxyXG4gICAgTGVmdENsdXN0ZXJSaWdodEJ1dHRvbiA9IDE1LFxyXG4gICAgQ2VudHJlQnV0dG9uID0gMTYsXHJcbiAgICAvLyBBeGVzXHJcbiAgICBMZWZ0U3RpY2tIb3Jpem9udGFsID0gMCxcclxuICAgIExlZnRTdGlja1ZlcnRpY2FsID0gMSxcclxuICAgIFJpZ2h0U3RpY2tIb3Jpem9udGFsID0gMixcclxuICAgIFJpZ2h0U3RpY2tWZXJ0aWNhbCA9IDNcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgTW91c2VDb250cm9sbGVyIH0gZnJvbSAnLi9Nb3VzZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgSU1vdXNlRXZlbnRzIH0gZnJvbSAnLi9JTW91c2VFdmVudHMnO1xyXG5cclxuLyoqXHJcbiAqIFZpZGVvIFBsYXllciBtb3VzZSBIb3ZlciBoYW5kbGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSG92ZXJpbmdNb3VzZUV2ZW50cyBpbXBsZW1lbnRzIElNb3VzZUV2ZW50cyB7XHJcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBDb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBtb3VzZUNvbnRyb2xsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJNb3VzZUV2ZW50cygpOiB2b2lkIHtcclxuICAgICAgICAvLyBlbXB0eSBmb3IgSG92ZXJpbmdNb3VzZUV2ZW50cyBpbXBsZW1lbnRhdGlvblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBtb3ZlIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgdXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNb3VzZU1vdmUnLCA2KTtcclxuICAgICAgICBjb25zdCBjb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcclxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WCxcclxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGRlbHRhID1cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZChcclxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQubW92ZW1lbnRYLFxyXG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5tb3ZlbWVudFlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICBjb29yZC55LFxyXG4gICAgICAgICAgICBkZWx0YS54LFxyXG4gICAgICAgICAgICBkZWx0YS55XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBEb3duIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VEb3duKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnb25Nb3VzZSBEb3duJywgNik7XHJcbiAgICAgICAgY29uc3QgY29vcmQgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFgsXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3duJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgVXAgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZVVwKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29vcmQgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFgsXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VVcCcpKFtcclxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b24sXHJcbiAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgIGNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIGNvbnRleHQgbWVudSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUNvbnRleHRNZW51KG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29vcmQgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFgsXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VVcCcpKFtcclxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b24sXHJcbiAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgIGNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIHdoZWVsIGV2ZW50LCBzZW5kcyB0aGUgbW91c2Ugd2hlZWwgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB3aGVlbEV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VXaGVlbCh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvb3JkID1cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxyXG4gICAgICAgICAgICAgICAgd2hlZWxFdmVudC5vZmZzZXRYLFxyXG4gICAgICAgICAgICAgICAgd2hlZWxFdmVudC5vZmZzZXRZXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlV2hlZWwnKShbXHJcbiAgICAgICAgICAgIHdoZWVsRXZlbnQud2hlZWxEZWx0YSxcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHdoZWVsRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgZG91YmxlIGNsaWNrIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VEb3VibGUobW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcclxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WCxcclxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvdWJsZScpKFtcclxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b24sXHJcbiAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgIGNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIucHJlc3NNb3VzZUJ1dHRvbnMoXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9ucyxcclxuICAgICAgICAgICAgbW91c2VFdmVudC5vZmZzZXRYLFxyXG4gICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSByZWxlYXNlIG1vdXNlIGJ1dHRvbnMgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIucmVsZWFzZU1vdXNlQnV0dG9ucyhcclxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b25zLFxyXG4gICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFgsXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IEZha2VUb3VjaENvbnRyb2xsZXIgfSBmcm9tICcuL0Zha2VUb3VjaENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBLZXlib2FyZENvbnRyb2xsZXIgfSBmcm9tICcuL0tleWJvYXJkQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gJy4vTW91c2VDb250cm9sbGVyJztcclxuaW1wb3J0IHsgVG91Y2hDb250cm9sbGVyIH0gZnJvbSAnLi9Ub3VjaENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBHYW1lUGFkQ29udHJvbGxlciB9IGZyb20gJy4vR2FtZXBhZENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDb25maWcsIENvbnRyb2xTY2hlbWVUeXBlIH0gZnJvbSAnLi4vQ29uZmlnL0NvbmZpZyc7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5pbXBvcnQgeyBDb29yZGluYXRlQ29udmVydGVyIH0gZnJvbSAnLi4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyJztcclxuaW1wb3J0IHsgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXInO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciBtYWtpbmcgYW5kIHNldHRpbmcgdXAgaW5wdXQgY2xhc3MgdHlwZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbnB1dENsYXNzZXNGYWN0b3J5IHtcclxuICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcclxuICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcjtcclxuICAgIGNvb3JkaW5hdGVDb252ZXJ0ZXI6IENvb3JkaW5hdGVDb252ZXJ0ZXI7XHJcbiAgICBhY3RpdmVLZXlzOiBBY3RpdmVLZXlzID0gbmV3IEFjdGl2ZUtleXMoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciAtIFN0cmVhbSBtZXNzYWdlIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgLSBWaWRlbyBQbGF5ZXIgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBjb29yZGluYXRlQ29udmVydGVyIC0gQSBjb29yZGluYXRlQ29udmVydGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcclxuICAgICAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXIsXHJcbiAgICAgICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlclxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGJyb3dzZXIga2V5IGV2ZW50cy5cclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJLZXlCb2FyZChjb25maWc6IENvbmZpZykge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlZ2lzdGVyIEtleWJvYXJkIEV2ZW50cycsIDcpO1xyXG4gICAgICAgIGNvbnN0IGtleWJvYXJkQ29udHJvbGxlciA9IG5ldyBLZXlib2FyZENvbnRyb2xsZXIoXHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsXHJcbiAgICAgICAgICAgIGNvbmZpZyxcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVLZXlzXHJcbiAgICAgICAgKTtcclxuICAgICAgICBrZXlib2FyZENvbnRyb2xsZXIucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpO1xyXG4gICAgICAgIHJldHVybiBrZXlib2FyZENvbnRyb2xsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZWdpc3RlciBtb3VzZSBldmVudHMgYmFzZWQgb24gYSBjb250cm9sIHR5cGVcclxuICAgICAqIEBwYXJhbSBjb250cm9sU2NoZW1lIC0gaWYgdGhlIG1vdXNlIGlzIGVpdGhlciBob3ZlcmluZyBvciBsb2NrZWRcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJNb3VzZShjb250cm9sU2NoZW1lOiBDb250cm9sU2NoZW1lVHlwZSkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlZ2lzdGVyIE1vdXNlIEV2ZW50cycsIDcpO1xyXG4gICAgICAgIGNvbnN0IG1vdXNlQ29udHJvbGxlciA9IG5ldyBNb3VzZUNvbnRyb2xsZXIoXHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlcixcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVLZXlzXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChjb250cm9sU2NoZW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U6XHJcbiAgICAgICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIucmVnaXN0ZXJMb2NrZWRNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFNjaGVtZVR5cGUuSG92ZXJpbmdNb3VzZTpcclxuICAgICAgICAgICAgICAgIG1vdXNlQ29udHJvbGxlci5yZWdpc3RlckhvdmVyaW5nTW91c2VFdmVudHMobW91c2VDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkluZm8oXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAndW5rbm93biBDb250cm9sIFNjaGVtZSBUeXBlIERlZmF1bHRpbmcgdG8gTG9ja2VkIE1vdXNlIEV2ZW50cydcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIucmVnaXN0ZXJMb2NrZWRNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW91c2VDb250cm9sbGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmVnaXN0ZXIgdG91Y2ggZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0gZmFrZU1vdXNlVG91Y2ggLSB0aGUgZmFrZWQgbW91c2UgdG91Y2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJUb3VjaChcclxuICAgICAgICBmYWtlTW91c2VUb3VjaDogYm9vbGVhbixcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0OiBET01SZWN0XHJcbiAgICApIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlcmluZyBUb3VjaCcsIDYpO1xyXG4gICAgICAgIGlmIChmYWtlTW91c2VUb3VjaCkge1xyXG4gICAgICAgICAgICBjb25zdCBmYWtlVG91Y2hDb250cm9sbGVyID0gbmV3IEZha2VUb3VjaENvbnRyb2xsZXIoXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLFxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlcixcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlclxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBmYWtlVG91Y2hDb250cm9sbGVyLnNldFZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QoXHJcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWtlVG91Y2hDb250cm9sbGVyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVG91Y2hDb250cm9sbGVyKFxyXG4gICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcixcclxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZWdpc3RlcnMgYSBnYW1lcGFkXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyR2FtZVBhZCgpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlciBHYW1lIFBhZCcsIDcpO1xyXG4gICAgICAgIGNvbnN0IGdhbWVQYWRDb250cm9sbGVyID0gbmV3IEdhbWVQYWRDb250cm9sbGVyKFxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gZ2FtZVBhZENvbnRyb2xsZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIHRoYXQga2VlcHMgdHJhY2sgb2YgY3VycmVudCBhY3RpdmUga2V5c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFjdGl2ZUtleXMge1xyXG4gICAgYWN0aXZlS2V5czogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgYXJyYXkgb2YgYWN0aXZlIGtleXNcclxuICAgICAqIEByZXR1cm5zIC0gYW4gYXJyYXkgb2YgYWN0aXZlIGtleXNcclxuICAgICAqL1xyXG4gICAgZ2V0QWN0aXZlS2V5cygpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlS2V5cztcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgU3BlY2lhbEtleUNvZGVzIH0gZnJvbSAnLi9TcGVjaWFsS2V5Q29kZXMnO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgQWN0aXZlS2V5cyB9IGZyb20gJy4vSW5wdXRDbGFzc2VzRmFjdG9yeSc7XHJcbmltcG9ydCB7IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDb25maWcsIEZsYWdzIH0gZnJvbSAnLi4vQ29uZmlnL0NvbmZpZyc7XHJcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJUcmFja2VyIH0gZnJvbSAnLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlcic7XHJcblxyXG5pbnRlcmZhY2UgSUNvZGVUb0tleUNvZGUge1xyXG4gICAgW2tleTogc3RyaW5nXTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgS2V5Ym9hcmQgSW5wdXRzIGZvciB0aGUgZG9jdW1lbnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBLZXlib2FyZENvbnRyb2xsZXIge1xyXG4gICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyO1xyXG4gICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzO1xyXG4gICAgY29uZmlnOiBDb25maWc7XHJcblxyXG4gICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICBwcml2YXRlIGtleWJvYXJkRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuXHJcbiAgICAvKlxyXG4gICAgICogTmV3IGJyb3dzZXIgQVBJcyBoYXZlIG1vdmVkIGF3YXkgZnJvbSBLZXlib2FyZEV2ZW50LmtleUNvZGUgdG8gS2V5Ym9hcmRFdmVudC5Db2RlLlxyXG4gICAgICogRm9yIGRldGFpbHMgc2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlI2NvbnN0YW50c19mb3Jfa2V5Y29kZV92YWx1ZVxyXG4gICAgICogV2Ugc3RpbGwgdXNlIG9sZCBLZXlib2FyZEV2ZW50LmtleUNvZGUgaW50ZWdlcnMgaW4gdGhlIFVFIEMrKyBzaWRlLCBzbyB3ZSBuZWVkIGEgd2F5IHRvIG1hcCB0aGUgbmV3XHJcbiAgICAgKiBzdHJpbmctYmFzZWQgS2V5Ym9hcmRFdmVudC5Db2RlIHRvIHRoZSBvbGQgaW50ZWdlcnMuXHJcbiAgICAgKi9cclxuICAgIENvZGVUb0tleUNvZGU6IElDb2RlVG9LZXlDb2RlID0ge1xyXG4gICAgICAgIEVzY2FwZTogMjcsXHJcbiAgICAgICAgRGlnaXQwOiA0OCxcclxuICAgICAgICBEaWdpdDE6IDQ5LFxyXG4gICAgICAgIERpZ2l0MjogNTAsXHJcbiAgICAgICAgRGlnaXQzOiA1MSxcclxuICAgICAgICBEaWdpdDQ6IDUyLFxyXG4gICAgICAgIERpZ2l0NTogNTMsXHJcbiAgICAgICAgRGlnaXQ2OiA1NCxcclxuICAgICAgICBEaWdpdDc6IDU1LFxyXG4gICAgICAgIERpZ2l0ODogNTYsXHJcbiAgICAgICAgRGlnaXQ5OiA1NyxcclxuICAgICAgICBNaW51czogMTczLFxyXG4gICAgICAgIEVxdWFsOiAxODcsXHJcbiAgICAgICAgQmFja3NwYWNlOiA4LFxyXG4gICAgICAgIFRhYjogOSxcclxuICAgICAgICBLZXlROiA4MSxcclxuICAgICAgICBLZXlXOiA4NyxcclxuICAgICAgICBLZXlFOiA2OSxcclxuICAgICAgICBLZXlSOiA4MixcclxuICAgICAgICBLZXlUOiA4NCxcclxuICAgICAgICBLZXlZOiA4OSxcclxuICAgICAgICBLZXlVOiA4NSxcclxuICAgICAgICBLZXlJOiA3MyxcclxuICAgICAgICBLZXlPOiA3OSxcclxuICAgICAgICBLZXlQOiA4MCxcclxuICAgICAgICBCcmFja2V0TGVmdDogMjE5LFxyXG4gICAgICAgIEJyYWNrZXRSaWdodDogMjIxLFxyXG4gICAgICAgIEVudGVyOiAxMyxcclxuICAgICAgICBDb250cm9sTGVmdDogMTcsXHJcbiAgICAgICAgS2V5QTogNjUsXHJcbiAgICAgICAgS2V5UzogODMsXHJcbiAgICAgICAgS2V5RDogNjgsXHJcbiAgICAgICAgS2V5RjogNzAsXHJcbiAgICAgICAgS2V5RzogNzEsXHJcbiAgICAgICAgS2V5SDogNzIsXHJcbiAgICAgICAgS2V5SjogNzQsXHJcbiAgICAgICAgS2V5SzogNzUsXHJcbiAgICAgICAgS2V5TDogNzYsXHJcbiAgICAgICAgU2VtaWNvbG9uOiAxODYsXHJcbiAgICAgICAgUXVvdGU6IDIyMixcclxuICAgICAgICBCYWNrcXVvdGU6IDE5MixcclxuICAgICAgICBTaGlmdExlZnQ6IDE2LFxyXG4gICAgICAgIEJhY2tzbGFzaDogMjIwLFxyXG4gICAgICAgIEtleVo6IDkwLFxyXG4gICAgICAgIEtleVg6IDg4LFxyXG4gICAgICAgIEtleUM6IDY3LFxyXG4gICAgICAgIEtleVY6IDg2LFxyXG4gICAgICAgIEtleUI6IDY2LFxyXG4gICAgICAgIEtleU46IDc4LFxyXG4gICAgICAgIEtleU06IDc3LFxyXG4gICAgICAgIENvbW1hOiAxODgsXHJcbiAgICAgICAgUGVyaW9kOiAxOTAsXHJcbiAgICAgICAgU2xhc2g6IDE5MSxcclxuICAgICAgICBTaGlmdFJpZ2h0OiAyNTMsXHJcbiAgICAgICAgQWx0TGVmdDogMTgsXHJcbiAgICAgICAgU3BhY2U6IDMyLFxyXG4gICAgICAgIENhcHNMb2NrOiAyMCxcclxuICAgICAgICBGMTogMTEyLFxyXG4gICAgICAgIEYyOiAxMTMsXHJcbiAgICAgICAgRjM6IDExNCxcclxuICAgICAgICBGNDogMTE1LFxyXG4gICAgICAgIEY1OiAxMTYsXHJcbiAgICAgICAgRjY6IDExNyxcclxuICAgICAgICBGNzogMTE4LFxyXG4gICAgICAgIEY4OiAxMTksXHJcbiAgICAgICAgRjk6IDEyMCxcclxuICAgICAgICBGMTA6IDEyMSxcclxuICAgICAgICBGMTE6IDEyMixcclxuICAgICAgICBGMTI6IDEyMyxcclxuICAgICAgICBQYXVzZTogMTksXHJcbiAgICAgICAgU2Nyb2xsTG9jazogMTQ1LFxyXG4gICAgICAgIE51bXBhZERpdmlkZTogMTExLFxyXG4gICAgICAgIE51bXBhZE11bHRpcGx5OiAxMDYsXHJcbiAgICAgICAgTnVtcGFkU3VidHJhY3Q6IDEwOSxcclxuICAgICAgICBOdW1wYWRBZGQ6IDEwNyxcclxuICAgICAgICBOdW1wYWREZWNpbWFsOiAxMTAsXHJcbiAgICAgICAgTnVtcGFkOTogMTA1LFxyXG4gICAgICAgIE51bXBhZDg6IDEwNCxcclxuICAgICAgICBOdW1wYWQ3OiAxMDMsXHJcbiAgICAgICAgTnVtcGFkNjogMTAyLFxyXG4gICAgICAgIE51bXBhZDU6IDEwMSxcclxuICAgICAgICBOdW1wYWQ0OiAxMDAsXHJcbiAgICAgICAgTnVtcGFkMzogOTksXHJcbiAgICAgICAgTnVtcGFkMjogOTgsXHJcbiAgICAgICAgTnVtcGFkMTogOTcsXHJcbiAgICAgICAgTnVtcGFkMDogOTYsXHJcbiAgICAgICAgTnVtTG9jazogMTQ0LFxyXG4gICAgICAgIENvbnRyb2xSaWdodDogMjU0LFxyXG4gICAgICAgIEFsdFJpZ2h0OiAyNTUsXHJcbiAgICAgICAgSG9tZTogMzYsXHJcbiAgICAgICAgRW5kOiAzNSxcclxuICAgICAgICBBcnJvd1VwOiAzOCxcclxuICAgICAgICBBcnJvd0xlZnQ6IDM3LFxyXG4gICAgICAgIEFycm93UmlnaHQ6IDM5LFxyXG4gICAgICAgIEFycm93RG93bjogNDAsXHJcbiAgICAgICAgUGFnZVVwOiAzMyxcclxuICAgICAgICBQYWdlRG93bjogMzQsXHJcbiAgICAgICAgSW5zZXJ0OiA0NSxcclxuICAgICAgICBEZWxldGU6IDQ2LFxyXG4gICAgICAgIENvbnRleHRNZW51OiA5M1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciBTdHJlYW0gbWVzc2FnZSBwcm92aWRlciBjbGFzcyBvYmplY3RcclxuICAgICAqIEBwYXJhbSBjb25maWcgVGhlIGFwcGxpY2F0aW9ucyBjb25maWd1cmF0aW9uLiBXZSdyZSBpbnRlcmVzdGVkIGluIHRoZSBzdXBwcmVzcyBicm93c2VyIGtleXMgb3B0aW9uXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlS2V5c1Byb3ZpZGVyIEFjdGl2ZSBrZXlzIHByb3ZpZGVyIGNsYXNzIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgY29uZmlnOiBDb25maWcsXHJcbiAgICAgICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIgPSBhY3RpdmVLZXlzUHJvdmlkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgZG9jdW1lbnQga2V5Ym9hcmQgZXZlbnRzIHdpdGggdGhlIGNvbnRyb2xsZXJcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpIHtcclxuICAgICAgICBjb25zdCBrZXlEb3duSGFuZGxlciA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5oYW5kbGVPbktleURvd24oZXYpO1xyXG4gICAgICAgIGNvbnN0IGtleVVwSGFuZGxlciA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5oYW5kbGVPbktleVVwKGV2KTtcclxuICAgICAgICBjb25zdCBrZXlQcmVzc0hhbmRsZXIgPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHRoaXMuaGFuZGxlT25LZXlQcmVzcyhldik7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwga2V5VXBIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgLy9UaGlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYXMgYXQgSnVuIDEzIDIwMjFcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwga2V5UHJlc3NIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwga2V5RG93bkhhbmRsZXIpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmtleWJvYXJkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxyXG4gICAgICAgICAgICAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwga2V5VXBIYW5kbGVyKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGtleVByZXNzSGFuZGxlcilcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5yZWdpc3RlcnMgZG9jdW1lbnQga2V5Ym9hcmQgZXZlbnRzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLmtleWJvYXJkRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBXaGVuIGEga2V5IGlzIGRvd25cclxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5Ym9hcmQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25LZXlEb3duKGtleWJvYXJkRXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBrZXlDb2RlID0gdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpO1xyXG4gICAgICAgIGlmICgha2V5Q29kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBga2V5IGRvd24gJHtrZXlDb2RlfSwgcmVwZWF0ID0gJHtrZXlib2FyZEV2ZW50LnJlcGVhdH1gLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlEb3duJykoW1xyXG4gICAgICAgICAgICB0aGlzLmdldEtleWNvZGUoa2V5Ym9hcmRFdmVudCksXHJcbiAgICAgICAgICAgIGtleWJvYXJkRXZlbnQucmVwZWF0ID8gMSA6IDBcclxuICAgICAgICBdKTtcclxuICAgICAgICBjb25zdCBhY3RpdmVLZXlzID0gdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIuZ2V0QWN0aXZlS2V5cygpO1xyXG4gICAgICAgIGFjdGl2ZUtleXMucHVzaChrZXlDb2RlKTtcclxuICAgICAgICAvLyBCYWNrc3BhY2UgaXMgbm90IGNvbnNpZGVyZWQgYSBrZXlwcmVzcyBpbiBKYXZhU2NyaXB0IGJ1dCB3ZSBuZWVkIGl0XHJcbiAgICAgICAgLy8gdG8gYmUgc28gY2hhcmFjdGVycyBtYXkgYmUgZGVsZXRlZCBpbiBhIFVFIHRleHQgZW50cnkgZmllbGQuXHJcbiAgICAgICAgaWYgKGtleUNvZGUgPT09IFNwZWNpYWxLZXlDb2Rlcy5iYWNrU3BhY2UpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgICAgIG5ldyBLZXlib2FyZEV2ZW50KCdrZXlwcmVzcycsIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZTogU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGhhbmRsZXMgd2hlbiBhIGtleSBpcyB1cFxyXG4gICAgICogQHBhcmFtIGtleWJvYXJkRXZlbnQgLSBLZXlib2FyZCBldmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbktleVVwKGtleWJvYXJkRXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBrZXlDb2RlID0gdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpO1xyXG4gICAgICAgIGlmICgha2V5Q29kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBrZXkgdXAgJHtrZXlDb2RlfWAsIDYpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0tleVVwJykoW1xyXG4gICAgICAgICAgICBrZXlDb2RlLFxyXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnJlcGVhdCA/IDEgOiAwXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIGtleSBpcyBwcmVzc1xyXG4gICAgICogQHBhcmFtIGtleWJvYXJkIC0gS2V5Ym9hcmQgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25LZXlQcmVzcyhrZXlib2FyZDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIGlmICghKCdjaGFyQ29kZScgaW4ga2V5Ym9hcmQpKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdLZXlib2FyZEV2ZW50LmNoYXJDb2RlIGlzIGRlcHJlY2F0ZWQgaW4gdGhpcyBicm93c2VyLCBjYW5ub3Qgc2VuZCBrZXkgcHJlc3MuJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjaGFyQ29kZSA9IGtleWJvYXJkLmNoYXJDb2RlO1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYGtleSBwcmVzcyAke2NoYXJDb2RlfWAsIDYpO1xyXG5cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlQcmVzcycpKFtjaGFyQ29kZV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgS2V5Y29kZSBvZiB0aGUgS2V5IHByZXNzZWRcclxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5IGJvYXJkIEV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyAtIHRoZSBrZXkgY29kZSBvZiB0aGUgS2V5XHJcbiAgICAgKi9cclxuICAgIGdldEtleWNvZGUoa2V5Ym9hcmRFdmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUga2V5Q29kZSBwcm9wZXJ0eSBiZWNhdXNlIGJyb3dzZXIgQVBJIGlzIGRlcHJlY2F0ZWQgdGhlbiB1c2UgS2V5Ym9hcmRFdmVudC5jb2RlIGluc3RlYWQuXHJcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlI2NvbnN0YW50c19mb3Jfa2V5Y29kZV92YWx1ZVxyXG4gICAgICAgIGlmICghKCdrZXlDb2RlJyBpbiBrZXlib2FyZEV2ZW50KSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IEtleWJvYXJkRXZlbnQuY29kZSBzdHJpbmcgaW50byBpbnRlZ2VyLWJhc2VkIGtleSBjb2RlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zLlxyXG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGtleWJvYXJkRXZlbnQgYXMgS2V5Ym9hcmRFdmVudDtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmNvZGUgaW4gdGhpcy5Db2RlVG9LZXlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Db2RlVG9LZXlDb2RlW2V2ZW50LmNvZGVdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLldhcm5pbmcoXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBgS2V5Ym9hcmQgY29kZSBvZiAke2V2ZW50LmNvZGV9IGlzIG5vdCBzdXBwb3J0ZWQgaW4gb3VyIG1hcHBpbmcsIGlnbm9yaW5nIHRoaXMga2V5LmBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgd2UgbWFkZSBpdCBoZXJlIEtleWJvYXJkRXZlbnQua2V5Q29kZSBpcyBzdGlsbCBzdXBwb3J0ZWQgc28gd2UgY2FuIHNhZmVseSB1c2UgaXQuXHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBTcGVjaWFsS2V5Q29kZXMuc2hpZnQgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnU2hpZnRSaWdodCdcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNwZWNpYWxLZXlDb2Rlcy5yaWdodFNoaWZ0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gU3BlY2lhbEtleUNvZGVzLmNvbnRyb2wgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQ29udHJvbFJpZ2h0J1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3BlY2lhbEtleUNvZGVzLnJpZ2h0Q29udHJvbDtcclxuICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LmtleUNvZGUgPT09IFNwZWNpYWxLZXlDb2Rlcy5hbHQgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQWx0UmlnaHQnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTcGVjaWFsS2V5Q29kZXMucmlnaHRBbHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5Q29kZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCcm93c2VyIGtleXMgZG8gbm90IGhhdmUgYSBjaGFyQ29kZSBzbyB3ZSBvbmx5IG5lZWQgdG8gdGVzdCBrZXlDb2RlLlxyXG4gICAgICogQHBhcmFtIGtleUNvZGUgLSB0aGUgYnJvd3NlciBrZXljb2RlIG51bWJlclxyXG4gICAgICovXHJcbiAgICBpc0tleUNvZGVCcm93c2VyS2V5KGtleUNvZGU6IG51bWJlcikge1xyXG4gICAgICAgIC8vIEZ1bmN0aW9uIGtleXMgb3IgdGFiIGtleSBhcmUgY29uc2lkZXJlZCBcImJyb3dzZXIga2V5c1wiIHRoYXQgd2UgbWF5IHdpc2ggdG8gc3VwcHJlc3MgYnkgcHJldmVudGluZyB0aGVtIGJlaW5nIHByb2Nlc3MgYnkgYnJvd3Nlci5cclxuICAgICAgICByZXR1cm4gKGtleUNvZGUgPj0gMTEyICYmIGtleUNvZGUgPD0gMTIzKSB8fCBrZXlDb2RlID09PSA5O1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tICcuL01vdXNlQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5pbXBvcnQgeyBJTW91c2VFdmVudHMgfSBmcm9tICcuL0lNb3VzZUV2ZW50cyc7XHJcbmltcG9ydCB7IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkIH0gZnJvbSAnLi4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyJztcclxuaW1wb3J0IHsgQWN0aXZlS2V5cyB9IGZyb20gJy4vSW5wdXRDbGFzc2VzRmFjdG9yeSc7XHJcbmltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXInO1xyXG5pbXBvcnQgeyBFdmVudExpc3RlbmVyVHJhY2tlciB9IGZyb20gJy4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXInO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZSB0aGUgbW91c2UgbG9ja2VkIGV2ZW50c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExvY2tlZE1vdXNlRXZlbnRzIGltcGxlbWVudHMgSU1vdXNlRXZlbnRzIHtcclxuICAgIHggPSAwO1xyXG4gICAgeSA9IDA7XHJcbiAgICBjb29yZDogTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQ7XHJcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XHJcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcclxuICAgIGFjdGl2ZUtleXNQcm92aWRlcjogQWN0aXZlS2V5cztcclxuICAgIHVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uRXZlbnQgPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxyXG4gICAgcHJpdmF0ZSBtb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IEV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgLSBWaWRlbyBQbGF5ZXIgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBjb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlS2V5c1Byb3ZpZGVyIC0gQWN0aXZlIGtleXMgcHJvdmlkZXIgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBwbGF5ZXJTdHlsZUF0dHJpYnV0ZXNQcm92aWRlciAtIFBsYXllciBzdHlsZSBhdHRyaWJ1dGVzIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcixcclxuICAgICAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcixcclxuICAgICAgICBhY3RpdmVLZXlzUHJvdmlkZXI6IEFjdGl2ZUtleXNcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IG1vdXNlQ29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmFjdGl2ZUtleXNQcm92aWRlciA9IGFjdGl2ZUtleXNQcm92aWRlcjtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMueCA9IHZpZGVvRWxlbWVudFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy55ID0gdmlkZW9FbGVtZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDI7XHJcbiAgICAgICAgdGhpcy5jb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcclxuICAgICAgICAgICAgICAgIHRoaXMueCxcclxuICAgICAgICAgICAgICAgIHRoaXMueVxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5yZWdpc3RlcnMgYWxsIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJNb3VzZUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIGxvY2tlZCBzdGF0ZSBDaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIGxvY2tTdGF0ZUNoYW5nZSgpIHtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgPT09IHZpZGVvRWxlbWVudFBhcmVudCB8fFxyXG4gICAgICAgICAgICBkb2N1bWVudC5tb3pQb2ludGVyTG9ja0VsZW1lbnQgPT09IHZpZGVvRWxlbWVudFBhcmVudFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdQb2ludGVyIGxvY2tlZCcsIDYpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgJ21vdXNlbW92ZScsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uRXZlbnQsXHJcbiAgICAgICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxyXG4gICAgICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgICAgICAgICAnbW91c2Vtb3ZlJyxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uRXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdUaGUgcG9pbnRlciBsb2NrIHN0YXR1cyBpcyBub3cgdW5sb2NrZWQnLFxyXG4gICAgICAgICAgICAgICAgNlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAvLyAhYSBuZXcgYXJyb3cgZnVuY3Rpb24gbXVzdCBub3QgYmUgdXNlZCBoZXJlIGFzIGl0IHdpbGwgYmUgY291bnRlZCBhcyBhIG5ldyBmdW5jdGlvbiB0aGF0IGNhbm5vdCBiZSByZW1vdmVkXHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgICAgICAnbW91c2Vtb3ZlJyxcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCxcclxuICAgICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBtb3VzZSBsb3NlcyBmb2N1cywgc2VuZCBhIGtleSB1cCBmb3IgYWxsIG9mIHRoZSBjdXJyZW50bHkgaGVsZC1kb3duIGtleXNcclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgYXMgd2hlbiB0aGUgbW91c2UgbG9zZXMgZm9jdXMsIHRoZSB3aW5kb3dzIHN0b3BzIGxpc3RlbmluZyBmb3IgZXZlbnRzIGFuZCBhcyBzdWNoXHJcbiAgICAgICAgICAgIC8vIHRoZSBrZXl1cCBsaXN0ZW5lciB3b24ndCBnZXQgZmlyZWRcclxuICAgICAgICAgICAgbGV0IGFjdGl2ZUtleXMgPSB0aGlzLmFjdGl2ZUtleXNQcm92aWRlci5nZXRBY3RpdmVLZXlzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldEtleXMgPSBuZXcgU2V0KGFjdGl2ZUtleXMpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdLZXlzSXRlcmFibGU6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHNldEtleXMuZm9yRWFjaCgoc2V0S2V5OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIG5ld0tleXNJdGVyYWJsZVtzZXRLZXldO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG5ld0tleXNJdGVyYWJsZS5mb3JFYWNoKCh1bmlxdWVLZXljb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlVcCcpKFt1bmlxdWVLZXljb2RlXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgYWN0aXZlIGtleXMgYmFjayB0byBub3RoaW5nXHJcbiAgICAgICAgICAgIGFjdGl2ZUtleXMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIG1vdmUgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVNb3VzZU1vdmVQb3NpdGlvbihtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlV2lkdGggPVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpLmNsaWVudFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlSGVpZ2h0ID1cclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKS5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMueCArPSBtb3VzZUV2ZW50Lm1vdmVtZW50WDtcclxuICAgICAgICB0aGlzLnkgKz0gbW91c2VFdmVudC5tb3ZlbWVudFk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnggPiBzdHlsZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCAtPSBzdHlsZVdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy55ID4gc3R5bGVIZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy55IC09IHN0eWxlSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy54IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnggPSBzdHlsZVdpZHRoICsgdGhpcy54O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy55IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnkgPSBzdHlsZUhlaWdodCAtIHRoaXMueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29vcmQgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXHJcbiAgICAgICAgICAgICAgICB0aGlzLngsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBkZWx0YSA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQoXHJcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm1vdmVtZW50WCxcclxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQubW92ZW1lbnRZXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLngsXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueSxcclxuICAgICAgICAgICAgZGVsdGEueCxcclxuICAgICAgICAgICAgZGVsdGEueVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBEb3duIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VEb3duKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlRG93bicpKFtcclxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b24sXHJcbiAgICAgICAgICAgIC8vIFdlIHVzZSB0aGUgc3RvcmUgdmFsdWUgb2YgdGhpcy5jb29yZCBhcyBvcHBvc2VkIHRvIHRoZSBtb3VzZUV2ZW50LngveSBhcyB0aGUgbW91c2VFdmVudCBsb2NhdGlvblxyXG4gICAgICAgICAgICAvLyB1c2VzIHRoZSBzeXN0ZW0gY3Vyc29yIGxvY2F0aW9uIHdoaWNoIGhhc24ndCBtb3ZlZFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLngsXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBzdG9yZSB2YWx1ZSBvZiB0aGlzLmNvb3JkIGFzIG9wcG9zZWQgdG8gdGhlIG1vdXNlRXZlbnQueC95IGFzIHRoZSBtb3VzZUV2ZW50IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcclxuICAgICAgICAgICAgdGhpcy5jb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIHdoZWVsIGV2ZW50LCBzZW5kcyB0aGUgbW91c2Ugd2hlZWwgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB3aGVlbEV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VXaGVlbCh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlV2hlZWwnKShbXHJcbiAgICAgICAgICAgIHdoZWVsRXZlbnQud2hlZWxEZWx0YSxcclxuICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBzdG9yZSB2YWx1ZSBvZiB0aGlzLmNvb3JkIGFzIG9wcG9zZWQgdG8gdGhlIG1vdXNlRXZlbnQueC95IGFzIHRoZSBtb3VzZUV2ZW50IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcclxuICAgICAgICAgICAgdGhpcy5jb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIGRvdWJsZSBjbGljayBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlRG91YmxlKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3VibGUnKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcclxuICAgICAgICAgICAgdGhpcy5jb29yZC54LFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5wcmVzc01vdXNlQnV0dG9ucyhcclxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b25zLFxyXG4gICAgICAgICAgICB0aGlzLngsXHJcbiAgICAgICAgICAgIHRoaXMueVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIHJlbGVhc2UgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVJlbGVhc2VNb3VzZUJ1dHRvbnMobW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnJlbGVhc2VNb3VzZUJ1dHRvbnMoXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9ucyxcclxuICAgICAgICAgICAgdGhpcy54LFxyXG4gICAgICAgICAgICB0aGlzLnlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRXh0cmEgdHlwZXMgZm9yIERvY3VtZW50IGFuZCBXaGVlbEV2ZW50XHJcbiAqL1xyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgRG9jdW1lbnQge1xyXG4gICAgICAgIG1velBvaW50ZXJMb2NrRWxlbWVudDogdW5rbm93bjtcclxuICAgICAgICBtb3pFeGl0UG9pbnRlckxvY2s/KCk6IHZvaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIFdoZWVsRXZlbnQge1xyXG4gICAgICAgIHdoZWVsRGVsdGE6IG51bWJlcjtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIE1vdXNlIEJ1dHRvbiBEYXRhXHJcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTW91c2VFdmVudC9idXR0b259XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW91c2VCdXR0b24ge1xyXG4gICAgc3RhdGljIG1haW5CdXR0b24gPSAwOyAvLyBMZWZ0IGJ1dHRvbi5cclxuICAgIHN0YXRpYyBhdXhpbGlhcnlCdXR0b24gPSAxOyAvLyBXaGVlbCBidXR0b24uXHJcbiAgICBzdGF0aWMgc2Vjb25kYXJ5QnV0dG9uID0gMjsgLy8gUmlnaHQgYnV0dG9uLlxyXG4gICAgc3RhdGljIGZvdXJ0aEJ1dHRvbiA9IDM7IC8vIEJyb3dzZXIgQmFjayBidXR0b24uXHJcbiAgICBzdGF0aWMgZmlmdGhCdXR0b24gPSA0OyAvLyBCcm93c2VyIEZvcndhcmQgYnV0dG9uLlxyXG59XHJcblxyXG4vKipcclxuICogTW91c2UgQnV0dG9uIE1hc2sgRGF0YVxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvYnV0dG9uc31cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb3VzZUJ1dHRvbnNNYXNrIHtcclxuICAgIHN0YXRpYyBwcmltYXJ5QnV0dG9uID0gMTsgLy8gTGVmdCBidXR0b24uXHJcbiAgICBzdGF0aWMgc2Vjb25kYXJ5QnV0dG9uID0gMjsgLy8gUmlnaHQgYnV0dG9uLlxyXG4gICAgc3RhdGljIGF1eGlsaWFyeUJ1dHRvbiA9IDQ7IC8vIFdoZWVsIGJ1dHRvbi5cclxuICAgIHN0YXRpYyBmb3VydGhCdXR0b24gPSA4OyAvLyBCcm93c2VyIEJhY2sgYnV0dG9uLlxyXG4gICAgc3RhdGljIGZpZnRoQnV0dG9uID0gMTY7IC8vIEJyb3dzZXIgRm9yd2FyZCBidXR0b24uXHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IE1vdXNlQnV0dG9uc01hc2ssIE1vdXNlQnV0dG9uIH0gZnJvbSAnLi9Nb3VzZUJ1dHRvbnMnO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBWaWRlb1BsYXllciB9IGZyb20gJy4uL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyJztcclxuaW1wb3J0IHsgSU1vdXNlRXZlbnRzIH0gZnJvbSAnLi9JTW91c2VFdmVudHMnO1xyXG5pbXBvcnQgeyBMb2NrZWRNb3VzZUV2ZW50cyB9IGZyb20gJy4vTG9ja2VkTW91c2VFdmVudHMnO1xyXG5pbXBvcnQgeyBIb3ZlcmluZ01vdXNlRXZlbnRzIH0gZnJvbSAnLi9Ib3ZlcmluZ01vdXNlRXZlbnRzJztcclxuaW1wb3J0IHR5cGUgeyBBY3RpdmVLZXlzIH0gZnJvbSAnLi9JbnB1dENsYXNzZXNGYWN0b3J5JztcclxuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lclRyYWNrZXIgfSBmcm9tICcuLi9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyJztcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBNb3VzZSBJbnB1dHMgZm9yIHRoZSBkb2N1bWVudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vdXNlQ29udHJvbGxlciB7XHJcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XHJcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XHJcbiAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyO1xyXG4gICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzO1xyXG5cclxuICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxyXG4gICAgcHJpdmF0ZSBtb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IEV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIC0gVmlkZW8gUGxheWVyIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplQW5kUXVhbnRpemUgLSBBIG5vcm1hbGl6ZSBhbmQgcXVhbnRpemUgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLFxyXG4gICAgICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcixcclxuICAgICAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyLFxyXG4gICAgICAgIGFjdGl2ZUtleXNQcm92aWRlcjogQWN0aXZlS2V5c1xyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IGNvb3JkaW5hdGVDb252ZXJ0ZXI7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlS2V5c1Byb3ZpZGVyID0gYWN0aXZlS2V5c1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJNb3VzZUVudGVyQW5kTGVhdmVFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyBhbGwgdGhlIGNsaWNrIGV2ZW50cyBvbiB0aGUgY3VycmVudCB2aWRlbyBlbGVtZW50IHBhcmVudCBkaXZcclxuICAgICAqL1xyXG4gICAgdW5yZWdpc3Rlck1vdXNlRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGxvY2tlZCBtb3VzZSBjbGFzc1xyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAtIGEgbW91c2UgY29udHJvbGxlciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gYSBwbGF5ZXIgc3R5bGUgYXR0cmlidXRlcyBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICByZWdpc3RlckxvY2tlZE1vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID1cclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBjb25zdCBsb2NrZWRNb3VzZUV2ZW50czogSU1vdXNlRXZlbnRzID0gbmV3IExvY2tlZE1vdXNlRXZlbnRzKFxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLFxyXG4gICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlS2V5c1Byb3ZpZGVyXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jayA9XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5yZXF1ZXN0UG9pbnRlckxvY2sgfHxcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50Lm1velJlcXVlc3RQb2ludGVyTG9jaztcclxuICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2sgPVxyXG4gICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2sgfHwgZG9jdW1lbnQubW96RXhpdFBvaW50ZXJMb2NrO1xyXG5cclxuICAgICAgICAvLyBtaW5vciBoYWNrIHRvIGFsbGV2aWF0ZSBpb3Mgbm90IHN1cHBvcnRpbmcgcG9pbnRlcmxvY2tcclxuICAgICAgICBpZiAodmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaykge1xyXG4gICAgICAgICAgICBjb25zdCBvbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaygpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbmNsaWNrKTtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uY2xpY2spXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsb2NrU3RhdGVDaGFuZ2VMaXN0ZW5lciA9ICgpID0+XHJcbiAgICAgICAgICAgIGxvY2tlZE1vdXNlRXZlbnRzLmxvY2tTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgICdwb2ludGVybG9ja2NoYW5nZScsXHJcbiAgICAgICAgICAgIGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyLFxyXG4gICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgJ21venBvaW50ZXJsb2NrY2hhbmdlJyxcclxuICAgICAgICAgICAgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIsXHJcbiAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxyXG4gICAgICAgICAgICAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgJ3BvaW50ZXJsb2NrY2hhbmdlJyxcclxuICAgICAgICAgICAgICAgIGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyLFxyXG4gICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgICAgICdtb3pwb2ludGVybG9ja2NoYW5nZScsXHJcbiAgICAgICAgICAgICAgICBsb2NrU3RhdGVDaGFuZ2VMaXN0ZW5lcixcclxuICAgICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBvbm1vdXNlZG93biA9IChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSA9PlxyXG4gICAgICAgICAgICBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvd24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZXVwID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XHJcbiAgICAgICAgICAgIGxvY2tlZE1vdXNlRXZlbnRzLmhhbmRsZU1vdXNlVXAobW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb253aGVlbCA9ICh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSA9PlxyXG4gICAgICAgICAgICBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQpO1xyXG4gICAgICAgIGNvbnN0IG9uZGJsY2xpY2sgPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT5cclxuICAgICAgICAgICAgbG9ja2VkTW91c2VFdmVudHMuaGFuZGxlTW91c2VEb3VibGUobW91c2VFdmVudCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9ubW91c2Vkb3duKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9ubW91c2V1cCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgb253aGVlbCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYmxjbGljayk7XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bilcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25tb3VzZXVwKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgb253aGVlbClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJsY2xpY2spXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxyXG4gICAgICAgICAgICAoKSA9PiBsb2NrZWRNb3VzZUV2ZW50cy51bnJlZ2lzdGVyTW91c2VFdmVudHMoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jayAmJlxyXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LnBvaW50ZXJMb2NrRWxlbWVudCA9PT0gdmlkZW9FbGVtZW50UGFyZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgaG92ZXJpbmcgbW91c2UgY2xhc3NcclxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBBIG1vdXNlIGNvbnRyb2xsZXIgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVySG92ZXJpbmdNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcikge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgaG92ZXJpbmdNb3VzZUV2ZW50cyA9IG5ldyBIb3ZlcmluZ01vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcik7XHJcblxyXG4gICAgICAgIGNvbnN0IG9ubW91c2Vtb3ZlID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XHJcbiAgICAgICAgICAgIGhvdmVyaW5nTW91c2VFdmVudHMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZWRvd24gPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT5cclxuICAgICAgICAgICAgaG92ZXJpbmdNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvd24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZXVwID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XHJcbiAgICAgICAgICAgIGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbmNvbnRleHRtZW51ID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XHJcbiAgICAgICAgICAgIGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlQ29udGV4dE1lbnUobW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb253aGVlbCA9ICh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSA9PlxyXG4gICAgICAgICAgICBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25kYmxjbGljayA9IChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSA9PlxyXG4gICAgICAgICAgICBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG91YmxlKG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbm1vdXNlbW92ZSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9ubW91c2Vkb3duKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9ubW91c2V1cCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jywgb25jb250ZXh0bWVudSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgb253aGVlbCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYmxjbGljayk7XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbm1vdXNlbW92ZSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bilcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25tb3VzZXVwKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jywgb25jb250ZXh0bWVudSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG9ud2hlZWwpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxyXG4gICAgICAgICAgICAoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBvbmRibGNsaWNrKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gaG92ZXJpbmdNb3VzZUV2ZW50cy51bnJlZ2lzdGVyTW91c2VFdmVudHMoKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG1vdXNlIGVudGVyIGFuZCBtb3VzZSBsZWF2ZSBldmVudHNcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJNb3VzZUVudGVyQW5kTGVhdmVFdmVudHMoKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID1cclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHdoZW4gdGhlIE1vdXNlIGhhcyBlbnRlcmVkIHRoZSBlbGVtZW50XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZWVudGVyID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01vdXNlIEVudGVyZWQnLCA2KTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VFbnRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXNzTW91c2VCdXR0b25zKGV2ZW50LmJ1dHRvbnMsIGV2ZW50LngsIGV2ZW50LnkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZXMgd2hlbiB0aGUgbW91c2UgaGFzIGxlZnQgdGhlIGVsZW1lbnRcclxuICAgICAgICBjb25zdCBvbm1vdXNlbGVhdmUgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTW91c2UgTGVmdCcsIDYpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZUxlYXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZU1vdXNlQnV0dG9ucyhldmVudC5idXR0b25zLCBldmVudC54LCBldmVudC55KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25tb3VzZWVudGVyKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIG9ubW91c2VsZWF2ZSk7XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25tb3VzZWVudGVyKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvbm1vdXNlbGVhdmUpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHJlbGVhc2VkXHJcbiAgICAgKiBAcGFyYW0gYnV0dG9ucyAtIE1vdXNlIEJ1dHRvblxyXG4gICAgICogQHBhcmFtIFggLSBNb3VzZSBwb2ludGVyIFggY29vcmRpbmF0ZVxyXG4gICAgICogQHBhcmFtIFkgLSBNb3VzZSBwb2ludGVyIFkgY29vcmRpbmF0ZVxyXG4gICAgICovXHJcbiAgICByZWxlYXNlTW91c2VCdXR0b25zKGJ1dHRvbnM6IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxyXG4gICAgICAgICAgICBYLFxyXG4gICAgICAgICAgICBZXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2sucHJpbWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLm1haW5CdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suc2Vjb25kYXJ5QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24uc2Vjb25kYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmF1eGlsaWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLmF1eGlsaWFyeUJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5mb3VydGhCdXR0b24pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5mb3VydGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZmlmdGhCdXR0b24pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5maWZ0aEJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZFxyXG4gICAgICogQHBhcmFtIGJ1dHRvbnMgLSBNb3VzZSBCdXR0b25cclxuICAgICAqIEBwYXJhbSBYIC0gTW91c2UgcG9pbnRlciBYIGNvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSBZIC0gTW91c2UgcG9pbnRlciBZIGNvb3JkaW5hdGVcclxuICAgICAqL1xyXG4gICAgcHJlc3NNb3VzZUJ1dHRvbnMoYnV0dG9uczogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXHJcbiAgICAgICAgICAgIFgsXHJcbiAgICAgICAgICAgIFlcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5wcmltYXJ5QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uc2Vjb25kYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmF1eGlsaWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uZm91cnRoQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5maWZ0aEJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBtb3VzZSBlbnRlclxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VFbnRlcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZUVudGVyJykoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgbW91c2UgTGVhdmVcclxuICAgICAqL1xyXG4gICAgc2VuZE1vdXNlTGVhdmUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VMZWF2ZScpKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCBkb3duXHJcbiAgICAgKiBAcGFyYW0gYnV0dG9uIC0gTW91c2UgQnV0dG9uIFByZXNzZWRcclxuICAgICAqIEBwYXJhbSBYICAtIE1vdXNlIFggQ29vcmRpbmF0ZVxyXG4gICAgICogQHBhcmFtIFkgIC0gTW91c2UgWSBDb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIHNlbmRNb3VzZURvd24oYnV0dG9uOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgYG1vdXNlIGJ1dHRvbiAke2J1dHRvbn0gZG93biBhdCAoJHtYfSwgJHtZfSlgLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbYnV0dG9uLCBYLCBZXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCB1cFxyXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSBZICAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VVcChidXR0b246IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBgbW91c2UgYnV0dG9uICR7YnV0dG9ufSB1cCBhdCAoJHtYfSwgJHtZfSlgLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxyXG4gICAgICAgICAgICBYLFxyXG4gICAgICAgICAgICBZXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW2J1dHRvbiwgY29vcmQueCwgY29vcmQueV0pO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogUmVnaXN0ZXJzIHRoZSBTcGVjaWFsIEtleSBjb2Rlc1xyXG4gKiAgTXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBKYXZhU2NyaXB0S2V5Q29kZVRvRktleSBDKysgYXJyYXkuXHJcbiAqIFRoZSBpbmRleCBvZiB0aGUgZW50cnkgaW4gdGhlIGFycmF5IGlzIHRoZSBzcGVjaWFsIGtleSBjb2RlIGdpdmVuIGJlbG93LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNwZWNpYWxLZXlDb2RlcyB7XHJcbiAgICBzdGF0aWMgYmFja1NwYWNlID0gODtcclxuICAgIHN0YXRpYyBzaGlmdCA9IDE2O1xyXG4gICAgc3RhdGljIGNvbnRyb2wgPSAxNztcclxuICAgIHN0YXRpYyBhbHQgPSAxODtcclxuICAgIHN0YXRpYyByaWdodFNoaWZ0ID0gMjUzO1xyXG4gICAgc3RhdGljIHJpZ2h0Q29udHJvbCA9IDI1NDtcclxuICAgIHN0YXRpYyByaWdodEFsdCA9IDI1NTtcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcbmltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyJztcclxuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XHJcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tICcuL0lUb3VjaENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBFdmVudExpc3RlbmVyVHJhY2tlciB9IGZyb20gJy4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXInO1xyXG4vKipcclxuICogSGFuZGxlcyB0aGUgVG91Y2ggaW5wdXQgRXZlbnRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVG91Y2hDb250cm9sbGVyIGltcGxlbWVudHMgSVRvdWNoQ29udHJvbGxlciB7XHJcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XHJcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XHJcbiAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyO1xyXG4gICAgdmlkZW9FbGVtZW50UGFyZW50OiBIVE1MVmlkZW9FbGVtZW50O1xyXG4gICAgZmluZ2VycyA9IFs5LCA4LCA3LCA2LCA1LCA0LCAzLCAyLCAxLCAwXTtcclxuICAgIGZpbmdlcklkcyA9IG5ldyBNYXAoKTtcclxuICAgIG1heEJ5dGVWYWx1ZSA9IDI1NTtcclxuXHJcbiAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgIHByaXZhdGUgdG91Y2hFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBFdmVudExpc3RlbmVyVHJhY2tlcigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGNvb3JkaW5hdGVDb252ZXJ0ZXIgLSBBIGNvb3JkaW5hdGUgY29udmVydGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcclxuICAgICAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXIsXHJcbiAgICAgICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlclxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50ID0gdmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaHN0YXJ0ID0gKGV2OiBUb3VjaEV2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaGVuZCA9IChldjogVG91Y2hFdmVudCkgPT5cclxuICAgICAgICAgICAgdGhpcy5vblRvdWNoRW5kKGV2KTtcclxuICAgICAgICBjb25zdCBvbnRvdWNobW92ZSA9IChldjogVG91Y2hFdmVudCkgPT5cclxuICAgICAgICAgICAgdGhpcy5vblRvdWNoTW92ZShldik7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb250b3VjaG1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMudmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb250b3VjaGVuZClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMudmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnVG91Y2ggRXZlbnRzIFJlZ2lzdGVyZWQnLCA2KTtcclxuXHJcbiAgICAgICAgLy8gaXMgdGhpcyBzdHJpY3RseSBuZWNlc3Nhcnk/XHJcbiAgICAgICAgY29uc3QgcHJldmVudE9uVG91Y2hNb3ZlID0gKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50T25Ub3VjaE1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcclxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcHJldmVudE9uVG91Y2hNb3ZlKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVyIGFsbCB0b3VjaCBldmVudHNcclxuICAgICAqL1xyXG4gICAgdW5yZWdpc3RlclRvdWNoRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1lbWJlciBhIHRvdWNoIGNvbW1hbmRcclxuICAgICAqIEBwYXJhbSB0b3VjaCAtIHRoZSB0b3VjaCBjb21tYW5kXHJcbiAgICAgKi9cclxuICAgIHJlbWVtYmVyVG91Y2godG91Y2g6IFRvdWNoKSB7XHJcbiAgICAgICAgY29uc3QgZmluZ2VyID0gdGhpcy5maW5nZXJzLnBvcCgpO1xyXG4gICAgICAgIGlmIChmaW5nZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdleGhhdXN0ZWQgdG91Y2ggaWRlbnRpZmllcnMnLFxyXG4gICAgICAgICAgICAgICAgNlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmdlcklkcy5zZXQodG91Y2guaWRlbnRpZmllciwgZmluZ2VyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZvcmdldHMgYSB0b3VjaCBjb21tYW5kXHJcbiAgICAgKiBAcGFyYW0gdG91Y2ggLSB0aGUgdG91Y2ggY29tbWFuZFxyXG4gICAgICovXHJcbiAgICBmb3JnZXRUb3VjaCh0b3VjaDogVG91Y2gpIHtcclxuICAgICAgICB0aGlzLmZpbmdlcnMucHVzaCh0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllcikpO1xyXG4gICAgICAgIC8vIFNvcnQgYXJyYXkgYmFjayBpbnRvIGRlc2NlbmRpbmcgb3JkZXIuIFRoaXMgbWVhbnMgaWYgZmluZ2VyICcxJyB3ZXJlIHRvIGxpZnQgYWZ0ZXIgZmluZ2VyICcwJywgd2Ugd291bGQgZW5zdXJlIHRoYXQgMCB3aWxsIGJlIHRoZSBmaXJzdCBpbmRleCB0byBwb3BcclxuICAgICAgICB0aGlzLmZpbmdlcnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYiAtIGE7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maW5nZXJJZHMuZGVsZXRlKHRvdWNoLmlkZW50aWZpZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IHN0YXJ0c1xyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgdG91Y2ggZXZlbnQgYmVpbmcgaW50ZXJjZXB0ZWRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1lbWJlclRvdWNoKHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbdF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICd0b3VjaCBzdGFydCcsIDYpO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXRUb3VjaERhdGEoJ1RvdWNoU3RhcnQnLCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzKTtcclxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgZW5kc1xyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgdG91Y2ggZXZlbnQgYmVpbmcgaW50ZXJjZXB0ZWRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaEVuZCh0b3VjaEV2ZW50OiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAndG91Y2ggZW5kJywgNik7XHJcbiAgICAgICAgdGhpcy5lbWl0VG91Y2hEYXRhKCdUb3VjaEVuZCcsIHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMpO1xyXG4gICAgICAgIC8vIFJlLWN5Y2xlIHVuaXF1ZSBpZGVudGlmaWVycyBwcmV2aW91c2x5IGFzc2lnbmVkIHRvIGVhY2ggdG91Y2guXHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yZ2V0VG91Y2godG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1t0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHdoZW4gYSBtb3ZpbmcgdG91Y2ggZXZlbnQgb2NjdXJzXHJcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSB0b3VjaCBldmVudCBiZWluZyBpbnRlcmNlcHRlZFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoTW92ZSh0b3VjaEV2ZW50OiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAndG91Y2ggbW92ZScsIDYpO1xyXG4gICAgICAgIHRoaXMuZW1pdFRvdWNoRGF0YSgnVG91Y2hNb3ZlJywgdG91Y2hFdmVudC50b3VjaGVzKTtcclxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZW1pdFRvdWNoRGF0YSh0eXBlOiBzdHJpbmcsIHRvdWNoZXM6IFRvdWNoTGlzdCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdG91Y2hlcy5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICBjb25zdCBudW1Ub3VjaGVzID0gMTsgLy8gdGhlIG51bWJlciBvZiB0b3VjaGVzIHRvIGJlIHNlbnQgdGhpcyBtZXNzYWdlXHJcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gdG91Y2hlc1t0XTtcclxuICAgICAgICAgICAgY29uc3QgeCA9IHRvdWNoLmNsaWVudFggLSB2aWRlb0VsZW1lbnRQYXJlbnQub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgY29uc3QgeSA9IHRvdWNoLmNsaWVudFkgLSB2aWRlb0VsZW1lbnRQYXJlbnQub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBGJHt0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllcil9PSgke3h9LCAke3l9KWAsXHJcbiAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxyXG4gICAgICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgICAgIHlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUb3VjaFN0YXJ0JzpcclxuICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdUb3VjaFN0YXJ0JykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1Ub3VjaGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlICogdG91Y2guZm9yY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLmluUmFuZ2UgPyAxIDogMFxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVG91Y2hFbmQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1RvdWNoRW5kJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1Ub3VjaGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlICogdG91Y2guZm9yY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLmluUmFuZ2UgPyAxIDogMFxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVG91Y2hNb3ZlJzpcclxuICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdUb3VjaE1vdmUnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bVRvdWNoZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhCeXRlVmFsdWUgKiB0b3VjaC5mb3JjZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQuaW5SYW5nZSA/IDEgOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi9HYW1lcGFkVHlwZXMnO1xyXG5pbXBvcnQgeyBXZWJYUlV0aWxzIH0gZnJvbSAnLi4vVXRpbC9XZWJYUlV0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgY2xhc3MgdGhhdCBoYW5kbGVzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHhyZ2FtZXBhZHMgYW5kIGNvbnRyb2xsZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgWFJHYW1lcGFkQ29udHJvbGxlciB7XHJcbiAgICBjb250cm9sbGVyczogQXJyYXk8Q29udHJvbGxlcj47XHJcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVN0YXR1cyhcclxuICAgICAgICBzb3VyY2U6IFhSSW5wdXRTb3VyY2UsXHJcbiAgICAgICAgZnJhbWU6IFhSRnJhbWUsXHJcbiAgICAgICAgcmVmU3BhY2U6IFhSUmVmZXJlbmNlU3BhY2VcclxuICAgICkge1xyXG4gICAgICAgIGlmIChzb3VyY2UuZ2FtZXBhZCkge1xyXG4gICAgICAgICAgICBjb25zdCBnYW1lcGFkUG9zZSA9IGZyYW1lLmdldFBvc2Uoc291cmNlLmdyaXBTcGFjZSwgcmVmU3BhY2UpO1xyXG4gICAgICAgICAgICBpZiAoIWdhbWVwYWRQb3NlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzeXN0ZW0gPSAwO1xyXG4gICAgICAgICAgICBpZiAoc291cmNlLnByb2ZpbGVzLmluY2x1ZGVzKCdodGMtdml2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW0gPSAxO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5wcm9maWxlcy5pbmNsdWRlcygnb2N1bHVzLXRvdWNoJykpIHtcclxuICAgICAgICAgICAgICAgIHN5c3RlbSA9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVE9ETyAod2lsbGlhbS5iZWxjaGVyKTogQWRkIG90aGVyIHByb2ZpbGVzIChRdWVzdCwgTWljcm9zb2Z0IE1peGVkIFJlYWxpdHksIGV0YylcclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUlN5c3RlbScpKFtcclxuICAgICAgICAgICAgICAgIHN5c3RlbVxyXG4gICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQ6IEFueUhhbmQgKDIpXHJcbiAgICAgICAgICAgIGxldCBoYW5kZWRuZXNzID0gMjtcclxuICAgICAgICAgICAgc3dpdGNoIChzb3VyY2UuaGFuZGVkbmVzcykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGVkbmVzcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGVkbmVzcyA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNlbmQgY29udHJvbGxlciB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgY29uc3QgbWF0cml4ID0gZ2FtZXBhZFBvc2UudHJhbnNmb3JtLm1hdHJpeDtcclxuICAgICAgICAgICAgY29uc3QgbWF0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbWF0W2ldID0gbmV3IEZsb2F0MzJBcnJheShbbWF0cml4W2ldXSlbMF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1hSQ29udHJvbGxlclRyYW5zZm9ybScpKFtcclxuICAgICAgICAgICAgICAgIG1hdFswXSwgbWF0WzRdLCBtYXRbOF0sIG1hdFsxMl0sXHJcbiAgICAgICAgICAgICAgICBtYXRbMV0sIG1hdFs1XSwgbWF0WzldLCBtYXRbMTNdLFxyXG4gICAgICAgICAgICAgICAgbWF0WzJdLCBtYXRbNl0sIG1hdFsxMF0sIG1hdFsxNF0sXHJcbiAgICAgICAgICAgICAgICBtYXRbM10sIG1hdFs3XSwgbWF0WzExXSwgbWF0WzE1XSxcclxuICAgICAgICAgICAgICAgIGhhbmRlZG5lc3NcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBIYW5kbGUgY29udHJvbGxlciBidXR0b25zIGFuZCBheGVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJzW2hhbmRlZG5lc3NdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlN0YXRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlOiB1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRpZDogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5wcmV2U3RhdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgIFdlYlhSVXRpbHMuZGVlcENvcHlHYW1lcGFkKHNvdXJjZS5nYW1lcGFkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5jdXJyZW50U3RhdGUgPVxyXG4gICAgICAgICAgICAgICAgV2ViWFJVdGlscy5kZWVwQ29weUdhbWVwYWQoc291cmNlLmdhbWVwYWQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc107XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJTdGF0ZSA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2U3RhdGUgPSBjb250cm9sbGVyLnByZXZTdGF0ZTtcclxuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGJ1dHRvbnNcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyU3RhdGUuYnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VyckJ1dHRvbiA9IGN1cnJTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkJ1dHRvbiA9IHByZXZTdGF0ZS5idXR0b25zW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyQnV0dG9uLnByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwcmVzc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUHJlc3NlZCdcclxuICAgICAgICAgICAgICAgICAgICApKFtoYW5kZWRuZXNzLCBpLCBwcmV2QnV0dG9uLnByZXNzZWQgPyAxIDogMF0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY3VyckJ1dHRvbi5wcmVzc2VkICYmIHByZXZCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldChcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUmVsZWFzZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgKShbaGFuZGVkbmVzcywgaSwgMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyQnV0dG9uLnRvdWNoZWQgJiYgIWN1cnJCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWFJCdXR0b25QcmVzc2VkJ1xyXG4gICAgICAgICAgICAgICAgICAgICkoW2hhbmRlZG5lc3MsIDMsIHByZXZCdXR0b24udG91Y2hlZCA/IDEgOiAwXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjdXJyQnV0dG9uLnRvdWNoZWQgJiYgcHJldkJ1dHRvbi50b3VjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWFJCdXR0b25SZWxlYXNlZCdcclxuICAgICAgICAgICAgICAgICAgICApKFtoYW5kZWRuZXNzLCAzLCAwXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBnYW1lcGFkIGF4ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyU3RhdGUuYXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICdYUkFuYWxvZydcclxuICAgICAgICAgICAgICAgICkoW2hhbmRlZG5lc3MsIGksIGN1cnJTdGF0ZS5heGVzW2ldXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10ucHJldlN0YXRlID0gY3VyclN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XHJcbiAgICBzdGF0aWMgdmVyYm9zZUxvZ0xldmVsID0gNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhcHR1cmVzIHRoZSBzdGFjayBhbmQgcmV0dXJucyBpdFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgc3RhY2tcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEdldFN0YWNrVHJhY2UoKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoKTtcclxuICAgICAgICBsZXQgZm9ybWF0dGVkU3RhY2sgPSAnTm8gU3RhY2sgQXZhaWxhYmxlIGZvciB0aGlzIGJyb3dzZXInO1xyXG5cclxuICAgICAgICAvLyBmb3JtYXQgdGhlIGVycm9yXHJcbiAgICAgICAgaWYgKGVycm9yLnN0YWNrKSB7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0YWNrID0gZXJyb3Iuc3RhY2sudG9TdHJpbmcoKS5yZXBsYWNlKC9FcnJvci9nLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGxvZyB2ZXJib3NpdHkgbGV2ZWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIFNldExvZ2dlclZlcmJvc2l0eSh2ZXJib3NlTG9nTGV2ZWw6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2VMb2dMZXZlbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVyYm9zZUxvZ0xldmVsID0gdmVyYm9zZUxvZ0xldmVsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIG91dHB1dFxyXG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZFxyXG4gICAgICogQHBhcmFtIHZlcmJvc2l0eSAtIHRoZSB2ZXJib3NpdHkgbGV2ZWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIExvZyhzdGFjazogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIHZlcmJvc2l0eT86IG51bWJlcikge1xyXG4gICAgICAgIGlmICh2ZXJib3NpdHkgPiB0aGlzLnZlcmJvc2VMb2dMZXZlbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IExvZ1xcbk1zZzogJHttZXNzYWdlfVxcbkNhbGxlcjogJHtzdGFja31gO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqIEBwYXJhbSB2ZXJib3NpdHkgLSB0aGUgdmVyYm9zaXR5IGxldmVsXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBJbmZvKHN0YWNrOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgdmVyYm9zaXR5PzogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHZlcmJvc2l0eSA+IHRoaXMudmVyYm9zZUxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJldHVyblN0cmluZyA9IGBMZXZlbDogSW5mb1xcbk1zZzogJHttZXNzYWdlfWA7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEVycm9yKHN0YWNrOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHJldHVyblN0cmluZyA9IGBMZXZlbDogRXJyb3JcXG5Nc2c6ICR7bWVzc2FnZX1cXG5DYWxsZXI6ICR7c3RhY2t9YDtcclxuICAgICAgICBjb25zb2xlLmVycm9yKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIFdhcm5pbmcoc3RhY2s6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcmV0dXJuU3RyaW5nID0gYExldmVsOiBXYXJuaW5nXFxuQ2FsbGVyOiAke3N0YWNrfVxcbk1zZzogJHttZXNzYWdlfWA7XHJcbiAgICAgICAgY29uc29sZS53YXJuKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBJbmJvdW5kUlRQU3RhdHMsXHJcbiAgICBJbmJvdW5kVmlkZW9TdGF0cyxcclxuICAgIEluYm91bmRBdWRpb1N0YXRzXHJcbn0gZnJvbSAnLi9JbmJvdW5kUlRQU3RhdHMnO1xyXG5pbXBvcnQgeyBJbmJvdW5kVHJhY2tTdGF0cyB9IGZyb20gJy4vSW5ib3VuZFRyYWNrU3RhdHMnO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbFN0YXRzIH0gZnJvbSAnLi9EYXRhQ2hhbm5lbFN0YXRzJztcclxuaW1wb3J0IHsgQ2FuZGlkYXRlU3RhdCB9IGZyb20gJy4vQ2FuZGlkYXRlU3RhdCc7XHJcbmltcG9ydCB7IENhbmRpZGF0ZVBhaXJTdGF0cyB9IGZyb20gJy4vQ2FuZGlkYXRlUGFpclN0YXRzJztcclxuaW1wb3J0IHsgT3V0Qm91bmRSVFBTdGF0cywgT3V0Qm91bmRWaWRlb1N0YXRzIH0gZnJvbSAnLi9PdXRCb3VuZFJUUFN0YXRzJztcclxuaW1wb3J0IHsgU2Vzc2lvblN0YXRzIH0gZnJvbSAnLi9TZXNzaW9uU3RhdHMnO1xyXG5pbXBvcnQgeyBTdHJlYW1TdGF0cyB9IGZyb20gJy4vU3RyZWFtU3RhdHMnO1xyXG5pbXBvcnQgeyBDb2RlY1N0YXRzIH0gZnJvbSAnLi9Db2RlY1N0YXRzJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcblxyXG4vKipcclxuICogVGhlIEFnZ3JlZ2F0ZWQgU3RhdHMgdGhhdCBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuXHJcbnR5cGUgUlRDU3RhdHNUeXBlUFMgPSBSVENTdGF0c1R5cGUgfCAnc3RyZWFtJyB8ICdtZWRpYS1wbGF5b3V0JztcclxuZXhwb3J0IGNsYXNzIEFnZ3JlZ2F0ZWRTdGF0cyB7XHJcbiAgICBpbmJvdW5kVmlkZW9TdGF0czogSW5ib3VuZFZpZGVvU3RhdHM7XHJcbiAgICBpbmJvdW5kQXVkaW9TdGF0czogSW5ib3VuZEF1ZGlvU3RhdHM7XHJcbiAgICBsYXN0VmlkZW9TdGF0czogSW5ib3VuZFZpZGVvU3RhdHM7XHJcbiAgICBsYXN0QXVkaW9TdGF0czogSW5ib3VuZEF1ZGlvU3RhdHM7XHJcbiAgICBjYW5kaWRhdGVQYWlyOiBDYW5kaWRhdGVQYWlyU3RhdHM7XHJcbiAgICBEYXRhQ2hhbm5lbFN0YXRzOiBEYXRhQ2hhbm5lbFN0YXRzO1xyXG4gICAgbG9jYWxDYW5kaWRhdGVzOiBBcnJheTxDYW5kaWRhdGVTdGF0PjtcclxuICAgIHJlbW90ZUNhbmRpZGF0ZXM6IEFycmF5PENhbmRpZGF0ZVN0YXQ+O1xyXG4gICAgb3V0Qm91bmRWaWRlb1N0YXRzOiBPdXRCb3VuZFZpZGVvU3RhdHM7XHJcbiAgICBzZXNzaW9uU3RhdHM6IFNlc3Npb25TdGF0cztcclxuICAgIHN0cmVhbVN0YXRzOiBTdHJlYW1TdGF0cztcclxuICAgIGNvZGVjczogTWFwPHN0cmluZywgc3RyaW5nPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gbmV3IEluYm91bmRWaWRlb1N0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cyA9IG5ldyBJbmJvdW5kQXVkaW9TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpciA9IG5ldyBDYW5kaWRhdGVQYWlyU3RhdHMoKTtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMgPSBuZXcgRGF0YUNoYW5uZWxTdGF0cygpO1xyXG4gICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzID0gbmV3IE91dEJvdW5kVmlkZW9TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXRzID0gbmV3IFNlc3Npb25TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtU3RhdHMgPSBuZXcgU3RyZWFtU3RhdHMoKTtcclxuICAgICAgICB0aGlzLmNvZGVjcyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHYXRoZXIgYWxsIHRoZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFJlcG9ydFxyXG4gICAgICogQHBhcmFtIHJ0Y1N0YXRzUmVwb3J0IC0gUlRDIFN0YXRzIFJlcG9ydFxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzU3RhdHMocnRjU3RhdHNSZXBvcnQ6IFJUQ1N0YXRzUmVwb3J0KSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbENhbmRpZGF0ZXMgPSBuZXcgQXJyYXk8Q2FuZGlkYXRlU3RhdD4oKTtcclxuICAgICAgICB0aGlzLnJlbW90ZUNhbmRpZGF0ZXMgPSBuZXcgQXJyYXk8Q2FuZGlkYXRlU3RhdD4oKTtcclxuXHJcbiAgICAgICAgcnRjU3RhdHNSZXBvcnQuZm9yRWFjaCgoc3RhdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlOiBSVENTdGF0c1R5cGVQUyA9IHN0YXQudHlwZTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2FuZGlkYXRlLXBhaXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NlcnRpZmljYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGVjJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNvZGVjKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0YS1jaGFubmVsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZURhdGFDaGFubmVsKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW5ib3VuZC1ydHAnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSW5Cb3VuZFJUUChzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xvY2FsLWNhbmRpZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVMb2NhbENhbmRpZGF0ZShzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhLXNvdXJjZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYS1wbGF5b3V0JzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ291dGJvdW5kLXJ0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwZWVyLWNvbm5lY3Rpb24nOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3RlLWNhbmRpZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdGUtaW5ib3VuZC1ydHAnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3RlLW91dGJvdW5kLXJ0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVPdXRCb3VuZChzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RyYWNrJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWNrKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndHJhbnNwb3J0JzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmVhbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdHJlYW0oc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAndW5oYW5kbGVkIFN0YXQgVHlwZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3Mgc3RyZWFtIHN0YXRzIGRhdGEgZnJvbSB3ZWJydGNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIHRoZSBzdGF0cyBjb21pbmcgaW4gZnJvbSB3ZWJydGNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlU3RyZWFtKHN0YXQ6IFN0cmVhbVN0YXRzKSB7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1TdGF0cyA9IHN0YXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBJY2UgQ2FuZGlkYXRlIFBhaXIgRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSB0aGUgc3RhdHMgY29taW5nIGluIGZyb20gaWNlIGNhbmRpZGF0ZXNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0OiBDYW5kaWRhdGVQYWlyU3RhdHMpIHtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIuYnl0ZXNSZWNlaXZlZCA9IHN0YXQuYnl0ZXNSZWNlaXZlZDtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIuYnl0ZXNTZW50ID0gc3RhdC5ieXRlc1NlbnQ7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmxvY2FsQ2FuZGlkYXRlSWQgPSBzdGF0LmxvY2FsQ2FuZGlkYXRlSWQ7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnJlbW90ZUNhbmRpZGF0ZUlkID0gc3RhdC5yZW1vdGVDYW5kaWRhdGVJZDtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIubm9taW5hdGVkID0gc3RhdC5ub21pbmF0ZWQ7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnJlYWRhYmxlID0gc3RhdC5yZWFkYWJsZTtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIuc2VsZWN0ZWQgPSBzdGF0LnNlbGVjdGVkO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci53cml0YWJsZSA9IHN0YXQud3JpdGFibGU7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnN0YXRlID0gc3RhdC5zdGF0ZTtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIuY3VycmVudFJvdW5kVHJpcFRpbWUgPSBzdGF0LmN1cnJlbnRSb3VuZFRyaXBUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgRGF0YSBDaGFubmVsIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gdGhlIHN0YXRzIGNvbWluZyBpbiBmcm9tIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoc3RhdDogRGF0YUNoYW5uZWxTdGF0cykge1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5ieXRlc1JlY2VpdmVkID0gc3RhdC5ieXRlc1JlY2VpdmVkO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMuZGF0YUNoYW5uZWxJZGVudGlmaWVyID1cclxuICAgICAgICAgICAgc3RhdC5kYXRhQ2hhbm5lbElkZW50aWZpZXI7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLmlkID0gc3RhdC5pZDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMubGFiZWwgPSBzdGF0LmxhYmVsO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5tZXNzYWdlc1JlY2VpdmVkID0gc3RhdC5tZXNzYWdlc1JlY2VpdmVkO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5tZXNzYWdlc1NlbnQgPSBzdGF0Lm1lc3NhZ2VzU2VudDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5zdGF0ZSA9IHN0YXQuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgTG9jYWwgSWNlIENhbmRpZGF0ZSBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIGxvY2FsIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUxvY2FsQ2FuZGlkYXRlKHN0YXQ6IENhbmRpZGF0ZVN0YXQpIHtcclxuICAgICAgICBjb25zdCBsb2NhbENhbmRpZGF0ZSA9IG5ldyBDYW5kaWRhdGVTdGF0KCk7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUubGFiZWwgPSAnbG9jYWwtY2FuZGlkYXRlJztcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5hZGRyZXNzID0gc3RhdC5hZGRyZXNzO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLnBvcnQgPSBzdGF0LnBvcnQ7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmNhbmRpZGF0ZVR5cGUgPSBzdGF0LmNhbmRpZGF0ZVR5cGU7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuaWQgPSBzdGF0LmlkO1xyXG4gICAgICAgIHRoaXMubG9jYWxDYW5kaWRhdGVzLnB1c2gobG9jYWxDYW5kaWRhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgUmVtb3RlIEljZSBDYW5kaWRhdGUgRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSBpY2UgY2FuZGlkYXRlIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVJlbW90ZUNhbmRpZGF0ZShzdGF0OiBDYW5kaWRhdGVTdGF0KSB7XHJcbiAgICAgICAgY29uc3QgUmVtb3RlQ2FuZGlkYXRlID0gbmV3IENhbmRpZGF0ZVN0YXQoKTtcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUubGFiZWwgPSAnbG9jYWwtY2FuZGlkYXRlJztcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUuYWRkcmVzcyA9IHN0YXQuYWRkcmVzcztcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydDtcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmNhbmRpZGF0ZVR5cGUgPSBzdGF0LmNhbmRpZGF0ZVR5cGU7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzLnB1c2goUmVtb3RlQ2FuZGlkYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIEluYm91bmQgUlRQIEF1ZGlvIGFuZCBWaWRlbyBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIGluYm91bmQgcnRwIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUluQm91bmRSVFAoc3RhdDogSW5ib3VuZFJUUFN0YXRzKSB7XHJcbiAgICAgICAgc3dpdGNoIChzdGF0LmtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxyXG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byBjb252ZXJ0IHRvIHVua25vd24gZmlyc3QgdG8gcmVtb3ZlIGFuIGVycm9yIGFyb3VuZFxyXG4gICAgICAgICAgICAgICAgLy8gSW5ib3VuZFZpZGVvU3RhdHMgaGF2aW5nIHRoZSBiaXRyYXRlIG1lbWJlciB3aGljaCBpc24ndCBmb3VuZCBvblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIEluYm91bmRSVFBTdGF0c1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cyA9IHN0YXQgYXMgdW5rbm93biBhcyBJbmJvdW5kVmlkZW9TdGF0cztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0VmlkZW9TdGF0cyAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoOCAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5ieXRlc1JlY2VpdmVkIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQpKSAvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RWaWRlb1N0YXRzLnRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlID0gTWF0aC5mbG9vcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFZpZGVvU3RhdHMgPSB7IC4uLnRoaXMuaW5ib3VuZFZpZGVvU3RhdHMgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhdWRpbyc6XHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgdG8gdW5rbm93biBmaXJzdCB0byByZW1vdmUgYW4gZXJyb3IgYXJvdW5kXHJcbiAgICAgICAgICAgICAgICAvLyBJbmJvdW5kQXVkaW9TdGF0cyBoYXZpbmcgdGhlIGJpdHJhdGUgbWVtYmVyIHdoaWNoIGlzbid0IGZvdW5kIG9uXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgSW5ib3VuZFJUUFN0YXRzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzID0gc3RhdCBhcyB1bmtub3duIGFzIEluYm91bmRBdWRpb1N0YXRzO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3RBdWRpb1N0YXRzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMuYml0cmF0ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg4ICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJ5dGVzUmVjZWl2ZWQgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMuYnl0ZXNSZWNlaXZlZCkpIC9cclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMudGltZXN0YW1wIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMudGltZXN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJpdHJhdGUgPSBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJpdHJhdGVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0QXVkaW9TdGF0cyA9IHsgLi4udGhpcy5pbmJvdW5kQXVkaW9TdGF0cyB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdLaW5kIGlzIG5vdCBoYW5kbGVkJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBvdXRib3VuZCBSVFAgQXVkaW8gYW5kIFZpZGVvIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gcmVtb3RlIG91dGJvdW5kIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVJlbW90ZU91dEJvdW5kKHN0YXQ6IE91dEJvdW5kUlRQU3RhdHMpIHtcclxuICAgICAgICBzd2l0Y2ggKHN0YXQua2luZCkge1xyXG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLmlkID0gc3RhdC5pZDtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLmxvY2FsSWQgPSBzdGF0LmxvY2FsSWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5wYWNrZXRzU2VudCA9IHN0YXQucGFja2V0c1NlbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5yZW1vdGVUaW1lc3RhbXAgPSBzdGF0LnJlbW90ZVRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIEluYm91bmQgVmlkZW8gVHJhY2sgRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSB2aWRlbyB0cmFjayBzdGF0c1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVUcmFjayhzdGF0OiBJbmJvdW5kVHJhY2tTdGF0cykge1xyXG4gICAgICAgIC8vIHdlIG9ubHkgd2FudCB0byBleHRyYWN0IHN0YXRzIGZyb20gdGhlIHZpZGVvIHRyYWNrXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzdGF0LnR5cGUgPT09ICd0cmFjaycgJiZcclxuICAgICAgICAgICAgKHN0YXQudHJhY2tJZGVudGlmaWVyID09PSAndmlkZW9fbGFiZWwnIHx8IHN0YXQua2luZCA9PT0gJ3ZpZGVvJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEcm9wcGVkID0gc3RhdC5mcmFtZXNEcm9wcGVkO1xyXG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc1JlY2VpdmVkID0gc3RhdC5mcmFtZXNSZWNlaXZlZDtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZUhlaWdodCA9IHN0YXQuZnJhbWVIZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVXaWR0aCA9IHN0YXQuZnJhbWVXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ29kZWMoc3RhdDogQ29kZWNTdGF0cykge1xyXG4gICAgICAgIGNvbnN0IGNvZGVjSWQgPSBzdGF0LmlkO1xyXG4gICAgICAgIGNvbnN0IGNvZGVjVHlwZSA9IGAke3N0YXQubWltZVR5cGVcclxuICAgICAgICAgICAgLnJlcGxhY2UoJ3ZpZGVvLycsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnYXVkaW8vJywgJycpfSR7XHJcbiAgICAgICAgICAgIHN0YXQuc2RwRm10cExpbmUgPyBgICR7c3RhdC5zZHBGbXRwTGluZX1gIDogJydcclxuICAgICAgICB9YDtcclxuICAgICAgICB0aGlzLmNvZGVjcy5zZXQoY29kZWNJZCwgY29kZWNUeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVTZXNzaW9uU3RhdGlzdGljcyhcclxuICAgICAgICB2aWRlb1N0YXJ0VGltZTogbnVtYmVyLFxyXG4gICAgICAgIGlucHV0Q29udHJvbGxlcjogYm9vbGVhbiB8IG51bGwsXHJcbiAgICAgICAgdmlkZW9FbmNvZGVyQXZnUVA6IG51bWJlclxyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gRGF0ZS5ub3coKSAtIHZpZGVvU3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXRzLnJ1blRpbWUgPSBuZXcgRGF0ZShkZWx0YVRpbWUpXHJcbiAgICAgICAgICAgIC50b0lTT1N0cmluZygpXHJcbiAgICAgICAgICAgIC5zdWJzdHIoMTEsIDgpXHJcbiAgICAgICAgICAgIC50b1N0cmluZygpO1xyXG5cclxuICAgICAgICBjb25zdCBjb250cm9sc1N0cmVhbUlucHV0ID1cclxuICAgICAgICAgICAgaW5wdXRDb250cm9sbGVyID09PSBudWxsXHJcbiAgICAgICAgICAgICAgICA/ICdOb3Qgc2VudCB5ZXQnXHJcbiAgICAgICAgICAgICAgICA6IGlucHV0Q29udHJvbGxlclxyXG4gICAgICAgICAgICAgICAgPyAndHJ1ZSdcclxuICAgICAgICAgICAgICAgIDogJ2ZhbHNlJztcclxuICAgICAgICB0aGlzLnNlc3Npb25TdGF0cy5jb250cm9sc1N0cmVhbUlucHV0ID0gY29udHJvbHNTdHJlYW1JbnB1dDtcclxuXHJcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RhdHMudmlkZW9FbmNvZGVyQXZnUVAgPSB2aWRlb0VuY29kZXJBdmdRUDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGEgdmFsdWUgY29taW5nIGluIGZyb20gb3VyIHN0YXRzIGlzIGFjdHVhbGx5IGEgbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgbnVtYmVyIHRvIGJlIGNoZWNrZWRcclxuICAgICAqL1xyXG4gICAgaXNOdW1iZXIodmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBJQ0UgQ2FuZGlkYXRlIFBhaXIgU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYW5kaWRhdGVQYWlyU3RhdHMge1xyXG4gICAgYnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgYnl0ZXNTZW50OiBudW1iZXI7XHJcbiAgICBsb2NhbENhbmRpZGF0ZUlkOiBzdHJpbmc7XHJcbiAgICByZW1vdGVDYW5kaWRhdGVJZDogc3RyaW5nO1xyXG4gICAgbm9taW5hdGVkOiBib29sZWFuO1xyXG4gICAgcmVhZGFibGU6IGJvb2xlYW47XHJcbiAgICB3cml0YWJsZTogYm9vbGVhbjtcclxuICAgIHNlbGVjdGVkOiBib29sZWFuO1xyXG4gICAgc3RhdGU6IHN0cmluZztcclxuICAgIGN1cnJlbnRSb3VuZFRyaXBUaW1lOiBudW1iZXI7XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBJQ0UgQ2FuZGlkYXRlIFN0YXQgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYW5kaWRhdGVTdGF0IHtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgYWRkcmVzczogc3RyaW5nO1xyXG4gICAgY2FuZGlkYXRlVHlwZTogc3RyaW5nO1xyXG4gICAgcG9ydDogbnVtYmVyO1xyXG4gICAgcHJvdG9jb2w6ICd0Y3AnIHwgJ3VkcCc7XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBEYXRhIENoYW5uZWwgU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbFN0YXRzIHtcclxuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGJ5dGVzU2VudDogbnVtYmVyO1xyXG4gICAgZGF0YUNoYW5uZWxJZGVudGlmaWVyOiBudW1iZXI7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIG1lc3NhZ2VzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIG1lc3NhZ2VzU2VudDogbnVtYmVyO1xyXG4gICAgcHJvdG9jb2w6IHN0cmluZztcclxuICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIEluYm91bmQgQXVkaW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbmJvdW5kQXVkaW9TdGF0cyB7XHJcbiAgICBhdWRpb0xldmVsOiBudW1iZXI7XHJcbiAgICBieXRlc1JlY2VpdmVkOiBudW1iZXI7XHJcbiAgICBjb2RlY0lkOiBzdHJpbmc7XHJcbiAgICBjb25jZWFsZWRTYW1wbGVzOiBudW1iZXI7XHJcbiAgICBjb25jZWFsbWVudEV2ZW50czogbnVtYmVyO1xyXG4gICAgZmVjUGFja2V0c0Rpc2NhcmRlZDogbnVtYmVyO1xyXG4gICAgZmVjUGFja2V0c1JlY2VpdmVkOiBudW1iZXI7XHJcbiAgICBoZWFkZXJCeXRlc1JlY2VpdmVkOiBudW1iZXI7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgaW5zZXJ0ZWRTYW1wbGVzRm9yRGVjZWxlcmF0aW9uOiBudW1iZXI7XHJcbiAgICBqaXR0ZXI6IG51bWJlcjtcclxuICAgIGppdHRlckJ1ZmZlckRlbGF5OiBudW1iZXI7XHJcbiAgICBqaXR0ZXJCdWZmZXJFbWl0dGVkQ291bnQ6IG51bWJlcjtcclxuICAgIGppdHRlckJ1ZmZlck1pbmltdW1EZWxheTogbnVtYmVyO1xyXG4gICAgaml0dGVyQnVmZmVyVGFyZ2V0RGVsYXk6IG51bWJlcjtcclxuICAgIGtpbmQ6IHN0cmluZztcclxuICAgIGxhc3RQYWNrZXRSZWNlaXZlZFRpbWVzdGFtcDogbnVtYmVyO1xyXG4gICAgbWVkaWFUeXBlOiBzdHJpbmc7XHJcbiAgICBtaWQ6IHN0cmluZztcclxuICAgIHBhY2tldHNEaXNjYXJkZWQ6IG51bWJlcjtcclxuICAgIHBhY2tldHNMb3N0OiBudW1iZXI7XHJcbiAgICBwYWNrZXRzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIHJlbW92ZWRTYW1wbGVzRm9yQWNjZWxlcmF0aW9uOiBudW1iZXI7XHJcbiAgICBzaWxlbnRDb25jZWFsZWRTYW1wbGVzOiBudW1iZXI7XHJcbiAgICBzc3JjOiBudW1iZXI7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICAgIHRvdGFsQXVkaW9FbmVyZ3k6IG51bWJlcjtcclxuICAgIHRvdGFsU2FtcGxlc0R1cmF0aW9uOiBudW1iZXI7XHJcbiAgICB0b3RhbFNhbXBsZXNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgdHJhY2tJZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgICB0cmFuc3BvcnRJZDogc3RyaW5nO1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG5cclxuICAgIC8qIGFkZGl0aW9uYWwsIGN1c3RvbSBzdGF0cyAqL1xyXG4gICAgYml0cmF0ZTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5ib3VuZCBWaWRlbyBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEluYm91bmRWaWRlb1N0YXRzIHtcclxuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGNvZGVjSWQ6IHN0cmluZztcclxuICAgIGZpckNvdW50OiBudW1iZXI7XHJcbiAgICBmcmFtZUhlaWdodDogbnVtYmVyO1xyXG4gICAgZnJhbWVXaWR0aDogbnVtYmVyO1xyXG4gICAgZnJhbWVzQXNzZW1ibGVkRnJvbU11bHRpcGxlUGFja2V0czogbnVtYmVyO1xyXG4gICAgZnJhbWVzRGVjb2RlZDogbnVtYmVyO1xyXG4gICAgZnJhbWVzRHJvcHBlZDogbnVtYmVyO1xyXG4gICAgZnJhbWVzUGVyU2Vjb25kOiBudW1iZXI7XHJcbiAgICBmcmFtZXNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgZnJlZXplQ291bnQ6IG51bWJlcjtcclxuICAgIGdvb2dUaW1pbmdGcmFtZUluZm86IHN0cmluZztcclxuICAgIGhlYWRlckJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBqaXR0ZXI6IG51bWJlcjtcclxuICAgIGppdHRlckJ1ZmZlckRlbGF5OiBudW1iZXI7XHJcbiAgICBqaXR0ZXJCdWZmZXJFbWl0dGVkQ291bnQ6IG51bWJlcjtcclxuICAgIGtleUZyYW1lc0RlY29kZWQ6IG51bWJlcjtcclxuICAgIGtpbmQ6IHN0cmluZztcclxuICAgIGxhc3RQYWNrZXRSZWNlaXZlZFRpbWVzdGFtcDogbnVtYmVyO1xyXG4gICAgbWVkaWFUeXBlOiBzdHJpbmc7XHJcbiAgICBtaWQ6IHN0cmluZztcclxuICAgIG5hY2tDb3VudDogbnVtYmVyO1xyXG4gICAgcGFja2V0c0xvc3Q6IG51bWJlcjtcclxuICAgIHBhY2tldHNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgcGF1c2VDb3VudDogbnVtYmVyO1xyXG4gICAgcGxpQ291bnQ6IG51bWJlcjtcclxuICAgIHNzcmM6IG51bWJlcjtcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xyXG4gICAgdG90YWxBc3NlbWJseVRpbWU6IG51bWJlcjtcclxuICAgIHRvdGFsRGVjb2RlVGltZTogbnVtYmVyO1xyXG4gICAgdG90YWxGcmVlemVzRHVyYXRpb246IG51bWJlcjtcclxuICAgIHRvdGFsSW50ZXJGcmFtZURlbGF5OiBudW1iZXI7XHJcbiAgICB0b3RhbFBhdXNlc0R1cmF0aW9uOiBudW1iZXI7XHJcbiAgICB0b3RhbFByb2Nlc3NpbmdEZWxheTogbnVtYmVyO1xyXG4gICAgdG90YWxTcXVhcmVkSW50ZXJGcmFtZURlbGF5OiBudW1iZXI7XHJcbiAgICB0cmFja0lkZW50aWZpZXI6IHN0cmluZztcclxuICAgIHRyYW5zcG9ydElkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcblxyXG4gICAgLyogYWRkaXRpb25hbCwgY3VzdG9tIHN0YXRzICovXHJcbiAgICBiaXRyYXRlOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmJvdW5kIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5ib3VuZFJUUFN0YXRzIHtcclxuICAgIC8qIGNvbW1vbiBzdGF0cyAqL1xyXG4gICAgYnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgY29kZWNJZDogc3RyaW5nO1xyXG4gICAgaGVhZGVyQnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGppdHRlcjogbnVtYmVyO1xyXG4gICAgaml0dGVyQnVmZmVyRGVsYXk6IG51bWJlcjtcclxuICAgIGppdHRlckJ1ZmZlckVtaXR0ZWRDb3VudDogbnVtYmVyO1xyXG4gICAga2luZDogc3RyaW5nO1xyXG4gICAgbGFzdFBhY2tldFJlY2VpdmVkVGltZXN0YW1wOiBudW1iZXI7XHJcbiAgICBtZWRpYVR5cGU6IHN0cmluZztcclxuICAgIG1pZDogc3RyaW5nO1xyXG4gICAgcGFja2V0c0xvc3Q6IG51bWJlcjtcclxuICAgIHBhY2tldHNSZWNlaXZlZDogbnVtYmVyO1xyXG4gICAgc3NyYzogbnVtYmVyO1xyXG4gICAgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgICB0cmFja0lkZW50aWZpZXI6IHN0cmluZztcclxuICAgIHRyYW5zcG9ydElkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcblxyXG4gICAgLyogYXVkaW8gc3BlY2lmaWMgc3RhdHMgKi9cclxuICAgIGF1ZGlvTGV2ZWw6IG51bWJlcjtcclxuICAgIGNvbmNlYWxlZFNhbXBsZXM6IG51bWJlcjtcclxuICAgIGNvbmNlYWxtZW50RXZlbnRzOiBudW1iZXI7XHJcbiAgICBmZWNQYWNrZXRzRGlzY2FyZGVkOiBudW1iZXI7XHJcbiAgICBmZWNQYWNrZXRzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGluc2VydGVkU2FtcGxlc0ZvckRlY2VsZXJhdGlvbjogbnVtYmVyO1xyXG4gICAgaml0dGVyQnVmZmVyTWluaW11bURlbGF5OiBudW1iZXI7XHJcbiAgICBqaXR0ZXJCdWZmZXJUYXJnZXREZWxheTogbnVtYmVyO1xyXG4gICAgcGFja2V0c0Rpc2NhcmRlZDogbnVtYmVyO1xyXG4gICAgcmVtb3ZlZFNhbXBsZXNGb3JBY2NlbGVyYXRpb246IG51bWJlcjtcclxuICAgIHNpbGVudENvbmNlYWxlZFNhbXBsZXM6IG51bWJlcjtcclxuICAgIHRvdGFsQXVkaW9FbmVyZ3k6IG51bWJlcjtcclxuICAgIHRvdGFsU2FtcGxlc0R1cmF0aW9uOiBudW1iZXI7XHJcbiAgICB0b3RhbFNhbXBsZXNSZWNlaXZlZDogbnVtYmVyO1xyXG5cclxuICAgIC8qIHZpZGVvIHNwZWNpZmljIHN0YXRzICovXHJcbiAgICBmaXJDb3VudDogbnVtYmVyO1xyXG4gICAgZnJhbWVIZWlnaHQ6IG51bWJlcjtcclxuICAgIGZyYW1lV2lkdGg6IG51bWJlcjtcclxuICAgIGZyYW1lc0Fzc2VtYmxlZEZyb21NdWx0aXBsZVBhY2tldHM6IG51bWJlcjtcclxuICAgIGZyYW1lc0RlY29kZWQ6IG51bWJlcjtcclxuICAgIGZyYW1lc0Ryb3BwZWQ6IG51bWJlcjtcclxuICAgIGZyYW1lc1BlclNlY29uZDogbnVtYmVyO1xyXG4gICAgZnJhbWVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGZyZWV6ZUNvdW50OiBudW1iZXI7XHJcbiAgICBnb29nVGltaW5nRnJhbWVJbmZvOiBzdHJpbmc7XHJcbiAgICBrZXlGcmFtZXNEZWNvZGVkOiBudW1iZXI7XHJcbiAgICBuYWNrQ291bnQ6IG51bWJlcjtcclxuICAgIHBhdXNlQ291bnQ6IG51bWJlcjtcclxuICAgIHBsaUNvdW50OiBudW1iZXI7XHJcbiAgICB0b3RhbEFzc2VtYmx5VGltZTogbnVtYmVyO1xyXG4gICAgdG90YWxEZWNvZGVUaW1lOiBudW1iZXI7XHJcbiAgICB0b3RhbEZyZWV6ZXNEdXJhdGlvbjogbnVtYmVyO1xyXG4gICAgdG90YWxJbnRlckZyYW1lRGVsYXk6IG51bWJlcjtcclxuICAgIHRvdGFsUGF1c2VzRHVyYXRpb246IG51bWJlcjtcclxuICAgIHRvdGFsUHJvY2Vzc2luZ0RlbGF5OiBudW1iZXI7XHJcbiAgICB0b3RhbFNxdWFyZWRJbnRlckZyYW1lRGVsYXk6IG51bWJlcjtcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIE91dGJvdW5kIFZpZGVvIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT3V0Qm91bmRWaWRlb1N0YXRzIHtcclxuICAgIGJ5dGVzU2VudDogbnVtYmVyO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGxvY2FsSWQ6IHN0cmluZztcclxuICAgIHBhY2tldHNTZW50OiBudW1iZXI7XHJcbiAgICByZW1vdGVUaW1lc3RhbXA6IG51bWJlcjtcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogT3V0Ym91bmQgU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPdXRCb3VuZFJUUFN0YXRzIHtcclxuICAgIGtpbmQ6IHN0cmluZztcclxuICAgIGJ5dGVzU2VudDogbnVtYmVyO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGxvY2FsSWQ6IHN0cmluZztcclxuICAgIHBhY2tldHNTZW50OiBudW1iZXI7XHJcbiAgICByZW1vdGVUaW1lc3RhbXA6IG51bWJlcjtcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgQ29uZmlnLCBPcHRpb25QYXJhbWV0ZXJzLCBGbGFncyB9IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xyXG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3RhdHMgfSBmcm9tICcuL0FnZ3JlZ2F0ZWRTdGF0cyc7XHJcbmltcG9ydCB7IHBhcnNlUnRwUGFyYW1ldGVycywgc3BsaXRTZWN0aW9ucyB9IGZyb20gJ3NkcCc7XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgUGVlciBDb25uZWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyIHtcclxuICAgIHBlZXJDb25uZWN0aW9uOiBSVENQZWVyQ29ubmVjdGlvbjtcclxuICAgIGFnZ3JlZ2F0ZWRTdGF0czogQWdncmVnYXRlZFN0YXRzO1xyXG4gICAgY29uZmlnOiBDb25maWc7XHJcbiAgICBwcmVmZXJyZWRDb2RlYzogc3RyaW5nO1xyXG4gICAgdXBkYXRlQ29kZWNTZWxlY3Rpb246IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgUlRDIFBlZXIgQ29ubmVjdGlvbiBjbGllbnRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gUGVlciBjb25uZWN0aW9uIE9wdGlvbnNcclxuICAgICAqIEBwYXJhbSBjb25maWcgLSBUaGUgY29uZmlnIGZvciBvdXIgUFMgZXhwZXJpZW5jZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgb3B0aW9uczogUlRDQ29uZmlndXJhdGlvbixcclxuICAgICAgICBjb25maWc6IENvbmZpZyxcclxuICAgICAgICBwcmVmZXJyZWRDb2RlYzogc3RyaW5nXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLmNyZWF0ZVBlZXJDb25uZWN0aW9uKG9wdGlvbnMsIHByZWZlcnJlZENvZGVjKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQZWVyQ29ubmVjdGlvbihvcHRpb25zOiBSVENDb25maWd1cmF0aW9uLCBwcmVmZXJyZWRDb2RlYzogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBJQ0UgdHJhbnNwb3J0IHRvIHJlbGF5IGlmIFRVUk4gZW5hYmxlZFxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkZvcmNlVFVSTikpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5pY2VUcmFuc3BvcnRQb2xpY3kgPSAncmVsYXknO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdGb3JjaW5nIFRVUk4gdXNhZ2UgYnkgc2V0dGluZyBJQ0UgVHJhbnNwb3J0IFBvbGljeSBpbiBwZWVyIGNvbm5lY3Rpb24gY29uZmlnLidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIGEgbmV3IHBlZXIgY29ubmVjdGlvbiB3aXRoIHRoZSBvcHRpb25zXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UgPSAoZXY6IEV2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNpZ25hbFN0YXRlQ2hhbmdlKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gKGV2OiBFdmVudCkgPT5cclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVJY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSA9IChldjogRXZlbnQpID0+XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub250cmFjayA9IChldjogUlRDVHJhY2tFdmVudCkgPT5cclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVPblRyYWNrKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gKGV2OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUljZUNhbmRpZGF0ZShldik7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbmRhdGFjaGFubmVsID0gKGV2OiBSVENEYXRhQ2hhbm5lbEV2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZURhdGFDaGFubmVsKGV2KTtcclxuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cyA9IG5ldyBBZ2dyZWdhdGVkU3RhdHMoKTtcclxuICAgICAgICB0aGlzLnByZWZlcnJlZENvZGVjID0gcHJlZmVycmVkQ29kZWM7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb2RlY1NlbGVjdGlvbiA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYW4gb2ZmZXIgZm9yIHRoZSBXZWIgUlRDIGhhbmRzaGFrZSBhbmQgc2VuZCB0aGUgb2ZmZXIgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIG9mZmVyT3B0aW9ucyAtIFJUQyBPZmZlciBPcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNyZWF0ZU9mZmVyKG9mZmVyT3B0aW9uczogUlRDT2ZmZXJPcHRpb25zLCBjb25maWc6IENvbmZpZykge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0NyZWF0ZSBPZmZlcicsIDYpO1xyXG5cclxuICAgICAgICBjb25zdCBpc0xvY2FsaG9zdENvbm5lY3Rpb24gPVxyXG4gICAgICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHxcclxuICAgICAgICAgICAgbG9jYXRpb24uaG9zdG5hbWUgPT09ICcxMjcuMC4wLjEnO1xyXG4gICAgICAgIGNvbnN0IGlzSHR0cHNDb25uZWN0aW9uID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xyXG4gICAgICAgIGxldCB1c2VNaWMgPSBjb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Vc2VNaWMpO1xyXG4gICAgICAgIGlmICh1c2VNaWMgJiYgIShpc0xvY2FsaG9zdENvbm5lY3Rpb24gfHwgaXNIdHRwc0Nvbm5lY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHVzZU1pYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgJ01pY3JvcGhvbmUgYWNjZXNzIGluIHRoZSBicm93c2VyIHdpbGwgbm90IHdvcmsgaWYgeW91IGFyZSBub3Qgb24gSFRUUFMgb3IgbG9jYWxob3N0LiBEaXNhYmxpbmcgbWljIGFjY2Vzcy4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBcIkZvciB0ZXN0aW5nIHlvdSBjYW4gZW5hYmxlIEhUVFAgbWljcm9waG9uZSBhY2Nlc3MgQ2hyb21lIGJ5IHZpc2l0aW5nIGNocm9tZTovL2ZsYWdzLyBhbmQgZW5hYmxpbmcgJ3Vuc2FmZWx5LXRyZWF0LWluc2VjdXJlLW9yaWdpbi1hcy1zZWN1cmUnXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0dXBUcmFuc2NlaXZlcnNBc3luYyh1c2VNaWMpLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uXHJcbiAgICAgICAgICAgICAgICA/LmNyZWF0ZU9mZmVyKG9mZmVyT3B0aW9ucylcclxuICAgICAgICAgICAgICAgIC50aGVuKChvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZmVyLnNkcCA9IHRoaXMubXVuZ2VTRFAob2ZmZXIuc2RwLCB1c2VNaWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TZW5kV2ViUlRDT2ZmZXIob2ZmZXIpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93VGV4dE92ZXJsYXlTZXR1cEZhaWx1cmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVjZWl2ZU9mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0LCBjb25maWc6IENvbmZpZykge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlY2VpdmUgT2ZmZXInLCA2KTtcclxuXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpc0xvY2FsaG9zdENvbm5lY3Rpb24gPVxyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gJzEyNy4wLjAuMSc7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzSHR0cHNDb25uZWN0aW9uID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xyXG4gICAgICAgICAgICBsZXQgdXNlTWljID0gY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuVXNlTWljKTtcclxuICAgICAgICAgICAgaWYgKHVzZU1pYyAmJiAhKGlzTG9jYWxob3N0Q29ubmVjdGlvbiB8fCBpc0h0dHBzQ29ubmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHVzZU1pYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ01pY3JvcGhvbmUgYWNjZXNzIGluIHRoZSBicm93c2VyIHdpbGwgbm90IHdvcmsgaWYgeW91IGFyZSBub3Qgb24gSFRUUFMgb3IgbG9jYWxob3N0LiBEaXNhYmxpbmcgbWljIGFjY2Vzcy4nXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJGb3IgdGVzdGluZyB5b3UgY2FuIGVuYWJsZSBIVFRQIG1pY3JvcGhvbmUgYWNjZXNzIENocm9tZSBieSB2aXNpdGluZyBjaHJvbWU6Ly9mbGFncy8gYW5kIGVuYWJsaW5nICd1bnNhZmVseS10cmVhdC1pbnNlY3VyZS1vcmlnaW4tYXMtc2VjdXJlJ1wiXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldHVwVHJhbnNjZWl2ZXJzQXN5bmModXNlTWljKS5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICA/LmNyZWF0ZUFuc3dlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKEFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBbnN3ZXIuc2RwID0gdGhpcy5tdW5nZVNEUChBbnN3ZXIuc2RwLCB1c2VNaWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wZWVyQ29ubmVjdGlvbj8uc2V0TG9jYWxEZXNjcmlwdGlvbihBbnN3ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2VuZFdlYlJUQ0Fuc3dlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LmN1cnJlbnRMb2NhbERlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZUFuc3dlcigpIGZhaWxlZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFVnbHkgc3ludGF4LCBidXQgdGhpcyBhY2hpZXZlcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBicm93c2VyIHN1cHBvcnRlZCBsaXN0IGFuZCB0aGUgVUUgc3VwcG9ydGVkIGxpc3RcclxuICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nT3B0aW9ucyhcclxuICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYyxcclxuICAgICAgICAgICAgdGhpcy5wYXJzZUF2YWlsYWJsZUNvZGVjcyhvZmZlcikuZmlsdGVyKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldFNldHRpbmdPcHRpb24oT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYylcclxuICAgICAgICAgICAgICAgICAgICAub3B0aW9ucy5pbmNsdWRlcyh2YWx1ZSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIFJlbW90ZSBEZXNjcmlwdG9yIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdG8gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSBhbnN3ZXIgLSBSVEMgU2Vzc2lvbiBEZXNjcmlwdG9yIGZyb20gdGhlIFNpZ25hbGluZyBTZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZUFuc3dlcihhbnN3ZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xyXG4gICAgICAgIC8vIFVnbHkgc3ludGF4LCBidXQgdGhpcyBhY2hpZXZlcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBicm93c2VyIHN1cHBvcnRlZCBsaXN0IGFuZCB0aGUgVUUgc3VwcG9ydGVkIGxpc3RcclxuICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nT3B0aW9ucyhcclxuICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYyxcclxuICAgICAgICAgICAgdGhpcy5wYXJzZUF2YWlsYWJsZUNvZGVjcyhhbnN3ZXIpLmZpbHRlcigodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1xyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRTZXR0aW5nT3B0aW9uKE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9wdGlvbnMuaW5jbHVkZXModmFsdWUpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgQWdncmVnYXRlZCBTdGF0cyBhbmQgdGhlbiBmaXJlIGEgb25WaWRlbyBTdGF0cyBldmVudFxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZVN0YXRzKCkge1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LmdldFN0YXRzKG51bGwpLnRoZW4oKFN0YXRzRGF0YTogUlRDU3RhdHNSZXBvcnQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGVkU3RhdHMucHJvY2Vzc1N0YXRzKFN0YXRzRGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMub25WaWRlb1N0YXRzKHRoaXMuYWdncmVnYXRlZFN0YXRzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcHJlZmVycmVkIGNvZGVjIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0IHdhcyBhY3R1YWxseSBuZWdvdGlhdGVkXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZUNvZGVjU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYyxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cy5jb2RlY3MuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cy5pbmJvdW5kVmlkZW9TdGF0cy5jb2RlY0lkXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgVGhlIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wZWVyQ29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmeSB0aGUgU2Vzc2lvbiBEZXNjcmlwdG9yXHJcbiAgICAgKiBAcGFyYW0gc2RwIC0gU2Vzc2lvbiBEZXNjcmlwdG9yIGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gdXNlTWljIC0gSXMgdGhlIG1pY3JvcGhvbmUgaW4gdXNlXHJcbiAgICAgKiBAcmV0dXJucyBBIG1vZGlmaWVkIFNlc3Npb24gRGVzY3JpcHRvclxyXG4gICAgICovXHJcbiAgICBtdW5nZVNEUChzZHA6IHN0cmluZywgdXNlTWljOiBib29sZWFuKSB7XHJcbiAgICAgICAgY29uc3QgbXVuZ2VkU0RQID0gc2RwO1xyXG4gICAgICAgIG11bmdlZFNEUC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAvKGE9Zm10cDpcXGQrIC4qbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9LiopXFxyXFxuL2dtLFxyXG4gICAgICAgICAgICAnJDE7eC1nb29nbGUtc3RhcnQtYml0cmF0ZT0xMDAwMDt4LWdvb2dsZS1tYXgtYml0cmF0ZT0xMDAwMDBcXHJcXG4nXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IGF1ZGlvU0RQID0gJyc7XHJcblxyXG4gICAgICAgIC8vIHNldCBtYXggYml0cmF0ZSB0byBoaWdoZXN0IGJpdHJhdGUgT3B1cyBzdXBwb3J0c1xyXG4gICAgICAgIGF1ZGlvU0RQICs9ICdtYXhhdmVyYWdlYml0cmF0ZT01MTAwMDA7JztcclxuXHJcbiAgICAgICAgaWYgKHVzZU1pYykge1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG1heCBjYXB0dXJlIHJhdGUgdG8gNDhraHogKHNvIHdlIGNhbiBzZW5kIGhpZ2ggcXVhbGl0eSBhdWRpbyBmcm9tIG1pYylcclxuICAgICAgICAgICAgYXVkaW9TRFAgKz0gJ3Nwcm9wLW1heGNhcHR1cmVyYXRlPTQ4MDAwOyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGb3JjZSBtb25vIG9yIHN0ZXJlbyBiYXNlZCBvbiB3aGV0aGVyID9mb3JjZU1vbm8gd2FzIHBhc3NlZCBvciBub3RcclxuICAgICAgICBhdWRpb1NEUCArPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkZvcmNlTW9ub0F1ZGlvKVxyXG4gICAgICAgICAgICA/ICdzdGVyZW89MDsnXHJcbiAgICAgICAgICAgIDogJ3N0ZXJlbz0xOyc7XHJcblxyXG4gICAgICAgIC8vIGVuYWJsZSBpbi1iYW5kIGZvcndhcmQgZXJyb3IgY29ycmVjdGlvbiBmb3Igb3B1cyBhdWRpb1xyXG4gICAgICAgIGF1ZGlvU0RQICs9ICd1c2VpbmJhbmRmZWM9MSc7XHJcblxyXG4gICAgICAgIC8vIFdlIHVzZSB0aGUgbGluZSAndXNlaW5iYW5kZmVjPTEnICh3aGljaCBPcHVzIHVzZXMpIHRvIHNldCBvdXIgT3B1cyBzcGVjaWZpYyBhdWRpbyBwYXJhbWV0ZXJzLlxyXG4gICAgICAgIG11bmdlZFNEUC5yZXBsYWNlKCd1c2VpbmJhbmRmZWM9MScsIGF1ZGlvU0RQKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG11bmdlZFNEUDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSBJY2UgQ2FuZGlkYXRlIGlzIHJlY2VpdmVkIGFkZCB0byB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIFJUQyBJY2UgQ2FuZGlkYXRlIGZyb20gdGhlIFNpZ25hbGluZyBTZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25JY2UoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdwZWVyY29ubmVjdGlvbiBoYW5kbGVPbkljZScsIDYpO1xyXG5cclxuICAgICAgICAvLyAvLyBpZiBmb3JjaW5nIFRVUk4sIHJlamVjdCBhbnkgY2FuZGlkYXRlcyBub3QgcmVsYXlcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Gb3JjZVRVUk4pKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG5vIHJlbGF5IGFkZHJlc3MgaXMgZm91bmQsIGlmIHNvLCB3ZSBhcmUgYXNzdW1pbmcgaXQgbWVhbnMgbm8gVFVSTiBzZXJ2ZXJcclxuICAgICAgICAgICAgaWYgKGljZUNhbmRpZGF0ZS5jYW5kaWRhdGUuaW5kZXhPZigncmVsYXknKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5JbmZvKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYERyb3BwaW5nIGNhbmRpZGF0ZSBiZWNhdXNlIGl0IHdhcyBub3QgVFVSTiByZWxheS4gfCBUeXBlPSAke2ljZUNhbmRpZGF0ZS50eXBlfSB8IFByb3RvY29sPSAke2ljZUNhbmRpZGF0ZS5wcm90b2NvbH0gfCBBZGRyZXNzPSR7aWNlQ2FuZGlkYXRlLmFkZHJlc3N9IHwgUG9ydD0ke2ljZUNhbmRpZGF0ZS5wb3J0fSB8YCxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRJY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gU2lnbmFsaW5nIHNlcnZlciBzdGF0ZSBDaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBTaWduYWxpbmcgU2VydmVyIFN0YXRlIENoYW5nZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTaWduYWxTdGF0ZUNoYW5nZShzdGF0ZTogRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnc2lnbmFsaW5nIHN0YXRlIGNoYW5nZTogJyArIHN0YXRlLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBJY2UgQ29ubmVjdGlvbiBTdGF0ZSBDaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBJY2UgQ29ubmVjdGlvbiBTdGF0ZVxyXG4gICAgICovXHJcbiAgICBoYW5kbGVJY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2Uoc3RhdGU6IEV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ2ljZSBjb25uZWN0aW9uIHN0YXRlIGNoYW5nZTogJyArIHN0YXRlLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm9uSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBJY2UgR2F0aGVyaW5nIFN0YXRlIENoYW5nZXNcclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIEljZSBHYXRoZXJpbmcgU3RhdGUgQ2hhbmdlXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdpY2UgZ2F0aGVyaW5nIHN0YXRlIGNoYW5nZTogJyArIEpTT04uc3RyaW5naWZ5KHN0YXRlKSxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uVHJhY2sgbWV0aG9kXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgd2ViUnRjIHRyYWNrIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2soZXZlbnQ6IFJUQ1RyYWNrRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uVHJhY2soZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGVzIHRoZSBvblBlZXJJY2VDYW5kaWRhdGVcclxuICAgICAqIEBwYXJhbSBldmVudCAtIFRoZSBwZWVyIGljZSBjYW5kaWRhdGVcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlQ2FuZGlkYXRlKGV2ZW50OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5vblBlZXJJY2VDYW5kaWRhdGUoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGVzIHRoZSBvbkRhdGFDaGFubmVsXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgcGVlcidzIGRhdGEgY2hhbm5lbFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVEYXRhQ2hhbm5lbChldmVudDogUlRDRGF0YUNoYW5uZWxFdmVudCkge1xyXG4gICAgICAgIHRoaXMub25EYXRhQ2hhbm5lbChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uVHJhY2sgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSB0cmFja0V2ZW50IC0gVGhlIHdlYlJ0YyB0cmFjayBldmVudFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblRyYWNrKHRyYWNrRXZlbnQ6IFJUQ1RyYWNrRXZlbnQpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3Igb25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSBldmVudCAtIFRoZSB3ZWJSdGMgaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKGV2ZW50OiBFdmVudCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvblBlZXJJY2VDYW5kaWRhdGUgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbkljZUV2ZW50IC0gVGhlIHBlZXIgaWNlIGNhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblBlZXJJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudDogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvbkRhdGFDaGFubmVsIGZvciB1c2Ugb3V0c2lkZSBvZiB0aGUgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyXHJcbiAgICAgKiBAcGFyYW0gZGF0YWNoYW5uZWxFdmVudCAtIFRoZSBwZWVyJ3MgZGF0YSBjaGFubmVsXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uRGF0YUNoYW5uZWwoZGF0YWNoYW5uZWxFdmVudDogUlRDRGF0YUNoYW5uZWxFdmVudCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0dXAgdHJhY2tzIG9uIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gdXNlTWljIC0gaXMgbWljIGluIHVzZVxyXG4gICAgICovXHJcbiAgICBhc3luYyBzZXR1cFRyYW5zY2VpdmVyc0FzeW5jKHVzZU1pYzogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IGhhc1RyYW5zY2VpdmVycyA9XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LmdldFRyYW5zY2VpdmVycygpLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIGEgdHJhbnNjZWl2ZXIgZm9yIGdldHRpbmcgVUUgdmlkZW9cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRUcmFuc2NlaXZlcigndmlkZW8nLCB7IGRpcmVjdGlvbjogJ3JlY3Zvbmx5JyB9KTtcclxuXHJcbiAgICAgICAgLy8gV2UgY2FuIG9ubHkgc2V0IHByZWZlcnJlYyBjb2RlYyBvbiBDaHJvbWVcclxuICAgICAgICBpZiAoUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzICYmIHRoaXMucHJlZmVycmVkQ29kZWMgIT0gJycpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0cmFuc2NlaXZlciBvZiB0aGlzLnBlZXJDb25uZWN0aW9uPy5nZXRUcmFuc2NlaXZlcnMoKSA/PyBbXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjayAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrLmtpbmQgPT09ICd2aWRlbydcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWZlcnJlZFJUUENvZGVjID0gdGhpcy5wcmVmZXJyZWRDb2RlYy5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVjcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZpZGVvLycgKyBwcmVmZXJyZWRSVFBDb2RlY1swXSAvKiBOYW1lICovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2tSYXRlOiA5MDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNkcEZtdHBMaW5lOiBwcmVmZXJyZWRSVFBDb2RlY1sxXSAvKiBzZHBGbXRwTGluZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcHJlZmVycmVkUlRQQ29kZWNbMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0U2V0dGluZ09wdGlvbihPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub3B0aW9ucy5maWx0ZXIoKG9wdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBwcmVmZXJyZWQgY29kZWMgZnJvbSB0aGUgbGlzdCBvZiBwb3NzaWJsZSBjb2RlY3MgYXMgd2UndmUgc2V0IGl0IGFscmVhZHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb24gIT0gdGhpcy5wcmVmZXJyZWRDb2RlYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goKG9wdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1tZW5kIHRoZSByZXN0IG9mIHRoZSBicm93c2VycyBzdXBwb3J0ZWQgY29kZWNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHRDb2RlYyA9IG9wdGlvbi5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZWNzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiAndmlkZW8vJyArIGFsdENvZGVjWzBdIC8qIE5hbWUgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2tSYXRlOiA5MDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZHBGbXRwTGluZTogYWx0Q29kZWNbMV0gLyogc2RwRm10cExpbmUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhbHRDb2RlY1sxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29kZWMgb2YgY29kZWNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlYy5zZHBGbXRwTGluZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGR5bmFtaWNhbGx5IGFkZCBtZW1iZXJzIHRvIHRoZSBjb2RlYywgc28gaW5zdGVhZCByZW1vdmUgdGhlIGZpZWxkIGlmIGl0J3MgZW1wdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb2RlYy5zZHBGbXRwTGluZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2V0Q29kZWNQcmVmZXJlbmNlcyhjb2RlY3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXR1cCBhIHRyYW5zY2VpdmVyIGZvciBzZW5kaW5nIG1pYyBhdWRpbyB0byBVRSBhbmQgcmVjZWl2aW5nIGF1ZGlvIGZyb20gVUVcclxuICAgICAgICBpZiAoIXVzZU1pYykge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7XHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdyZWN2b25seSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBhdWRpbyBvcHRpb25zIGJhc2VkIG9uIG1pYyB1c2FnZVxyXG4gICAgICAgICAgICBjb25zdCBhdWRpb09wdGlvbnMgPSB1c2VNaWNcclxuICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXV0b0dhaW5Db250cm9sOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxDb3VudDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgIGVjaG9DYW5jZWxsYXRpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbGF0ZW5jeTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgIG5vaXNlU3VwcHJlc3Npb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVTaXplOiAxNixcclxuICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMS4wXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG1lZGlhIHNlbmQgb3B0aW9uc1xyXG4gICAgICAgICAgICBjb25zdCBtZWRpYVNlbmRPcHRpb25zOiBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzID0ge1xyXG4gICAgICAgICAgICAgICAgdmlkZW86IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYXVkaW86IGF1ZGlvT3B0aW9uc1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gTm90ZSB1c2luZyBtaWMgb24gYW5kcm9pZCBjaHJvbWUgcmVxdWlyZXMgU1NMIG9yIGNocm9tZTovL2ZsYWdzLyBcInVuc2FmZWx5LXRyZWF0LWluc2VjdXJlLW9yaWdpbi1hcy1zZWN1cmVcIlxyXG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShcclxuICAgICAgICAgICAgICAgIG1lZGlhU2VuZE9wdGlvbnNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKHN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc1RyYW5zY2VpdmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNjZWl2ZXIgb2YgdGhpcy5wZWVyQ29ubmVjdGlvbj8uZ2V0VHJhbnNjZWl2ZXJzKCkgPz8gW10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjayAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gJ2F1ZGlvJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2Ygc3RyZWFtLmdldFRyYWNrcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgJiYgdHJhY2sua2luZCA9PSAnYXVkaW8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlci5yZXBsYWNlVHJhY2sodHJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnc2VuZHJlY3YnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiBzdHJlYW0uZ2V0VHJhY2tzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgJiYgdHJhY2sua2luZCA9PSAnYXVkaW8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRUcmFuc2NlaXZlcih0cmFjaywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3NlbmRyZWN2J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAncmVjdm9ubHknXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuZCBvdmVycmlkZSBldmVudCBmb3Igd2hlbiB0aGUgdmlkZW8gc3RhdHMgYXJlIGZpcmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBBZ2dyZWdhdGVkIFN0YXRzXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uVmlkZW9TdGF0cyhldmVudDogQWdncmVnYXRlZFN0YXRzKSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB0byBzZW5kIHRoZSBSVEMgb2ZmZXIgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqIEBwYXJhbSBvZmZlciAtIFJUQyBPZmZlclxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblNlbmRXZWJSVENPZmZlcihvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgdG8gc2VuZCB0aGUgUlRDIEFuc3dlciB0byB0aGUgU2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIGFuc3dlciAtIFJUQyBBbnN3ZXJcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25TZW5kV2ViUlRDQW5zd2VyKGFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHNob3dpbmcgdGhlIFBlZXIgY29ubmVjdGlvbiBjb25uZWN0aW5nIE92ZXJsYXlcclxuICAgICAqL1xyXG4gICAgc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZygpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzaG93aW5nIHRoZSBQZWVyIGNvbm5lY3Rpb24gRmFpbGVkIG92ZXJsYXlcclxuICAgICAqL1xyXG4gICAgc2hvd1RleHRPdmVybGF5U2V0dXBGYWlsdXJlKCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlQXZhaWxhYmxlQ29kZWNzKFxyXG4gICAgICAgIHJ0Y1Nlc3Npb25EZXNjcmlwdGlvbjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdFxyXG4gICAgKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgLy8gTm8gcG9pbnQgaW4gdXBkYXRpbmcgdGhlIGF2YWlsYWJsZSBjb2RlY3MgaWYgb24gRkZcclxuICAgICAgICBpZiAoIVJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcylcclxuICAgICAgICAgICAgcmV0dXJuIFsnT25seSBhdmFpbGFibGUgb24gQ2hyb21lJ107XHJcblxyXG4gICAgICAgIGNvbnN0IHVlU3VwcG9ydGVkQ29kZWNzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBzcGxpdFNlY3Rpb25zKHJ0Y1Nlc3Npb25EZXNjcmlwdGlvbi5zZHApO1xyXG4gICAgICAgIC8vIGRpc2NhcmQgdGhlIHNlc3Npb24gaW5mb3JtYXRpb24gYXMgd2Ugb25seSB3YW50IG1lZGlhIHJlbGF0ZWQgaW5mb1xyXG4gICAgICAgIHNlY3Rpb25zLnNoaWZ0KCk7XHJcbiAgICAgICAgc2VjdGlvbnMuZm9yRWFjaCgobWVkaWFTZWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgY29kZWNzIH0gPSBwYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcclxuICAgICAgICAgICAgLy8gRmlsdGVyIG9ubHkgZm9yIFZQWCAvIEgyNlggLyBBVjFcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IC8oVlBcXGR8SDI2XFxkfEFWMSkuKi87XHJcbiAgICAgICAgICAgIGNvZGVjcy5mb3JFYWNoKChjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHIgPVxyXG4gICAgICAgICAgICAgICAgICAgIGMubmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjLnBhcmFtZXRlcnMgfHwge30pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHApID0+IHAgKyAnPScgKyBjLnBhcmFtZXRlcnNbcF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7Jyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IG1hdGNoZXIuZXhlYyhzdHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMubmFtZSA9PSAnVlA5Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVRSBhbnN3ZXJzIGRvbid0IHNwZWNpZnkgcHJvZmlsZSBidXQgd2Uga25vdyB3ZSB3YW50IHByb2ZpbGUgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjLnBhcmFtZXRlcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJvZmlsZS1pZCc6ICcwJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlY1N0cjogc3RyaW5nID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5uYW1lICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoYy5wYXJhbWV0ZXJzIHx8IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocCkgPT4gcCArICc9JyArIGMucGFyYW1ldGVyc1twXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdWVTdXBwb3J0ZWRDb2RlY3MucHVzaChjb2RlY1N0cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdWVTdXBwb3J0ZWRDb2RlY3M7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBTZXNzaW9uIHN0YXRpc3RpY3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXNzaW9uU3RhdHMge1xyXG4gICAgcnVuVGltZTogc3RyaW5nO1xyXG4gICAgY29udHJvbHNTdHJlYW1JbnB1dDogc3RyaW5nO1xyXG4gICAgdmlkZW9FbmNvZGVyQXZnUVA6IG51bWJlcjtcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRvIGhvbGQgdGhlIHN0cmVhbSBzdGF0cyBkYXRhIGNvbWluZyBpbiBmcm9tIHdlYlJ0Y1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cmVhbVN0YXRzIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBzdHJlYW1JZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICAgIHRyYWNrSWRzOiBzdHJpbmdbXTtcclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgQ29uZmlnLCBPcHRpb25QYXJhbWV0ZXJzIH0gZnJvbSAnLi4vQ29uZmlnL0NvbmZpZyc7XHJcbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gJy4uL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0cyc7XHJcbmltcG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMnO1xyXG5pbXBvcnQgeyBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSAnLi4vV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBGbGFncywgTnVtZXJpY1BhcmFtZXRlcnMgfSBmcm9tICcuLi9Db25maWcvQ29uZmlnJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcbmltcG9ydCB7IEluaXRpYWxTZXR0aW5ncyB9IGZyb20gJy4uL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyc7XHJcbmltcG9ydCB7IE9uU2NyZWVuS2V5Ym9hcmQgfSBmcm9tICcuLi9VSS9PblNjcmVlbktleWJvYXJkJztcclxuaW1wb3J0IHtcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIEluaXRpYWxTZXR0aW5nc0V2ZW50LFxyXG4gICAgTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCxcclxuICAgIFBpeGVsU3RyZWFtaW5nRXZlbnQsXHJcbiAgICBTdGF0c1JlY2VpdmVkRXZlbnQsXHJcbiAgICBTdHJlYW1Mb2FkaW5nRXZlbnQsXHJcbiAgICBTdHJlYW1QcmVDb25uZWN0RXZlbnQsXHJcbiAgICBTdHJlYW1SZWNvbm5lY3RFdmVudCxcclxuICAgIFN0cmVhbVByZURpc2Nvbm5lY3RFdmVudCxcclxuICAgIFZpZGVvRW5jb2RlckF2Z1FQRXZlbnQsXHJcbiAgICBWaWRlb0luaXRpYWxpemVkRXZlbnQsXHJcbiAgICBXZWJSdGNBdXRvQ29ubmVjdEV2ZW50LFxyXG4gICAgV2ViUnRjQ29ubmVjdGVkRXZlbnQsXHJcbiAgICBXZWJSdGNDb25uZWN0aW5nRXZlbnQsXHJcbiAgICBXZWJSdGNEaXNjb25uZWN0ZWRFdmVudCxcclxuICAgIFdlYlJ0Y0ZhaWxlZEV2ZW50LFxyXG4gICAgV2ViUnRjU2RwRXZlbnRcclxufSBmcm9tICcuLi9VdGlsL0V2ZW50RW1pdHRlcic7XHJcbmltcG9ydCB7IE1lc3NhZ2VPblNjcmVlbktleWJvYXJkIH0gZnJvbSAnLi4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XHJcbmltcG9ydCB7IFdlYlhSQ29udHJvbGxlciB9IGZyb20gJy4uL1dlYlhSL1dlYlhSQ29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBpeGVsU3RyZWFtaW5nT3ZlcnJpZGVzIHtcclxuICAgIC8qKiBUaGUgRE9NIGVsbWVudCB3aGVyZSBQaXhlbCBTdHJlYW1pbmcgdmlkZW8gYW5kIHVzZXIgaW5wdXQgZXZlbnQgaGFuZGxlcnMgYXJlIGF0dGFjaGVkIHRvLlxyXG4gICAgICogWW91IGNhbiBnaXZlIGFuIGV4aXN0aW5nIERPTSBlbGVtZW50IGhlcmUuIElmIG5vdCBnaXZlbiwgdGhlIGxpYnJhcnkgd2lsbCBjcmVhdGUgYSBuZXcgZGl2IGVsZW1lbnRcclxuICAgICAqIHRoYXQgaXMgbm90IGF0dGFjaGVkIGFueXdoZXJlLiBJbiB0aGlzIGNhc2UgeW91IGNhbiBsYXRlciBnZXQgYWNjZXNzIHRvIHRoaXMgbmV3IGVsZW1lbnQgYW5kXHJcbiAgICAgKiBhdHRhY2ggaXQgdG8geW91ciB3ZWIgcGFnZS4gKi9cclxuICAgIHZpZGVvRWxlbWVudFBhcmVudD86IEhUTUxFbGVtZW50O1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGtleSBjbGFzcyBmb3IgdGhlIGJyb3dzZXIgc2lkZSBvZiBhIFBpeGVsIFN0cmVhbWluZyBhcHBsaWNhdGlvbiwgaXQgaW5jbHVkZXM6XHJcbiAqIFdlYlJUQyBoYW5kbGluZywgWFIgc3VwcG9ydCwgaW5wdXQgaGFuZGxpbmcsIGFuZCBlbWl0dGVycyBmb3IgbGlmZXRpbWUgYW5kIHN0YXRlIGNoYW5nZSBldmVudHMuXHJcbiAqIFVzZXJzIGFyZSBlbmNvdXJhZ2VkIHRvIHVzZSB0aGlzIGNsYXNzIGFzIGlzLCB0aHJvdWdoIGNvbXBvc2l0aW9uLCBvciBleHRlbmQgaXQuIEluIGFueSBjYXNlLCBcclxuICogdGhpcyB3aWxsIGxpa2VseSBiZSB0aGUgY29yZSBvZiB5b3VyIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlIGluIHRlcm1zIG9mIGZ1bmN0aW9uYWxpdHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGl4ZWxTdHJlYW1pbmcge1xyXG4gICAgcHJvdGVjdGVkIF93ZWJSdGNDb250cm9sbGVyOiBXZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xyXG4gICAgcHJvdGVjdGVkIF93ZWJYckNvbnRyb2xsZXI6IFdlYlhSQ29udHJvbGxlcjtcclxuICAgIC8qKlxyXG4gICAgICogQ29uZmlndXJhdGlvbiBvYmplY3QuIFlvdSBjYW4gcmVhZCBvciBtb2RpZnkgY29uZmlnIHRocm91Z2ggdGhpcyBvYmplY3QuIFdoZW5ldmVyXHJcbiAgICAgKiB0aGUgY29uZmlndXJhdGlvbiBpcyBjaGFuZ2VkLCB0aGUgbGlicmFyeSB3aWxsIGVtaXQgYSBgc2V0dGluZ3NDaGFuZ2VkYCBldmVudC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbmZpZzogQ29uZmlnO1xyXG5cclxuICAgIHByaXZhdGUgX3ZpZGVvRWxlbWVudFBhcmVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgX3Nob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0ID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgYWxsb3dDb25zb2xlQ29tbWFuZHMgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIG9uU2NyZWVuS2V5Ym9hcmRIZWxwZXI6IE9uU2NyZWVuS2V5Ym9hcmQ7XHJcblxyXG4gICAgcHJpdmF0ZSBfdmlkZW9TdGFydFRpbWU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2lucHV0Q29udHJvbGxlcjogYm9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIF9ldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb25maWcgLSBBIG5ld2x5IGluc3RhbnRpYXRlZCBjb25maWcgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gb3ZlcnJpZGVzIC0gUGFyYW1ldGVycyB0byBvdmVycmlkZSBkZWZhdWx0IGJlaGF2aW91clxyXG4gICAgICogcmV0dXJucyB0aGUgYmFzZSBQaXhlbCBzdHJlYW1pbmcgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBvdmVycmlkZXM/OiBQaXhlbFN0cmVhbWluZ092ZXJyaWRlcykge1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG5cclxuICAgICAgICBpZiAob3ZlcnJpZGVzPy52aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlkZW9FbGVtZW50UGFyZW50ID0gb3ZlcnJpZGVzLnZpZGVvRWxlbWVudFBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVTZXR0aW5ncygpO1xyXG5cclxuICAgICAgICAvLyBzZXR1cCBXZWJSVENcclxuICAgICAgICB0aGlzLnNldFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIoXHJcbiAgICAgICAgICAgIG5ldyBXZWJSdGNQbGF5ZXJDb250cm9sbGVyKHRoaXMuY29uZmlnLCB0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIE9uc2NyZWVuIGtleWJvYXJkXHJcbiAgICAgICAgdGhpcy5vblNjcmVlbktleWJvYXJkSGVscGVyID0gbmV3IE9uU2NyZWVuS2V5Ym9hcmQoXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLm9uU2NyZWVuS2V5Ym9hcmRIZWxwZXIudW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgPSAoXHJcbiAgICAgICAgICAgIHg6IG51bWJlcixcclxuICAgICAgICAgICAgeTogbnVtYmVyXHJcbiAgICAgICAgKSA9PlxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlcXVlc3RVbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQoXHJcbiAgICAgICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICAgICAgeVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZCA9IChjb21tYW5kOiBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCkgPT5cclxuICAgICAgICAgICAgdGhpcy5vblNjcmVlbktleWJvYXJkSGVscGVyLnNob3dPblNjcmVlbktleWJvYXJkKGNvbW1hbmQpO1xyXG5cclxuICAgICAgICB0aGlzLl93ZWJYckNvbnRyb2xsZXIgPSBuZXcgV2ViWFJDb250cm9sbGVyKHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSB2aWRlbyBzdHJlYW0gZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB2aWRlb0VsZW1lbnRQYXJlbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGlmICghdGhpcy5fdmlkZW9FbGVtZW50UGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICB0aGlzLl92aWRlb0VsZW1lbnRQYXJlbnQuaWQgPSAndmlkZW9FbGVtZW50UGFyZW50JztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyZSB0aGUgc2V0dGluZ3Mgd2l0aCBvbiBjaGFuZ2UgbGlzdGVuZXJzIGFuZCBhbnkgYWRkaXRpb25hbCBwZXIgZXhwZXJpZW5jZSBzZXR0aW5ncy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb25maWd1cmVTZXR0aW5ncygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxyXG4gICAgICAgICAgICBGbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyLFxyXG4gICAgICAgICAgICAod2FudHNRdWFsaXR5Q29udHJvbGxlcjogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNldHRpbmcgaGFzIGJlZW4gc2V0IHRvIHRydWUgKGVpdGhlciBwcm9ncmFtYXRpY2FsbHkgb3IgdGhlIHVzZXIgaGFzIGZsaWNrZWQgdGhlIHRvZ2dsZSlcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB3ZSBhcmVuJ3QgY3VycmVudGx5IHF1YWxpdHkgY29udHJvbGxlciwgc2VuZCB0aGUgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHdhbnRzUXVhbGl0eUNvbnRyb2xsZXIgPT09IHRydWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5fd2ViUnRjQ29udHJvbGxlci5pc1F1YWxpdHlDb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIEZsYWdzLkFGS0RldGVjdGlvbixcclxuICAgICAgICAgICAgKGlzQUZLRW5hYmxlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRBZmtFbmFibGVkKGlzQUZLRW5hYmxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxyXG4gICAgICAgICAgICBGbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbixcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIEZsYWdzLkhvdmVyaW5nTW91c2VNb2RlLFxyXG4gICAgICAgICAgICAoaXNIb3ZlcmluZ01vdXNlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnTGFiZWwoXHJcbiAgICAgICAgICAgICAgICAgICAgRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgYENvbnRyb2wgU2NoZW1lOiAke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0hvdmVyaW5nTW91c2UgPyAnSG92ZXJpbmcnIDogJ0xvY2tlZCdcclxuICAgICAgICAgICAgICAgICAgICB9IE1vdXNlYFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0TW91c2VJbnB1dEVuYWJsZWQodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Nb3VzZUlucHV0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB1c2VyIGlucHV0XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICAgICAgRmxhZ3MuS2V5Ym9hcmRJbnB1dCxcclxuICAgICAgICAgICAgKGlzRW5hYmxlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRLZXlib2FyZElucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICAgICAgRmxhZ3MuTW91c2VJbnB1dCxcclxuICAgICAgICAgICAgKGlzRW5hYmxlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRNb3VzZUlucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICAgICAgRmxhZ3MuVG91Y2hJbnB1dCxcclxuICAgICAgICAgICAgKGlzRW5hYmxlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRUb3VjaElucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICAgICAgRmxhZ3MuR2FtZXBhZElucHV0LFxyXG4gICAgICAgICAgICAoaXNFbmFibGVkOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldEdhbWVQYWRJbnB1dEVuYWJsZWQoaXNFbmFibGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIGVuY29kZXIgc2V0dGluZ3NcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWluUVAsXHJcbiAgICAgICAgICAgIChuZXdWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJy0tLS0tLS0tICBTZW5kaW5nIE1pblFQICAtLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZEVuY29kZXJNaW5RUChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLFxyXG4gICAgICAgICAgICAgICAgICAgIDdcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcclxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVAsXHJcbiAgICAgICAgICAgIChuZXdWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJy0tLS0tLS0tICBTZW5kaW5nIGVuY29kZXIgc2V0dGluZ3MgIC0tLS0tLS0tJyxcclxuICAgICAgICAgICAgICAgICAgICA3XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kRW5jb2Rlck1heFFQKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFdlYlJUQyBzZXR0aW5nc1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxyXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlLFxyXG4gICAgICAgICAgICAobmV3VmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICctLS0tLS0tLSAgU2VuZGluZyB3ZWIgcnRjIHNldHRpbmdzICAtLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFdlYlJUQ01pbkJpdHJhdGUobmV3VmFsdWUgKiAxMDAwIC8qIGticHMgdG8gYnBzICovKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxyXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlLFxyXG4gICAgICAgICAgICAobmV3VmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICctLS0tLS0tLSAgU2VuZGluZyB3ZWIgcnRjIHNldHRpbmdzICAtLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFdlYlJUQ01heEJpdHJhdGUobmV3VmFsdWUgKiAxMDAwIC8qIGticHMgdG8gYnBzICovKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxyXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMsXHJcbiAgICAgICAgICAgIChuZXdWYWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJy0tLS0tLS0tICBTZW5kaW5nIHdlYiBydGMgc2V0dGluZ3MgIC0tLS0tLS0tJyxcclxuICAgICAgICAgICAgICAgICAgICA3XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kV2ViUlRDRnBzKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXHJcbiAgICAgICAgICAgICAgICAgICAgN1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk9wdGlvblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsXHJcbiAgICAgICAgICAgIChuZXdWYWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2ViUnRjQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0UHJlZmVycmVkQ29kZWMobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuX3JlZ2lzdGVyT25DaGFuZ2VFdmVudHModGhpcy5fZXZlbnRFbWl0dGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlIHRoZSBvbiBzY3JlZW4ga2V5Ym9hcmQgd2hlbiByZWNlaXZpbmcgdGhlIGNvbW1hbmQgZnJvbSB0aGUgc3RyZWFtZXJcclxuICAgICAqIEBwYXJhbSBjb21tYW5kIC0gdGhlIGtleWJvYXJkIGNvbW1hbmRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZChjb21tYW5kOiBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgaW5wdXQgY29udHJvbCBvd25lcnNoaXBcclxuICAgICAqIEBwYXJhbSBpbnB1dENvbnRyb2xPd25lcnNoaXAgLSBkb2VzIHRoZSB1c2VyIGhhdmUgaW5wdXQgY29udHJvbCBvd25lcnNoaXBcclxuICAgICAqL1xyXG4gICAgX29uSW5wdXRDb250cm9sT3duZXJzaGlwKGlucHV0Q29udHJvbE93bmVyc2hpcDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2lucHV0Q29udHJvbGxlciA9IGlucHV0Q29udHJvbE93bmVyc2hpcDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBXZWJSVENQbGF5ZXJDb250cm9sbGVyIGludGVyZmFjZSB0byBwcm92aWRlIFdlYlJUQ1BsYXllckNvbnRyb2xsZXIgZnVuY3Rpb25hbGl0eSB3aXRoaW4gdGhpcyBjbGFzcyBhbmQgc2V0IHVwIGFueXRoaW5nIHRoYXQgcmVxdWlyZXMgaXRcclxuICAgICAqIEBwYXJhbSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIC0gYSBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIGNvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZXRXZWJSdGNQbGF5ZXJDb250cm9sbGVyKFxyXG4gICAgICAgIHdlYlJ0Y1BsYXllckNvbnRyb2xsZXI6IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXJcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIgPSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xyXG5cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldFByZWZlcnJlZENvZGVjKFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5nZXRTZXR0aW5nT3B0aW9uKE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMpXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0ZWRcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucmVzaXplUGxheWVyU3R5bGUoKTtcclxuXHJcbiAgICAgICAgLy8gY29ubmVjdCBpZiBhdXRvIGNvbm5lY3QgZmxhZyBpcyBlbmFibGVkXHJcbiAgICAgICAgdGhpcy5jaGVja0ZvckF1dG9Db25uZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0IHRvIHNpZ25hbGluZyBzZXJ2ZXIuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25uZWN0KCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBTdHJlYW1QcmVDb25uZWN0RXZlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5jb25uZWN0VG9TaWduYWxsaW5nU2VydmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNvbm5lY3RzIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyLiBJZiBjb25uZWN0aW9uIGlzIHVwLCBkaXNjb25uZWN0cyBmaXJzdFxyXG4gICAgICogYmVmb3JlIGVzdGFibGlzaGluZyBhIG5ldyBjb25uZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWNvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFN0cmVhbVJlY29ubmVjdEV2ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucmVzdGFydFN0cmVhbUF1dG9tYXRpY2FsbHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc2Nvbm5lY3QgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlciBhbmQgY2xvc2Ugb3BlbiBwZWVyIGNvbm5lY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGlzY29ubmVjdCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBsYXkgdGhlIHN0cmVhbS4gQ2FuIGJlIGNhbGxlZCBvbmx5IGFmdGVyIGEgcGVlciBjb25uZWN0aW9uIGhhcyBiZWVuIGVzdGFibGlzaGVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGxheSgpIHtcclxuICAgICAgICB0aGlzLl9vblN0cmVhbUxvYWRpbmcoKTtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnBsYXlTdHJlYW0oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEF1dG8gY29ubmVjdCBpZiBBdXRvQ29ubmVjdCBmbGFnIGlzIGVuYWJsZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja0ZvckF1dG9Db25uZWN0KCkge1xyXG4gICAgICAgIC8vIHNldCB1cCBpZiB0aGUgYXV0byBwbGF5IHdpbGwgYmUgdXNlZCBvciByZWd1bGFyIGNsaWNrIHRvIHN0YXJ0XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuQXV0b0Nvbm5lY3QpKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIGF1dG9wbGF5aW5nIHNob3cgYW4gaW5mbyBvdmVybGF5IHdoaWxlIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBjb25uZWN0aW9uIHRvIGJlZ2luXHJcbiAgICAgICAgICAgIHRoaXMuX29uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5jb25uZWN0VG9TaWduYWxsaW5nU2VydmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW1pdCBhbiBldmVudCBvbiBhdXRvIGNvbm5lY3RpbmdcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjQXV0b0Nvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3QgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGEgd2ViUlRDIGFuc3dlclxyXG4gICAgICovXHJcbiAgICBfb25XZWJSdGNTZHAoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFdlYlJ0Y1NkcEV2ZW50KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgYSBTdHJlYW1Mb2FkaW5nIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIF9vblN0cmVhbUxvYWRpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFN0cmVhbUxvYWRpbmdFdmVudCgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGZpcmVkIHdoZW4gdGhlIHZpZGVvIGlzIGRpc2Nvbm5lY3RlZCAtIGVtaXRzIGdpdmVuIGV2ZW50U3RyaW5nIG9yIGFuIG92ZXJyaWRlXHJcbiAgICAgKiBtZXNzYWdlIGZyb20gd2ViUnRjQ29udHJvbGxlciBpZiBvbmUgaGFzIGJlZW4gc2V0XHJcbiAgICAgKiBAcGFyYW0gZXZlbnRTdHJpbmcgLSB0aGUgZXZlbnQgdGV4dCB0aGF0IHdpbGwgYmUgZW1pdHRlZFxyXG4gICAgICovXHJcbiAgICBfb25EaXNjb25uZWN0KGV2ZW50U3RyaW5nOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBpZiB3ZSBoYXZlIG92ZXJyaWRkZW4gdGhlIGRlZmF1bHQgZGlzY29ubmVjdGlvbiBtZXNzYWdlLCBhc3NpZ24gdGhlIG5ldyB2YWx1ZSBoZXJlXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPSAnJyAmJlxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPT1cclxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGV2ZW50U3RyaW5nID0gdGhpcy5fd2ViUnRjQ29udHJvbGxlci5nZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgbmV3IFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50KHtcclxuICAgICAgICAgICAgICAgIGV2ZW50U3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3RcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICh0aGlzLl9zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIFdlYiBSdGMgaXMgY29ubmVjdGluZ1xyXG4gICAgICovXHJcbiAgICBfb25XZWJSdGNDb25uZWN0aW5nKCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBXZWJSdGNDb25uZWN0aW5nRXZlbnQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gV2ViIFJ0YyBoYXMgY29ubmVjdGVkXHJcbiAgICAgKi9cclxuICAgIF9vbldlYlJ0Y0Nvbm5lY3RlZCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgV2ViUnRjQ29ubmVjdGVkRXZlbnQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gV2ViIFJ0YyBmYWlscyB0byBjb25uZWN0XHJcbiAgICAgKi9cclxuICAgIF9vbldlYlJ0Y0ZhaWxlZCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgV2ViUnRjRmFpbGVkRXZlbnQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgVmlkZW8gaGFzIGJlZW4gSW5pdGlhbGl6ZWRcclxuICAgICAqL1xyXG4gICAgX29uVmlkZW9Jbml0aWFsaXplZCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgVmlkZW9Jbml0aWFsaXplZEV2ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuX3ZpZGVvU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBsYXRlbmN5IHRlc3QgcmVzdWx0c1xyXG4gICAgICogQHBhcmFtIGxhdGVuY3kgLSBsYXRlbmN5IHRlc3QgcmVzdWx0cyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgX29uTGF0ZW5jeVRlc3RSZXN1bHQobGF0ZW5jeVRpbWluZ3M6IExhdGVuY3lUZXN0UmVzdWx0cykge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICBuZXcgTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCh7IGxhdGVuY3lUaW1pbmdzIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyB2aWRlbyBzdGF0aXN0aWNzXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9TdGF0cyAtIHZpZGVvIHN0YXRpc3RpY3MgYXMgYSBhZ2dyZWdhdGUgc3RhdHMgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIF9vblZpZGVvU3RhdHModmlkZW9TdGF0czogQWdncmVnYXRlZFN0YXRzKSB7XHJcbiAgICAgICAgLy8gRHVyYXRpb25cclxuICAgICAgICBpZiAoIXRoaXMuX3ZpZGVvU3RhcnRUaW1lIHx8IHRoaXMuX3ZpZGVvU3RhcnRUaW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlkZW9TdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWRlb1N0YXRzLmhhbmRsZVNlc3Npb25TdGF0aXN0aWNzKFxyXG4gICAgICAgICAgICB0aGlzLl92aWRlb1N0YXJ0VGltZSxcclxuICAgICAgICAgICAgdGhpcy5faW5wdXRDb250cm9sbGVyLFxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvQXZnUXBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgbmV3IFN0YXRzUmVjZWl2ZWRFdmVudCh7IGFnZ3JlZ2F0ZWRTdGF0czogdmlkZW9TdGF0cyB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiBjYWxjdWxhdGluZyB0aGUgYXZlcmFnZSB2aWRlbyBlbmNvZGVyIHFwXHJcbiAgICAgKiBAcGFyYW0gUVAgLSB0aGUgcXVhbGl0eSBudW1iZXIgb2YgdGhlIHN0cmVhbVxyXG4gICAgICovXHJcbiAgICBfb25WaWRlb0VuY29kZXJBdmdRUChRUDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgIG5ldyBWaWRlb0VuY29kZXJBdmdRUEV2ZW50KHsgYXZnUVA6IFFQIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBhbmQgaGFuZGxpbmcgaW5pdGlhbCBzZXR0aW5ncyBmb3IgdGhlIFVFIGFwcFxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIC0gaW5pdGlhbCBVRSBhcHAgc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgX29uSW5pdGlhbFNldHRpbmdzKHNldHRpbmdzOiBJbml0aWFsU2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgICAgbmV3IEluaXRpYWxTZXR0aW5nc0V2ZW50KHsgc2V0dGluZ3MgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5QaXhlbFN0cmVhbWluZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgPVxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncy5BbGxvd1BpeGVsU3RyZWFtaW5nQ29tbWFuZHMgPz8gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93Q29uc29sZUNvbW1hbmRzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkluZm8oXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnLUFsbG93UGl4ZWxTdHJlYW1pbmdDb21tYW5kcz1mYWxzZSwgc2VuZGluZyBhcmJpdHJhcnkgY29uc29sZSBjb21tYW5kcyBmcm9tIGJyb3dzZXIgdG8gVUUgaXMgZGlzYWJsZWQuJ1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXNlVXJsUGFyYW1zID0gdGhpcy5jb25maWcudXNlVXJsUGFyYW1zO1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLkVuY29kZXJTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhcclxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLk1pblFQLFxyXG4gICAgICAgICAgICAgICAgLy8gSWYgYSBzZXR0aW5nIGlzIHNldCBpbiB0aGUgVVJMLCBtYWtlIHN1cmUgd2UgcmVzcGVjdCB0aGF0IHZhbHVlIGFzIG9wcG9zZWQgdG8gd2hhdCB0aGUgYXBwbGljYXRpb24gc2VuZHMgdXNcclxuICAgICAgICAgICAgICAgICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhOdW1lcmljUGFyYW1ldGVycy5NaW5RUCkpIFxyXG4gICAgICAgICAgICAgICAgICAgID8gTnVtYmVyLnBhcnNlSW50KHVybFBhcmFtcy5nZXQoTnVtZXJpY1BhcmFtZXRlcnMuTWluUVApKSBcclxuICAgICAgICAgICAgICAgICAgICA6IHNldHRpbmdzLkVuY29kZXJTZXR0aW5ncy5NaW5RUFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE51bWVyaWNTZXR0aW5nKFxyXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVAsXHJcbiAgICAgICAgICAgICAgICAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVApKSBcclxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KE51bWVyaWNQYXJhbWV0ZXJzLk1heFFQKSkgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5FbmNvZGVyU2V0dGluZ3MuTWF4UVBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLldlYlJUQ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE51bWVyaWNTZXR0aW5nKFxyXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSxcclxuICAgICAgICAgICAgICAgICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlKSkgXHJcbiAgICAgICAgICAgICAgICAgICAgPyBOdW1iZXIucGFyc2VJbnQodXJsUGFyYW1zLmdldChOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlKSkgLyAxMDAwIC8qIGJwcyB0byBrYnBzICovXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5XZWJSVENTZXR0aW5ncy5NaW5CaXRyYXRlIC8gMTAwMCAvKiBicHMgdG8ga2JwcyAqL1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhcclxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsXHJcbiAgICAgICAgICAgICAgICAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSkpIFxyXG4gICAgICAgICAgICAgICAgICAgID8gTnVtYmVyLnBhcnNlSW50KHVybFBhcmFtcy5nZXQoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSkpIC8gMTAwMCAvKiBicHMgdG8ga2JwcyAqL1xyXG4gICAgICAgICAgICAgICAgICAgIDogc2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MuTWF4Qml0cmF0ZSAvIDEwMDAgLyogYnBzIHRvIGticHMgKi9cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhcclxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUyxcclxuICAgICAgICAgICAgICAgICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhOdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMpKSBcclxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUykpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5XZWJSVENTZXR0aW5ncy5GUFNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiBzZXR0aW5nIHF1YWxpdHkgY29udHJvbCBvd25lcnNoaXAgb2YgYSBzdHJlYW1cclxuICAgICAqIEBwYXJhbSBoYXNRdWFsaXR5T3duZXJzaGlwIC0gZG9lcyB0aGlzIHVzZXIgaGF2ZSBxdWFsaXR5IG93bmVyc2hpcCBvZiB0aGUgc3RyZWFtIHRydWUgLyBmYWxzZVxyXG4gICAgICovXHJcbiAgICBfb25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChoYXNRdWFsaXR5T3duZXJzaGlwOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcuc2V0RmxhZ0VuYWJsZWQoXHJcbiAgICAgICAgICAgIEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGhhc1F1YWxpdHlPd25lcnNoaXBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVxdWVzdCBhIGNvbm5lY3Rpb24gbGF0ZW5jeSB0ZXN0LlxyXG4gICAgICogTk9URTogVGhlcmUgYXJlIHBsYW5zIHRvIHJlZmFjdG9yIGFsbCByZXF1ZXN0KiBmdW5jdGlvbnMuIEV4cGVjdCBjaGFuZ2VzIGlmIHlvdSB1c2UgdGhpcyFcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXF1ZXN0TGF0ZW5jeVRlc3QoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kTGF0ZW5jeVRlc3QoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3QgZm9yIHRoZSBVRSBhcHBsaWNhdGlvbiB0byBzaG93IEZQUyBjb3VudGVyLlxyXG4gICAgICogTk9URTogVGhlcmUgYXJlIHBsYW5zIHRvIHJlZmFjdG9yIGFsbCByZXF1ZXN0KiBmdW5jdGlvbnMuIEV4cGVjdCBjaGFuZ2VzIGlmIHlvdSB1c2UgdGhpcyFcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXF1ZXN0U2hvd0ZwcygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRTaG93RnBzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0IGZvciBhIG5ldyBJRnJhbWUgZnJvbSB0aGUgVUUgYXBwbGljYXRpb24uXHJcbiAgICAgKiBOT1RFOiBUaGVyZSBhcmUgcGxhbnMgdG8gcmVmYWN0b3IgYWxsIHJlcXVlc3QqIGZ1bmN0aW9ucy4gRXhwZWN0IGNoYW5nZXMgaWYgeW91IHVzZSB0aGlzIVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlcXVlc3RJZnJhbWUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kSWZyYW1lUmVxdWVzdCgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBkYXRhIHRvIFVFIGFwcGxpY2F0aW9uLiBUaGUgZGF0YSB3aWxsIGJlIHJ1biB0aHJvdWdoIEpTT04uc3RyaW5naWZ5KCkgc28gZS5nLiBzdHJpbmdzXHJcbiAgICAgKiBhbmQgYW55IHNlcmlhbGl6YWJsZSBwbGFpbiBKU09OIG9iamVjdHMgd2l0aCBubyByZWN1cnJlbmNlIGNhbiBiZSBzZW50LlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBzdWNjZWVkZWQsIGZhbHNlIGlmIHJlamVjdGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbWl0VUlJbnRlcmFjdGlvbihkZXNjcmlwdG9yOiBvYmplY3QgfCBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmVtaXRVSUludGVyYWN0aW9uKGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIGNvbW1hbmQgdG8gVUUgYXBwbGljYXRpb24uIEJsb2NrcyBDb25zb2xlQ29tbWFuZCBkZXNjcmlwdG9ycyB1bmxlc3MgVUVcclxuICAgICAqIGhhcyBzaWduYWxlZCB0aGF0IGl0IGFsbG93cyBjb25zb2xlIGNvbW1hbmRzLlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBzdWNjZWVkZWQsIGZhbHNlIGlmIHJlamVjdGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbWl0Q29tbWFuZChkZXNjcmlwdG9yOiBvYmplY3QpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgJiYgJ0NvbnNvbGVDb21tYW5kJyBpbiBkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5lbWl0Q29tbWFuZChkZXNjcmlwdG9yKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBjb25zb2xlIGNvbW1hbmQgdG8gVUUgYXBwbGljYXRpb24uIE9ubHkgYWxsb3dlZCBpZiBVRSBoYXMgc2lnbmFsZWQgdGhhdCBpdCBhbGxvd3NcclxuICAgICAqIGNvbnNvbGUgY29tbWFuZHMuXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHN1Y2NlZWRlZCwgZmFsc2UgaWYgcmVqZWN0ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGVtaXRDb25zb2xlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgfHwgIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmVtaXRDb25zb2xlQ29tbWFuZChjb21tYW5kKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIFVFIC0+IGJyb3dzZXIgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlIGhhbmRsZXJcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBtZXRob2QgdG8gYmUgYWN0aXZhdGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRSZXNwb25zZUV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgbmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGxpc3RlbmVyOiAocmVzcG9uc2U6IHN0cmluZykgPT4gdm9pZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5yZXNwb25zZUNvbnRyb2xsZXIuYWRkUmVzcG9uc2VFdmVudExpc3RlbmVyKG5hbWUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIFVFIC0+IGJyb3dzZXIgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlIGhhbmRsZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZVJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlc3BvbnNlQ29udHJvbGxlci5yZW1vdmVSZXNwb25zZUV2ZW50TGlzdGVuZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwYXRjaCBhIG5ldyBldmVudC5cclxuICAgICAqIEBwYXJhbSBlIGV2ZW50XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudChlOiBQaXhlbFN0cmVhbWluZ0V2ZW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGFuIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBldmVudCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lcjxcclxuICAgICAgICBUIGV4dGVuZHMgUGl4ZWxTdHJlYW1pbmdFdmVudFsndHlwZSddLFxyXG4gICAgICAgIEUgZXh0ZW5kcyBQaXhlbFN0cmVhbWluZ0V2ZW50ICYgeyB0eXBlOiBUIH1cclxuICAgID4odHlwZTogVCwgbGlzdGVuZXI6IChlOiBFdmVudCAmIEUpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlci5cclxuICAgICAqIEBwYXJhbSB0eXBlIGV2ZW50IG5hbWVcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBldmVudCBoYW5kbGVyIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyPFxyXG4gICAgICAgIFQgZXh0ZW5kcyBQaXhlbFN0cmVhbWluZ0V2ZW50Wyd0eXBlJ10sXHJcbiAgICAgICAgRSBleHRlbmRzIFBpeGVsU3RyZWFtaW5nRXZlbnQgJiB7IHR5cGU6IFQgfVxyXG4gICAgPih0eXBlOiBULCBsaXN0ZW5lcjogKGU6IEV2ZW50ICYgRSkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZS9kaXNhYmxlIFhSIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b2dnbGVYUigpIHtcclxuICAgICAgICB0aGlzLndlYlhyQ29udHJvbGxlci54ckNsaWNrZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhc3MgaW4gYSBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIHNpZ25hbGxpbmcgc2VydmVyIFVSTC5cclxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIHByb2dyYW1tYXRpY2FsbHkgY29uc3RydWN0IHlvdXIgc2lnbmFsbGluZyBzZXJ2ZXIgVVJMLlxyXG4gICAgICogQHBhcmFtIHNpZ25hbGxpbmdVcmxCdWlsZGVyRnVuYyBBIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIGEgc2lnbmFsbGluZyBzZXJ2ZXIgdXJsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0U2lnbmFsbGluZ1VybEJ1aWxkZXIoc2lnbmFsbGluZ1VybEJ1aWxkZXJGdW5jOiAoKT0+c3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zaWduYWxsaW5nVXJsQnVpbGRlciA9IHNpZ25hbGxpbmdVcmxCdWlsZGVyRnVuYztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFB1YmxpYyBnZXR0ZXIgZm9yIHRoZSB3ZWJzb2NrZXQgY29udHJvbGxlci4gQWNjZXNzIHRvIHRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBzZW5kXHJcbiAgICAgKiBjdXN0b20gd2Vic29ja2V0IG1lc3NhZ2VzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHdlYlNvY2tldENvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIud2ViU29ja2V0Q29udHJvbGxlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFB1YmxpYyBnZXR0ZXIgZm9yIHRoZSB3ZWJYckNvbnRyb2xsZXIgY29udHJvbGxlci4gVXNlZCBmb3IgYWxsIFhSIGZlYXR1cmVzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHdlYlhyQ29udHJvbGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2ViWHJDb250cm9sbGVyO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmQgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCB9IGZyb20gJy4uL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUnO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciBoYW5kbGluZyBvbiBzY3JlZW4ga2V5Ym9hcmQgdXNhZ2VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPblNjcmVlbktleWJvYXJkIHtcclxuICAgIC8vIElmIHRoZSB1c2VyIGZvY3VzZXMgb24gYSBVRSBpbnB1dCB3aWRnZXQgdGhlbiB3ZSBzaG93IHRoZW0gYSBidXR0b24gdG8gb3BlblxyXG4gICAgLy8gdGhlIG9uLXNjcmVlbiBrZXlib2FyZC4gSmF2YVNjcmlwdCBzZWN1cml0eSBtZWFucyB3ZSBjYW4gb25seSBzaG93IHRoZVxyXG4gICAgLy8gb24tc2NyZWVuIGtleWJvYXJkIGluIHJlc3BvbnNlIHRvIGEgdXNlciBpbnRlcmFjdGlvbi5cclxuICAgIGVkaXRUZXh0QnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHJcbiAgICAvLyBBIGhpZGRlbiBpbnB1dCB0ZXh0IGJveCB3aGljaCBpcyB1c2VkIG9ubHkgZm9yIGZvY3VzaW5nIGFuZCBvcGVuaW5nIHRoZVxyXG4gICAgLy8gb24tc2NyZWVuIGtleWJvYXJkLlxyXG4gICAgaGlkZGVuSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudCBUaGUgZGl2IGVsZW1lbnQgdGhlIHZpZGVvIHBsYXllciBpcyBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFBhcmVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhpZGRlbklucHV0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU9uU2NyZWVuS2V5Ym9hcmRIZWxwZXJzKHZpZGVvRWxlbWVudFBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCB0aGUgeCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSB0aGUgeSBheGlzIHBvaW50XHJcbiAgICAgKiBAcmV0dXJucyB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoXHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlclxyXG4gICAgKTogVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgb24gc2NyZWVuIGtleWJvYXJkIGhlbHBlcnNcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQYXJlbnQgVGhlIGRpdiBlbGVtZW50IHRoZSB2aWRlbyBwbGF5ZXIgaSBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU9uU2NyZWVuS2V5Ym9hcmRIZWxwZXJzKHZpZGVvRWxlbWVudFBhcmVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGlkZGVuSW5wdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuaWQgPSAnaGlkZGVuSW5wdXQnO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0Lm1heExlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlbklucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5lZGl0VGV4dEJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uaWQgPSAnZWRpdFRleHRCdXR0b24nO1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLmlubmVySFRNTCA9ICdlZGl0IHRleHQnO1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5lZGl0VGV4dEJ1dHRvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSAnZWRpdCB0ZXh0JyBidXR0b24uXHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuU3RhdGUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZXZlbnQ6IEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBTaG93IHRoZSBvbi1zY3JlZW4ga2V5Ym9hcmQuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93cyB0aGUgb24gc2NyZWVuIGtleWJvYXJkXHJcbiAgICAgKiBAcGFyYW0gY29tbWFuZCB0aGUgY29tbWFuZCByZWNlaXZlZCB2aWEgdGhlIGRhdGEgY2hhbm5lbCBjb250YWluaW5nIGtleWJvYXJkIHBvc2l0aW9uc1xyXG4gICAgICovXHJcbiAgICBzaG93T25TY3JlZW5LZXlib2FyZChjb21tYW5kOiBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCkge1xyXG4gICAgICAgIGlmIChjb21tYW5kLnNob3dPblNjcmVlbktleWJvYXJkKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3cgdGhlICdlZGl0IHRleHQnIGJ1dHRvbi5cclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW5TdGF0ZScpO1xyXG4gICAgICAgICAgICAvLyBQbGFjZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uIG5lYXIgdGhlIFVFIGlucHV0IHdpZGdldC5cclxuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy51bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZChcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQueCxcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQueVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLnN0eWxlLnRvcCA9IHBvcy55LnRvU3RyaW5nKCkgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLnN0eWxlLmxlZnQgPSAocG9zLnggLSA0MCkudG9TdHJpbmcoKSArICdweCc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSGlkZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uLlxyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlblN0YXRlJyk7XHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIG9uLXNjcmVlbiBrZXlib2FyZC5cclxuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dC5ibHVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zZUNvbnRyb2xsZXIge1xyXG4gICAgcmVzcG9uc2VFdmVudExpc3RlbmVyczogTWFwPHN0cmluZywgKHJlc3BvbnNlOiBzdHJpbmcpID0+IHZvaWQ+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHJlc3BvbnNlIG1hcFxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBtZXRob2QgdG8gYmUgYWN0aXZhdGVkIHdoZW4gdGhlIHJlc3BvbnNlIGlzIHNlbGVjdGVkXHJcbiAgICAgKi9cclxuICAgIGFkZFJlc3BvbnNlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgbGlzdGVuZXI6IChyZXNwb25zZTogc3RyaW5nKSA9PiB2b2lkXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnJlc3BvbnNlRXZlbnRMaXN0ZW5lcnMuc2V0KG5hbWUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIHJlc3BvbnNlIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSByZXNwb25zZSBtYXBcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnJlc3BvbnNlRXZlbnRMaXN0ZW5lcnMuZGVsZXRlKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIGEgcmVzcG9uc2Ugd2hlbiByZWNlaXZpbmcgb25lIGZvcm0gdGhlIHN0cmVhbWVyXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIERhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgZGF0YSBjaGFubmVsIHdpdGggdGhlIGNvbW1hbmQgaW4gcXVlc3Rpb25cclxuICAgICAqL1xyXG4gICAgb25SZXNwb25zZShtZXNzYWdlOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5SZXNwb25zZScsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG5cclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIHJlc3BvbnNlcywgNik7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUV2ZW50TGlzdGVuZXJzLmZvckVhY2goXHJcbiAgICAgICAgICAgIChsaXN0ZW5lcjogKHJlc3BvbnNlOiBzdHJpbmcpID0+IHZvaWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHJlc3BvbnNlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbFNlbmRlciB9IGZyb20gJy4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsU2VuZGVyJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcbmltcG9ydCB7IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VuZERlc2NyaXB0b3JDb250cm9sbGVyIHtcclxuICAgIHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcclxuICAgIGRhdGFDaGFubmVsU2VuZGVyOiBEYXRhQ2hhbm5lbFNlbmRlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBkYXRhQ2hhbm5lbFNlbmRlcjogRGF0YUNoYW5uZWxTZW5kZXIsXHJcbiAgICAgICAgdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyID0gZGF0YUNoYW5uZWxTZW5kZXI7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIExhdGVuY3kgVGVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gdGhlIGRlc2NyaXB0b3IgZm9yIGEgbGF0ZW5jeSB0ZXN0XHJcbiAgICAgKi9cclxuICAgIHNlbmRMYXRlbmN5VGVzdChkZXNjcmlwdG9yOiBvYmplY3QpIHtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdMYXRlbmN5VGVzdCcsIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIExhdGVuY3kgVGVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gdGhlIGRlc2NyaXB0b3IgZm9yIGEgY29tbWFuZFxyXG4gICAgICovXHJcbiAgICBlbWl0Q29tbWFuZChkZXNjcmlwdG9yOiBvYmplY3QpIHtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdDb21tYW5kJywgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgTGF0ZW5jeSBUZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGRlc2NyaXB0b3IgLSB0aGUgZGVzY3JpcHRvciBmb3IgYSBVSSBJbnRlcmFjdGlvblxyXG4gICAgICovXHJcbiAgICBlbWl0VUlJbnRlcmFjdGlvbihkZXNjcmlwdG9yOiBvYmplY3QgfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdVSUludGVyYWN0aW9uJywgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgRGVzY3JpcHRvciB0byB0aGUgVUUgSW5zdGFuY2VzXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVR5cGUgLSBVRSBNZXNzYWdlIFR5cGVcclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gRGVzY3JpcHRvciBNZXNzYWdlIGFzIEpTT05cclxuICAgICAqL1xyXG4gICAgc2VuZERlc2NyaXB0b3IobWVzc2FnZVR5cGU6IHN0cmluZywgZGVzY3JpcHRvcjogb2JqZWN0IHwgc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gQ29udmVydCB0aGUgZGVzY3JpcHRvciBvYmplY3QgaW50byBhIEpTT04gc3RyaW5nLlxyXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JBc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJNZXNzYWdlcyA9XHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXIudG9TdHJlYW1lck1lc3NhZ2VzO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VGb3JtYXQgPSB0b1N0cmVhbWVyTWVzc2FnZXMuZ2V0RnJvbUtleShtZXNzYWdlVHlwZSk7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VGb3JtYXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgYEF0dGVtcHRlZCB0byBlbWl0IGRlc2NyaXB0b3Igd2l0aCBtZXNzYWdlIHR5cGU6ICR7bWVzc2FnZVR5cGV9LCBidXQgdGhlIGZyb250ZW5kIGhhc24ndCBiZWVuIGNvbmZpZ3VyZWQgdG8gc2VuZCBzdWNoIGEgbWVzc2FnZS4gQ2hlY2sgeW91J3ZlIGFkZGVkIHRoZSBtZXNzYWdlIHR5cGUgaW4geW91ciBjcHBgXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZW5kaW5nOiAnICsgZGVzY3JpcHRvciwgNik7XHJcbiAgICAgICAgLy8gQWRkIHRoZSBVVEYtMTYgSlNPTiBzdHJpbmcgdG8gdGhlIGFycmF5IGJ5dGUgYnVmZmVyLCBnb2luZyB0d28gYnl0ZXMgYXRcclxuICAgICAgICAvLyBhIHRpbWUuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBEYXRhVmlldyhcclxuICAgICAgICAgICAgbmV3IEFycmF5QnVmZmVyKDEgKyAyICsgMiAqIGRlc2NyaXB0b3JBc1N0cmluZy5sZW5ndGgpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBsZXQgYnl0ZUlkeCA9IDA7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50OChieXRlSWR4LCBtZXNzYWdlRm9ybWF0LmlkKTtcclxuICAgICAgICBieXRlSWR4Kys7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZUlkeCwgZGVzY3JpcHRvckFzU3RyaW5nLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgICAgICAgYnl0ZUlkeCArPSAyO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVzY3JpcHRvckFzU3RyaW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGVJZHgsIGRlc2NyaXB0b3JBc1N0cmluZy5jaGFyQ29kZUF0KGkpLCB0cnVlKTtcclxuICAgICAgICAgICAgYnl0ZUlkeCArPSAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGFDaGFubmVsU2VuZGVyLmNhblNlbmQoKSkge1xyXG4gICAgICAgICAgICBMb2dnZXIuSW5mbyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgRGF0YSBjaGFubmVsIGNhbm5vdCBzZW5kIHlldCwgc2tpcHBpbmcgc2VuZGluZyBkZXNjcmlwdG9yIG1lc3NhZ2U6ICR7bWVzc2FnZVR5cGV9IC0gJHtkZXNjcmlwdG9yQXNTdHJpbmd9YFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyLnNlbmREYXRhKGRhdGEuYnVmZmVyKTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgRGF0YUNoYW5uZWxTZW5kZXIgfSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbFNlbmRlcic7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5pbXBvcnQgeyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4vU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbmRNZXNzYWdlQ29udHJvbGxlciB7XHJcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XHJcbiAgICBkYXRhQ2hhbm5lbFNlbmRlcjogRGF0YUNoYW5uZWxTZW5kZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZGF0YUNoYW5uZWxTZW5kZXIgLSBEYXRhIGNoYW5uZWwgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlciAtIFN0cmVhbSBNZXNzYWdlcyBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBkYXRhQ2hhbm5lbFNlbmRlcjogRGF0YUNoYW5uZWxTZW5kZXIsXHJcbiAgICAgICAgdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyID0gZGF0YUNoYW5uZWxTZW5kZXI7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHN0cmVhbWVyIHRocm91Z2ggdGhlIGRhdGEgY2hhbm5lbFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VUeXBlIC0gdGhlIHR5cGUgb2YgbWVzc2FnZSB3ZSBhcmUgc2VuZGluZ1xyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VEYXRhIC0gdGhlIG1lc3NhZ2UgZGF0YSB3ZSBhcmUgc2VuZGluZyBvdmVyIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAqIEByZXR1cm5zIC0gbmlsXHJcbiAgICAgKi9cclxuICAgIHNlbmRNZXNzYWdlVG9TdHJlYW1lcihtZXNzYWdlVHlwZTogc3RyaW5nLCBtZXNzYWdlRGF0YT86IEFycmF5PG51bWJlcj4pIHtcclxuICAgICAgICBpZiAobWVzc2FnZURhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lck1lc3NhZ2VzID1cclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlci50b1N0cmVhbWVyTWVzc2FnZXM7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUZvcm1hdCA9IHRvU3RyZWFtZXJNZXNzYWdlcy5nZXRGcm9tS2V5KG1lc3NhZ2VUeXBlKTtcclxuICAgICAgICBpZiAobWVzc2FnZUZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgQXR0ZW1wdGVkIHRvIHNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzdHJlYW1lciB3aXRoIG1lc3NhZ2UgdHlwZTogJHttZXNzYWdlVHlwZX0sIGJ1dCB0aGUgZnJvbnRlbmQgaGFzbid0IGJlZW4gY29uZmlndXJlZCB0byBzZW5kIHN1Y2ggYSBtZXNzYWdlLiBDaGVjayB5b3UndmUgYWRkZWQgdGhlIG1lc3NhZ2UgdHlwZSBpbiB5b3VyIGNwcGBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBEYXRhVmlldyhcclxuICAgICAgICAgICAgbmV3IEFycmF5QnVmZmVyKG1lc3NhZ2VGb3JtYXQuYnl0ZUxlbmd0aCArIDEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkYXRhLnNldFVpbnQ4KDAsIG1lc3NhZ2VGb3JtYXQuaWQpO1xyXG4gICAgICAgIGxldCBieXRlT2Zmc2V0ID0gMTtcclxuXHJcbiAgICAgICAgbWVzc2FnZURhdGEuZm9yRWFjaCgoZWxlbWVudDogbnVtYmVyLCBpZHg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZUZvcm1hdC5zdHJ1Y3R1cmVbaWR4XTtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1aW50OCc6XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXRVaW50OChieXRlT2Zmc2V0LCBlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAndWludDE2JzpcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNldFVpbnQxNihieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW50MTYnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0SW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb2F0JzpcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNldEZsb2F0MzIoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIGVsZW1lbnQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gODtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZGF0YUNoYW5uZWxTZW5kZXIuY2FuU2VuZCgpKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5JbmZvKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBEYXRhIGNoYW5uZWwgY2Fubm90IHNlbmQgeWV0LCBza2lwcGluZyBzZW5kaW5nIG1lc3NhZ2U6ICR7bWVzc2FnZVR5cGV9IC0gJHtuZXcgVWludDhBcnJheShcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmJ1ZmZlclxyXG4gICAgICAgICAgICAgICAgKX1gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyLnNlbmREYXRhKGRhdGEuYnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IFR3b1dheU1hcCB9IGZyb20gJy4vVHdvV2F5TWFwJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgVG9TdHJlYW1lck1lc3NhZ2Uge1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIGJ5dGVMZW5ndGg6IG51bWJlcjtcclxuICAgIHN0cnVjdHVyZT86IEFycmF5PHN0cmluZz47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB7XHJcbiAgICB0b1N0cmVhbWVySGFuZGxlcnM6IE1hcDxcclxuICAgICAgICBzdHJpbmcsXHJcbiAgICAgICAgKG1lc3NhZ2VEYXRhPzogQXJyYXk8bnVtYmVyPiB8IHVuZGVmaW5lZCkgPT4gdm9pZFxyXG4gICAgPjtcclxuICAgIGZyb21TdHJlYW1lckhhbmRsZXJzOiBNYXA8XHJcbiAgICAgICAgc3RyaW5nLFxyXG4gICAgICAgIChtZXNzYWdlVHlwZTogc3RyaW5nLCBtZXNzYWdlRGF0YT86IEFycmF5QnVmZmVyIHwgdW5kZWZpbmVkKSA9PiB2b2lkXHJcbiAgICA+O1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlICAgICAgRm9ybWF0XHJcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXM6IFR3b1dheU1hcDxzdHJpbmcsIFRvU3RyZWFtZXJNZXNzYWdlPjtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZSAgICAgSURcclxuICAgIGZyb21TdHJlYW1lck1lc3NhZ2VzOiBUd29XYXlNYXA8c3RyaW5nLCBudW1iZXI+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lckhhbmRsZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVySGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMgPSBuZXcgVHdvV2F5TWFwKCk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcyA9IG5ldyBUd29XYXlNYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBvcHVsYXRlIHRoZSBEZWZhdWx0IG1lc3NhZ2UgcHJvdG9jb2xcclxuICAgICAqL1xyXG4gICAgcG9wdWxhdGVEZWZhdWx0UHJvdG9jb2woKSB7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBDb250cm9sIE1lc3NhZ2VzLiBSYW5nZSA9IDAuLjQ5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnSUZyYW1lUmVxdWVzdCcsIHtcclxuICAgICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1JlcXVlc3RRdWFsaXR5Q29udHJvbCcsIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0Zwc1JlcXVlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdBdmVyYWdlQml0cmF0ZVJlcXVlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiAzLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdTdGFydFN0cmVhbWluZycsIHtcclxuICAgICAgICAgICAgaWQ6IDQsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1N0b3BTdHJlYW1pbmcnLCB7XHJcbiAgICAgICAgICAgIGlkOiA1LFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdMYXRlbmN5VGVzdCcsIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3LFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdUZXN0RWNobycsIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDUwLi44OS5cclxuICAgICAgICAgKi9cclxuICAgICAgICAvLyBHZW5lcmljIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDUwLi41OS5cclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1VJSW50ZXJhY3Rpb24nLCB7XHJcbiAgICAgICAgICAgIGlkOiA1MCxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnQ29tbWFuZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDUxLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gS2V5Ym9hcmQgSW5wdXQgTWVzc2FnZS4gUmFuZ2UgPSA2MC4uNjkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdLZXlEb3duJywge1xyXG4gICAgICAgICAgICBpZDogNjAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAga2V5Q29kZSAgaXNSZXBlYXRcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0tleVVwJywge1xyXG4gICAgICAgICAgICBpZDogNjEsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDEsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAga2V5Q29kZVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnS2V5UHJlc3MnLCB7XHJcbiAgICAgICAgICAgIGlkOiA2MixcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMixcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjaGFyY29kZVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBNb3VzZSBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA3MC4uNzkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZUVudGVyJywge1xyXG4gICAgICAgICAgICBpZDogNzAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlTGVhdmUnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3MSxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTW91c2VEb3duJywge1xyXG4gICAgICAgICAgICBpZDogNzIsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDUsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBidXR0b24gICAgIHggICAgICAgICB5XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlVXAnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3MyxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogNSxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGJ1dHRvbiAgICAgeCAgICAgICAgIHlcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTW91c2VNb3ZlJywge1xyXG4gICAgICAgICAgICBpZDogNzQsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICB4ICAgICAgICAgICB5ICAgICAgZGVsdGFYICAgIGRlbHRhWVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDE2JywgJ3VpbnQxNicsICdpbnQxNicsICdpbnQxNiddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZVdoZWVsJywge1xyXG4gICAgICAgICAgICBpZDogNzUsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDYsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBkZWx0YSAgICAgICB4ICAgICAgICB5XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWydpbnQxNicsICd1aW50MTYnLCAndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlRG91YmxlJywge1xyXG4gICAgICAgICAgICBpZDogNzYsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDUsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBidXR0b24gICAgIHggICAgICAgICB5XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBUb3VjaCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA4MC4uODkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdUb3VjaFN0YXJ0Jywge1xyXG4gICAgICAgICAgICBpZDogODAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIG51bXRvdWNoZXMoMSkgICB4ICAgICAgIHkgICAgICAgIGlkeCAgICAgZm9yY2UgICAgIHZhbGlkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1RvdWNoRW5kJywge1xyXG4gICAgICAgICAgICBpZDogODEsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIG51bXRvdWNoZXMoMSkgICB4ICAgICAgIHkgICAgICAgIGlkeCAgICAgZm9yY2UgICAgIHZhbGlkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1RvdWNoTW92ZScsIHtcclxuICAgICAgICAgICAgaWQ6IDgyLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiA4LFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICBudW10b3VjaGVzKDEpICAgeCAgICAgICB5ICAgICAgIGlkeCAgICAgIGZvcmNlICAgICB2YWxpZFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDE2JywgJ3VpbnQxNicsICd1aW50OCcsICd1aW50OCcsICd1aW50OCddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gR2FtZXBhZCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA5MC4uOTlcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWRDb25uZWN0ZWQnLCB7XHJcbiAgICAgICAgICAgIGlkOiA5MyxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnR2FtZXBhZEJ1dHRvblByZXNzZWQnLCB7XHJcbiAgICAgICAgICAgIGlkOiA5MCxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMyxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjdHJsZXJJZCAgIGJ1dHRvbiAgaXNSZXBlYXRcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWRCdXR0b25SZWxlYXNlZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDkxLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAzLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGN0cmxlcklkICAgYnV0dG9uICBpc1JlcGVhdCgwKVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDgnLCAndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnR2FtZXBhZEFuYWxvZycsIHtcclxuICAgICAgICAgICAgaWQ6IDkyLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAxMCxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjdHJsZXJJZCAgIGJ1dHRvbiAgYW5hbG9nVmFsdWVcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4JywgJ2RvdWJsZSddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdHYW1lcGFkRGlzY29ubmVjdGVkJywge1xyXG4gICAgICAgICAgICBpZDogOTQsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDEsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGN0cmxlcklkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCddXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdRdWFsaXR5Q29udHJvbE93bmVyc2hpcCcsIDApO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdSZXNwb25zZScsIDEpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdDb21tYW5kJywgMik7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0ZyZWV6ZUZyYW1lJywgMyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1VuZnJlZXplRnJhbWUnLCA0KTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnVmlkZW9FbmNvZGVyQXZnUVAnLCA1KTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTGF0ZW5jeVRlc3QnLCA2KTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnSW5pdGlhbFNldHRpbmdzJywgNyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0ZpbGVFeHRlbnNpb24nLCA4KTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnRmlsZU1pbWVUeXBlJywgOSk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0ZpbGVDb250ZW50cycsIDEwKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnVGVzdEVjaG8nLCAxMSk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0lucHV0Q29udHJvbE93bmVyc2hpcCcsIDEyKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnR2FtZXBhZFJlc3BvbnNlJywgMTMpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdQcm90b2NvbCcsIDI1NSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIG1lc3NhZ2UgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VEaXJlY3Rpb24gLSB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtZXNzYWdlOyB0b1N0cmVhbWVyIG9yIGZyb21TdHJlYW1lclxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VUeXBlIC0gdGhlIHR5cGUgb2YgdGhlIG1lc3NhZ2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlSGFuZGxlciAtIHRoZSBmdW5jdGlvbiBvciBtZXRob2QgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGlzIGhhbmRsZXIgaXMgY2FsbGVkXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgbWVzc2FnZURpcmVjdGlvbjogTWVzc2FnZURpcmVjdGlvbixcclxuICAgICAgICBtZXNzYWdlVHlwZTogc3RyaW5nLFxyXG4gICAgICAgIG1lc3NhZ2VIYW5kbGVyOiAobWVzc2FnZURhdGE/OiB1bmtub3duIHwgdW5kZWZpbmVkKSA9PiB2b2lkXHJcbiAgICApIHtcclxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2VEaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJIYW5kbGVycy5zZXQobWVzc2FnZVR5cGUsIG1lc3NhZ2VIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJIYW5kbGVycy5zZXQobWVzc2FnZVR5cGUsIG1lc3NhZ2VIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGBVbmtub3duIG1lc3NhZ2UgZGlyZWN0aW9uICR7bWVzc2FnZURpcmVjdGlvbn1gXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBlbnVtIGZvciBtZXNzYWdlIGRpcmVjdGlvbnNcclxuICovXHJcbmV4cG9ydCBlbnVtIE1lc3NhZ2VEaXJlY3Rpb24ge1xyXG4gICAgVG9TdHJlYW1lciA9IDAsXHJcbiAgICBGcm9tU3RyZWFtZXIgPSAxXHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IFNlbmRNZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4vU2VuZE1lc3NhZ2VDb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUb1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyIHtcclxuICAgIHNlbmRNZXNzYWdlQ29udHJvbGxlcjogU2VuZE1lc3NhZ2VDb250cm9sbGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHNlbmRNZXNzYWdlQ29udHJvbGxlciAtIFN0cmVhbSBtZXNzYWdlIGNvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2VuZE1lc3NhZ2VDb250cm9sbGVyOiBTZW5kTWVzc2FnZUNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlciA9IHNlbmRNZXNzYWdlQ29udHJvbGxlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgUmVxdWVzdCB0byBUYWtlIFF1YWxpdHkgQ29udHJvbCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgU2VuZFJlcXVlc3RRdWFsaXR5Q29udHJvbCgpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgTWF4IEZQUyBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kTWF4RnBzUmVxdWVzdCgpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0Zwc1JlcXVlc3QnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgQXZlcmFnZSBCaXRyYXRlIFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIFNlbmRBdmVyYWdlQml0cmF0ZVJlcXVlc3QoKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAnQXZlcmFnZUJpdHJhdGVSZXF1ZXN0J1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgU3RhcnQgU3RyZWFtaW5nIE1lc3NhZ2UgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIFNlbmRTdGFydFN0cmVhbWluZygpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1N0YXJ0U3RyZWFtaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgU3RvcCBTdHJlYW1pbmcgTWVzc2FnZSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgU2VuZFN0b3BTdHJlYW1pbmcoKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdTdG9wU3RyZWFtaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgUmVxdWVzdCBJbml0aWFsIFNldHRpbmdzIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kUmVxdWVzdEluaXRpYWxTZXR0aW5ncygpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICdSZXF1ZXN0SW5pdGlhbFNldHRpbmdzJ1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmV4cG9ydCBjbGFzcyBUd29XYXlNYXA8S2V5VHlwZSwgVmFsdWVUeXBlPiB7XHJcbiAgICBtYXA6IE1hcDxLZXlUeXBlLCBWYWx1ZVR5cGU+O1xyXG4gICAgcmV2ZXJzZU1hcDogTWFwPFZhbHVlVHlwZSwgS2V5VHlwZT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gbWFwIC0gYW4gb3B0aW9uYWwgbWFwIG9mIHBhcmFtZXRlcnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBtYXAgYnkga2V5XHJcbiAgICAgKiBAcGFyYW0ga2V5IC0gdGhlIGtleSB3ZSBhcmUgc2VhcmNoaW5nIGJ5XHJcbiAgICAgKiBAcmV0dXJucyAtIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleVxyXG4gICAgICovXHJcbiAgICBnZXRGcm9tS2V5KGtleTogS2V5VHlwZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgcmV2ZXJzZSBrZXkgZnJvbSB0aGUgbWFwIGJ5IHNlYXJjaGluZyBieSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIGtleSB3ZSBhcmUgc2VhcmNoaW5nIGJ5XHJcbiAgICAgKiBAcmV0dXJucyAtIHRoZXkga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgdmFsdWVcclxuICAgICAqL1xyXG4gICAgZ2V0RnJvbVZhbHVlKHZhbHVlOiBWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlTWFwLmdldCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBrZXkgYW5kIHZhbHVlIHRvIGJvdGggdGhlIG1hcCBhbmQgcmV2ZXJzZSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXkgLSB0aGUgaW5kZXhpbmcga2V5XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlcclxuICAgICAqL1xyXG4gICAgYWRkKGtleTogS2V5VHlwZSwgdmFsdWU6IFZhbHVlVHlwZSkge1xyXG4gICAgICAgIHRoaXMubWFwLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICB0aGlzLnJldmVyc2VNYXAuc2V0KHZhbHVlLCBrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEga2V5IGFuZCB2YWx1ZSBmcm9tIGJvdGggdGhlIG1hcCBhbmQgcmV2ZXJzZSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXkgLSB0aGUgaW5kZXhpbmcga2V5XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKGtleTogS2V5VHlwZSwgdmFsdWU6IFZhbHVlVHlwZSkge1xyXG4gICAgICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIHRoaXMucmV2ZXJzZU1hcC5kZWxldGUodmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgY29vcmRpbmF0ZXMgZnJvbSBlbGVtZW50IHJlbGF0aXZlIGNvb3JkaW5hdGVzIHRvIHZhbHVlcyBub3JtYWxpemVkIHdpdGhpbiB0aGUgdmFsdWUgcmFuZ2Ugb2YgYSBzaG9ydCAoYW5kIGJhY2sgYWdhaW4pXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29vcmRpbmF0ZUNvbnZlcnRlciB7XHJcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XHJcbiAgICB2aWRlb0VsZW1lbnRQYXJlbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgdmlkZW9FbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50O1xyXG4gICAgcmF0aW86IG51bWJlcjtcclxuXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkRnVuYzogKFxyXG4gICAgICAgIHg6IG51bWJlcixcclxuICAgICAgICB5OiBudW1iZXJcclxuICAgICkgPT4gTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQ7XHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZEZ1bmM6IChcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyXHJcbiAgICApID0+IE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZDtcclxuICAgIGRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYzogKFxyXG4gICAgICAgIHg6IG51bWJlcixcclxuICAgICAgICB5OiBudW1iZXJcclxuICAgICkgPT4gVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIC0gdGhlIGRpdiBlbGVtZW50IHRoYXQgdGhlIHZpZGVvIHBsYXllciB3aWxsIGJlIGluamVjdGVkIGludG9cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgICdOb3JtYWxpemUgYW5kIHF1YW50aXplIHVuc2lnbmVkLCBtZXRob2Qgbm90IGltcGxlbWVudGVkLidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAnTm9ybWFsaXplIGFuZCB1bnF1YW50aXplIHNpZ25lZCwgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgJ0Rlbm9ybWFsaXplIGFuZCB1bnF1YW50aXplIHVuc2lnbmVkLCBtZXRob2Qgbm90IGltcGxlbWVudGVkLidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN1cmZhY2UgbWV0aG9kIGZvciBzZXR0ZXJOb3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyXHJcbiAgICApOiBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3VyZmFjZSBtZXRob2QgZm9yIHNldHRlclVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoXHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlclxyXG4gICAgKTogVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3VyZmFjZSBtZXRob2QgZm9yIHNldHRlck5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQoXHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlclxyXG4gICAgKTogTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZEZ1bmMoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgdXAgdGhlIE5vcm1hbGl6ZSBBbmQgUXVhbnRpemUgbWV0aG9kcyBiYXNlZCBvbiB0aGUgYXNwZWN0IHJhdGlvIGFuZCB0aGUgdmlkZW8gcGxheWVyIHJhdGlvXHJcbiAgICAgKi9cclxuICAgIHNldHVwTm9ybWFsaXplQW5kUXVhbnRpemUoKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQgPVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50UGFyZW50ICYmIHRoaXMudmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllckFzcGVjdFJhdGlvID1cclxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCAvXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW9Bc3BlY3RSYXRpbyA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC52aWRlb0hlaWdodCAvIHRoaXMudmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvJyxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IHBsYXllckFzcGVjdFJhdGlvIC8gdmlkZW9Bc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoXHJcbiAgICAgICAgICAgICAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IG51bWJlclxyXG4gICAgICAgICAgICAgICAgKSA9PiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoXHJcbiAgICAgICAgICAgICAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IG51bWJlclxyXG4gICAgICAgICAgICAgICAgKSA9PiB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvJyxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IHZpZGVvQXNwZWN0UmF0aW8gLyBwbGF5ZXJBc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoXHJcbiAgICAgICAgICAgICAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IG51bWJlclxyXG4gICAgICAgICAgICAgICAgKSA9PiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZEZ1bmMgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllclNtYWxsZXIoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9IChcclxuICAgICAgICAgICAgICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICApID0+IHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllckJpZ2dlcihcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyXHJcbiAgICApOiBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZCB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSB4IC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPVxyXG4gICAgICAgICAgICB0aGlzLnJhdGlvICogKHkgLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQgLSAwLjUpICsgMC41O1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggPiAxLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPiAxLjBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZChmYWxzZSwgNjU1MzUsIDY1NTM1KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKFxyXG4gICAgICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogNjU1MzYsXHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkWSAqIDY1NTM2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIGRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSB4IC8gNjU1MzY7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPSAoeSAvIDY1NTM2IC0gMC41KSAvIHRoaXMucmF0aW8gKyAwLjU7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmQoXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgsXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllckJpZ2dlcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID0geCAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCk7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPVxyXG4gICAgICAgICAgICAodGhpcy5yYXRpbyAqIHkpIC8gKDAuNSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkU2lnbmVkQ29vcmQoXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogMzI3NjcsXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZICogMzI3NjdcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPVxyXG4gICAgICAgICAgICB0aGlzLnJhdGlvICogKHggLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCAtIDAuNSkgKyAwLjU7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPSB5IC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggPiAxLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPiAxLjBcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZChmYWxzZSwgNjU1MzUsIDY1NTM1KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKFxyXG4gICAgICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogNjU1MzYsXHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkWSAqIDY1NTM2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBkZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9ICh4IC8gNjU1MzYgLSAwLjUpIC8gdGhpcy5yYXRpbyArIDAuNTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9IHkgLyA2NTUzNjtcclxuICAgICAgICByZXR1cm4gbmV3IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZChcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllclNtYWxsZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9XHJcbiAgICAgICAgICAgICh0aGlzLnJhdGlvICogeCkgLyAoMC41ICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgpO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0geSAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkKFxyXG4gICAgICAgICAgICBub3JtYWxpemVkWCAqIDMyNzY3LFxyXG4gICAgICAgICAgICBub3JtYWxpemVkWSAqIDMyNzY3XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIE5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQgb2JqZWN0c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkIHtcclxuICAgIGluUmFuZ2U6IGJvb2xlYW47XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaW5SYW5nZTogYm9vbGVhbiwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmluUmFuZ2UgPSBpblJhbmdlO1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCBvYmplY3RzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZCBvYmplY3RzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgRmxhZ3NJZHMsXHJcbiAgICBOdW1lcmljUGFyYW1ldGVyc0lkcyxcclxuICAgIE9wdGlvblBhcmFtZXRlcnNJZHMsXHJcbiAgICBUZXh0UGFyYW1ldGVyc0lkc1xyXG59IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xyXG5pbXBvcnQgeyBMYXRlbmN5VGVzdFJlc3VsdHMgfSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMnO1xyXG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3RhdHMgfSBmcm9tICcuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQWdncmVnYXRlZFN0YXRzJztcclxuaW1wb3J0IHsgSW5pdGlhbFNldHRpbmdzIH0gZnJvbSAnLi4vcGl4ZWxzdHJlYW1pbmdmcm9udGVuZCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VTdHJlYW1lckxpc3QgfSBmcm9tICcuLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlJztcclxuaW1wb3J0IHsgU2V0dGluZ0ZsYWcgfSBmcm9tICcuLi9Db25maWcvU2V0dGluZ0ZsYWcnO1xyXG5pbXBvcnQgeyBTZXR0aW5nTnVtYmVyIH0gZnJvbSAnLi4vQ29uZmlnL1NldHRpbmdOdW1iZXInO1xyXG5pbXBvcnQgeyBTZXR0aW5nVGV4dCB9IGZyb20gJy4uL0NvbmZpZy9TZXR0aW5nVGV4dCc7XHJcbmltcG9ydCB7IFNldHRpbmdPcHRpb24gfSBmcm9tICcuLi9Db25maWcvU2V0dGluZ09wdGlvbic7XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gQUZLIGRpc2Nvbm5lY3QgaXMgYWJvdXQgdG8gaGFwcGVuLlxyXG4gKiBDYW4gYmUgY2FuY2VsbGVkIGJ5IGNhbGxpbmcgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHByb3ZpZGVkIGFzIHBhcnQgb2YgdGhlIGV2ZW50LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFma1dhcm5pbmdBY3RpdmF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ2Fma1dhcm5pbmdBY3RpdmF0ZSc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIEhvdyBtYW55IHNlY29uZHMgdW50aWwgdGhlIHNlc3Npb24gaXMgZGlzY29ubmVjdGVkICovXHJcbiAgICAgICAgY291bnREb3duOiBudW1iZXI7XHJcbiAgICAgICAgLyoqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgbmVlZHMgdG8gYmUgY2FsbGVkIGlmIHlvdSB3aXNoIHRvIGNhbmNlbCB0aGUgQUZLIGRpc2Nvbm5lY3QgdGltZW91dC4gKi9cclxuICAgICAgICBkaXNtaXNzQWZrOiAoKSA9PiB2b2lkO1xyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IEFma1dhcm5pbmdBY3RpdmF0ZUV2ZW50WydkYXRhJ10pIHtcclxuICAgICAgICBzdXBlcignYWZrV2FybmluZ0FjdGl2YXRlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHRoZSBBRksgZGlzY29ubmVjdCBjb3VudGRvd24gaXMgdXBkYXRlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnYWZrV2FybmluZ1VwZGF0ZSc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIEhvdyBtYW55IHNlY29uZHMgdW50aWwgdGhlIHNlc3Npb24gaXMgZGlzY29ubmVjdGVkICovXHJcbiAgICAgICAgY291bnREb3duOiBudW1iZXJcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBBZmtXYXJuaW5nVXBkYXRlRXZlbnRbJ2RhdGEnXSkge1xyXG4gICAgICAgIHN1cGVyKCdhZmtXYXJuaW5nVXBkYXRlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIEFGSyB3YXJuaW5nIGlzIGRlYWN0aXZhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnYWZrV2FybmluZ0RlYWN0aXZhdGUnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2Fma1dhcm5pbmdEZWFjdGl2YXRlJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBBRksgY291bnRkb3duIHJlYWNoZXMgMCBhbmQgdGhlIHVzZXIgaXMgZGlzY29ubmVjdGVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFma1RpbWVkT3V0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnYWZrVGltZWRPdXQnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2Fma1RpbWVkT3V0Jyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB3ZSByZWNlaXZlIG5ldyB2aWRlbyBxdWFsaXR5IHZhbHVlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZpZGVvRW5jb2RlckF2Z1FQRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAndmlkZW9FbmNvZGVyQXZnUVAnO1xyXG4gICAgcmVhZG9ubHkgZGF0YToge1xyXG4gICAgICAgIC8qKiBBdmVyYWdlIHZpZGVvIHF1YWxpdHkgdmFsdWUgKi9cclxuICAgICAgICBhdmdRUDogbnVtYmVyXHJcbiAgICB9O1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogVmlkZW9FbmNvZGVyQXZnUVBFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ3ZpZGVvRW5jb2RlckF2Z1FQJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBhZnRlciBhIFdlYlJ0YyBjb25uZWN0aW9uIGhhcyBiZWVuIG5lZ290aWF0ZWQuIFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdlYlJ0Y1NkcEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3dlYlJ0Y1NkcCc7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignd2ViUnRjU2RwJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBhdXRvIGNvbm5lY3RpbmcuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICd3ZWJSdGNBdXRvQ29ubmVjdCc7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignd2ViUnRjQXV0b0Nvbm5lY3QnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHNlbmRpbmcgYSBXZWJSdGMgb2ZmZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV2ViUnRjQ29ubmVjdGluZ0V2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3dlYlJ0Y0Nvbm5lY3RpbmcnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3dlYlJ0Y0Nvbm5lY3RpbmcnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIFdlYlJ0YyBjb25uZWN0aW9uIGhhcyBiZWVuIGVzdGFibGlzaGVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3dlYlJ0Y0Nvbm5lY3RlZCc7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignd2ViUnRjQ29ubmVjdGVkJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgaWYgV2ViUnRjIGNvbm5lY3Rpb24gaGFzIGZhaWxlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJSdGNGYWlsZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICd3ZWJSdGNGYWlsZWQnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3dlYlJ0Y0ZhaWxlZCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIFdlYlJ0YyBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJSdGNEaXNjb25uZWN0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICd3ZWJSdGNEaXNjb25uZWN0ZWQnO1xyXG4gICAgcmVhZG9ubHkgZGF0YToge1xyXG4gICAgICAgIC8qKiBNZXNzYWdlIGRlc2NyaWJpbmcgdGhlIGRpc2Nvbm5lY3QgcmVhc29uICovXHJcbiAgICAgICAgZXZlbnRTdHJpbmc6IHN0cmluZztcclxuICAgICAgICAvKiogdHJ1ZSBpZiB0aGUgdXNlciBpcyBhYmxlIHRvIHJlY29ubmVjdCwgZmFsc2UgaWYgZGlzY29ubmVjdGVkIGJlY2F1c2Ugb2YgdW5yZWNvdmVyYWJsZSByZWFzb25zIGxpa2Ugbm90IGFibGUgdG8gY29ubmVjdCB0byB0aGUgc2lnbmFsaW5nIHNlcnZlciAqL1xyXG4gICAgICAgIHNob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0OiBib29sZWFuO1xyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50WydkYXRhJ10pIHtcclxuICAgICAgICBzdXBlcignd2ViUnRjRGlzY29ubmVjdGVkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIFJUQ0RhdGFDaGFubmVsIGlzIG9wZW5lZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbE9wZW5FdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICdkYXRhQ2hhbm5lbE9wZW4nO1xyXG4gICAgcmVhZG9ubHkgZGF0YToge1xyXG4gICAgICAgIC8qKiBEYXRhIGNoYW5uZWwgbGFiZWwuIE9uZSBvZiAnZGF0YWNoYW5uZWwnLCAnc2VuZC1kYXRhY2hhbm5lbCcsICdyZWN2LWRhdGFjaGFubmVsJyAqL1xyXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqIFJUQ0RhdGFDaGFubmVsIG9uT3BlbiBldmVudCAqL1xyXG4gICAgICAgIGV2ZW50OiBFdmVudFxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGFDaGFubmVsT3BlbkV2ZW50WydkYXRhJ10pIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxPcGVuJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIFJUQ0RhdGFDaGFubmVsIGlzIGNsb3NlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbENsb3NlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnZGF0YUNoYW5uZWxDbG9zZSc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIERhdGEgY2hhbm5lbCBsYWJlbC4gT25lIG9mICdkYXRhY2hhbm5lbCcsICdzZW5kLWRhdGFjaGFubmVsJywgJ3JlY3YtZGF0YWNoYW5uZWwnICovXHJcbiAgICAgICAgbGFiZWw6IHN0cmluZztcclxuICAgICAgICAvKiogUlRDRGF0YUNoYW5uZWwgb25DbG9zZSBldmVudCAqL1xyXG4gICAgICAgIGV2ZW50OiBFdmVudFxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGFDaGFubmVsQ2xvc2VFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ2RhdGFDaGFubmVsQ2xvc2UnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIG9uIFJUQ0RhdGFDaGFubmVsIGVycm9ycy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbEVycm9yRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnZGF0YUNoYW5uZWxFcnJvcic7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIERhdGEgY2hhbm5lbCBsYWJlbC4gT25lIG9mICdkYXRhY2hhbm5lbCcsICdzZW5kLWRhdGFjaGFubmVsJywgJ3JlY3YtZGF0YWNoYW5uZWwnICovXHJcbiAgICAgICAgbGFiZWw6IHN0cmluZztcclxuICAgICAgICAvKiogUlRDRGF0YUNoYW5uZWwgb25FcnJvciBldmVudCAqL1xyXG4gICAgICAgIGV2ZW50OiBFdmVudFxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGFDaGFubmVsRXJyb3JFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ2RhdGFDaGFubmVsRXJyb3InKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdGhlIHZpZGVvIHN0cmVhbSBoYXMgYmVlbiBpbml0aWFsaXplZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBWaWRlb0luaXRpYWxpemVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAndmlkZW9Jbml0aWFsaXplZCc7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigndmlkZW9Jbml0aWFsaXplZCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdmlkZW8gc3RyZWFtIGxvYWRpbmcgc3RhcnRzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0cmVhbUxvYWRpbmdFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1Mb2FkaW5nJztcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdzdHJlYW1Mb2FkaW5nJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gbG9hZGluZyBoYXMgZmluaXNoZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RyZWFtUHJlQ29ubmVjdEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3N0cmVhbUNvbm5lY3QnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3N0cmVhbUNvbm5lY3QnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHZpZGVvIHN0cmVhbSBoYXMgc3RvcHBlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnc3RyZWFtRGlzY29ubmVjdCc7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtRGlzY29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdmlkZW8gc3RyZWFtIGlzIHJlY29ubmVjdGluZy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1SZWNvbm5lY3RFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1SZWNvbm5lY3QnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3N0cmVhbVJlY29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIHRoZXJlIGFyZSBlcnJvcnMgbG9hZGluZyB0aGUgdmlkZW8gc3RyZWFtLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBsYXlTdHJlYW1FcnJvckV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3BsYXlTdHJlYW1FcnJvcic7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIEVycm9yIG1lc3NhZ2UgKi9cclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmdcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBQbGF5U3RyZWFtRXJyb3JFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ3BsYXlTdHJlYW1FcnJvcicpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgYmVmb3JlIHRyeWluZyB0byBzdGFydCB2aWRlbyBwbGF5YmFjay5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQbGF5U3RyZWFtRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAncGxheVN0cmVhbSc7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigncGxheVN0cmVhbScpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIHRoZSBicm93c2VyIHJlamVjdHMgdmlkZW8gcGxheWJhY2suIENhbiBoYXBwZW4gZm9yIGV4YW1wbGUgaWZcclxuICogdmlkZW8gYXV0by1wbGF5IHdpdGhvdXQgdXNlciBpbnRlcmFjdGlvbiBpcyByZWZ1c2VkIGJ5IHRoZSBicm93c2VyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3BsYXlTdHJlYW1SZWplY3RlZCc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIFJlamVjdGlvbiByZWFzb24gKi9cclxuICAgICAgICByZWFzb246IHVua25vd25cclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBQbGF5U3RyZWFtUmVqZWN0ZWRFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ3BsYXlTdHJlYW1SZWplY3RlZCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgYSBmdWxsIEZyZWV6ZUZyYW1lIGltYWdlIGZyb20gVUUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTG9hZEZyZWV6ZUZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnbG9hZEZyZWV6ZUZyYW1lJztcclxuICAgIHJlYWRvbmx5IGRhdGE6IHtcclxuICAgICAgICAvKiogdHJ1ZSBpZiBzaG91bGQgc2hvdyBjbGljay10by1wbGF5IG92ZXJsYXksIG5vdCB0aGUgZnJlZXplIGZyYW1lIGNvbnRlbnRzICovXHJcbiAgICAgICAgc2hvdWxkU2hvd1BsYXlPdmVybGF5OiBib29sZWFuO1xyXG4gICAgICAgIC8qKiB0cnVlIGlmIHRoZSByZWNlaXZlZCBpbWFnZSBpcyB2YWxpZCAqL1xyXG4gICAgICAgIGlzVmFsaWQ6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqIEltYWdlIGRhdGEuIENhbiBiZSBlLmcuIGRpc3BsYXllZCBieSBlbmNvZGluZyBhcyBhIGRhdGEgdXJsLiAqL1xyXG4gICAgICAgIGpwZWdEYXRhPzogVWludDhBcnJheTtcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBMb2FkRnJlZXplRnJhbWVFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ2xvYWRGcmVlemVGcmFtZScpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgVW5mcmVlemVGcmFtZSBtZXNzYWdlIGZyb20gVUUgYW5kIHZpZGVvIHBsYXliYWNrIGlzIGFib3V0IHRvIGJlIHJlc3VtZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGlkZUZyZWV6ZUZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnaGlkZUZyZWV6ZUZyYW1lJztcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdoaWRlRnJlZXplRnJhbWUnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHJlY2VpdmluZyBXZWJSVEMgc3RhdGlzdGljcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdGF0c1JlY2VpdmVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnc3RhdHNSZWNlaXZlZCc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIFN0YXRpc3RpY3Mgb2JqZWN0ICovXHJcbiAgICAgICAgYWdncmVnYXRlZFN0YXRzOiBBZ2dyZWdhdGVkU3RhdHNcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBTdGF0c1JlY2VpdmVkRXZlbnRbJ2RhdGEnXSkge1xyXG4gICAgICAgIHN1cGVyKCdzdGF0c1JlY2VpdmVkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHN0cmVhbWVyIGxpc3QgY2hhbmdlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1lckxpc3RNZXNzYWdlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnc3RyZWFtZXJMaXN0TWVzc2FnZSc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIFN0cmVhbWVyIGxpc3QgbWVzc2FnZSBjb250YWluaW5nIGFuIGFycmF5IG9mIHN0cmVhbWVyIGlkcyAqL1xyXG4gICAgICAgIG1lc3NhZ2VTdHJlYW1lckxpc3Q6IE1lc3NhZ2VTdHJlYW1lckxpc3Q7XHJcbiAgICAgICAgLyoqIEF1dG8tc2VsZWN0ZWQgc3RyZWFtZXIgZnJvbSB0aGUgbGlzdCwgb3IgbnVsbCBpZiB1bmFibGUgdG8gYXV0by1zZWxlY3QgYW5kIHVzZXIgc2hvdWxkIGJlIHByb21wdGVkIHRvIHNlbGVjdCAqL1xyXG4gICAgICAgIGF1dG9TZWxlY3RlZFN0cmVhbWVySWQ6IHN0cmluZyB8IG51bGw7XHJcbiAgICB9O1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50WydkYXRhJ10pIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtZXJMaXN0TWVzc2FnZScpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgbGF0ZW5jeSB0ZXN0IHJlc3VsdHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICdsYXRlbmN5VGVzdFJlc3VsdCc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIExhdGVuY3kgdGVzdCByZXN1bHQgb2JqZWN0ICovXHJcbiAgICAgICAgbGF0ZW5jeVRpbWluZ3M6IExhdGVuY3lUZXN0UmVzdWx0c1xyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IExhdGVuY3lUZXN0UmVzdWx0RXZlbnRbJ2RhdGEnXSkge1xyXG4gICAgICAgIHN1cGVyKCdsYXRlbmN5VGVzdFJlc3VsdCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgaW5pdGlhbCBzZXR0aW5ncyBmcm9tIFVFLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEluaXRpYWxTZXR0aW5nc0V2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ2luaXRpYWxTZXR0aW5ncyc7XHJcbiAgICByZWFkb25seSBkYXRhOiB7XHJcbiAgICAgICAgLyoqIEluaXRpYWwgc2V0dGluZ3MgZnJvbSBVRSAqL1xyXG4gICAgICAgIHNldHRpbmdzOiBJbml0aWFsU2V0dGluZ3NcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBJbml0aWFsU2V0dGluZ3NFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ2luaXRpYWxTZXR0aW5ncycpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNldHRpbmdzRGF0YSA9XHJcbiAgICB8IHtcclxuICAgICAgICAgIC8qKiBGbGFnIGlkICovXHJcbiAgICAgICAgICBpZDogRmxhZ3NJZHM7XHJcbiAgICAgICAgICB0eXBlOiAnZmxhZyc7XHJcbiAgICAgICAgICAvKiogRmxhZyB2YWx1ZSAqL1xyXG4gICAgICAgICAgdmFsdWU6IGJvb2xlYW47XHJcbiAgICAgICAgICAvKiogU2V0dGluZ0ZsYWcgb2JqZWN0ICovXHJcbiAgICAgICAgICB0YXJnZXQ6IFNldHRpbmdGbGFnO1xyXG4gICAgICB9XHJcbiAgICB8IHtcclxuICAgICAgICAgIC8qKiBOdW1lcmljIHNldHRpbmcgaWQgKi9cclxuICAgICAgICAgIGlkOiBOdW1lcmljUGFyYW1ldGVyc0lkcztcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInO1xyXG4gICAgICAgICAgLyoqIE51bWVyaWMgc2V0dGluZyB2YWx1ZSAqL1xyXG4gICAgICAgICAgdmFsdWU6IG51bWJlcjtcclxuICAgICAgICAgIC8qKiBTZXR0aW5nTnVtYmVyIG9iamVjdCAqL1xyXG4gICAgICAgICAgdGFyZ2V0OiBTZXR0aW5nTnVtYmVyO1xyXG4gICAgICB9XHJcbiAgICB8IHtcclxuICAgICAgICAgIC8qKiBUZXh0IHNldHRpbmcgaWQgKi9cclxuICAgICAgICAgIGlkOiBUZXh0UGFyYW1ldGVyc0lkcztcclxuICAgICAgICAgIHR5cGU6ICd0ZXh0JztcclxuICAgICAgICAgIC8qKiBUZXh0IHNldHRpbmcgdmFsdWUgKi9cclxuICAgICAgICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICAgICAgICAvKiogU2V0dGluZ1RleHQgb2JqZWN0ICovXHJcbiAgICAgICAgICB0YXJnZXQ6IFNldHRpbmdUZXh0O1xyXG4gICAgICB9XHJcbiAgICB8IHtcclxuICAgICAgICAgIC8qKiBPcHRpb24gc2V0dGluZyBpZCAqL1xyXG4gICAgICAgICAgaWQ6IE9wdGlvblBhcmFtZXRlcnNJZHM7XHJcbiAgICAgICAgICB0eXBlOiAnb3B0aW9uJztcclxuICAgICAgICAgIC8qKiBPcHRpb24gc2V0dGluZyBzZWxlY3RlZCB2YWx1ZSAqL1xyXG4gICAgICAgICAgdmFsdWU6IHN0cmluZztcclxuICAgICAgICAgIC8qKiBTZXR0aW5nT3B0aW9uIG9iamVjdCAqL1xyXG4gICAgICAgICAgdGFyZ2V0OiBTZXR0aW5nT3B0aW9uO1xyXG4gICAgICB9O1xyXG5cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIFBpeGVsU3RyZWFtaW5nIHNldHRpbmdzIGNoYW5nZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc0NoYW5nZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICdzZXR0aW5nc0NoYW5nZWQnO1xyXG4gICAgcmVhZG9ubHkgZGF0YTogU2V0dGluZ3NEYXRhO1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogU2V0dGluZ3NDaGFuZ2VkRXZlbnRbJ2RhdGEnXSkge1xyXG4gICAgICAgIHN1cGVyKCdzZXR0aW5nc0NoYW5nZWQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGFuIFhSIFNlc3Npb24gc3RhcnRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgWHJTZXNzaW9uU3RhcnRlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3hyU2Vzc2lvblN0YXJ0ZWQnO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3hyU2Vzc2lvblN0YXJ0ZWQnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhbiBYUiBTZXNzaW9uIGVuZHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBYclNlc3Npb25FbmRlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3hyU2Vzc2lvbkVuZGVkJztcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd4clNlc3Npb25FbmRlZCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBYckZyYW1lRGF0YSA9IHtcclxuICAgIC8qKiBUaGUgZnJhbWUgdGltZXN0YW1wICAqL1xyXG4gICAgdGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcDtcclxuICAgIC8qKiBUaGUgWFJGcmFtZSAqL1xyXG4gICAgZnJhbWU6IFhSRnJhbWU7XHJcbn07XHJcblxyXG4vKipcclxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGFuIFhSIEZyYW1lIGlzIGNvbXBsZXRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgWHJGcmFtZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3hyRnJhbWUnO1xyXG4gICAgcmVhZG9ubHkgZGF0YTogWHJGcmFtZURhdGFcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IFhyRnJhbWVFdmVudFsnZGF0YSddKSB7XHJcbiAgICAgICAgc3VwZXIoJ3hyRnJhbWUnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBQaXhlbFN0cmVhbWluZ0V2ZW50ID1cclxuICAgIHwgQWZrV2FybmluZ0FjdGl2YXRlRXZlbnRcclxuICAgIHwgQWZrV2FybmluZ1VwZGF0ZUV2ZW50XHJcbiAgICB8IEFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnRcclxuICAgIHwgQWZrVGltZWRPdXRFdmVudFxyXG4gICAgfCBWaWRlb0VuY29kZXJBdmdRUEV2ZW50XHJcbiAgICB8IFdlYlJ0Y1NkcEV2ZW50XHJcbiAgICB8IFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnRcclxuICAgIHwgV2ViUnRjQ29ubmVjdGluZ0V2ZW50XHJcbiAgICB8IFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50XHJcbiAgICB8IFdlYlJ0Y0ZhaWxlZEV2ZW50XHJcbiAgICB8IFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50XHJcbiAgICB8IERhdGFDaGFubmVsT3BlbkV2ZW50XHJcbiAgICB8IERhdGFDaGFubmVsQ2xvc2VFdmVudFxyXG4gICAgfCBEYXRhQ2hhbm5lbEVycm9yRXZlbnRcclxuICAgIHwgVmlkZW9Jbml0aWFsaXplZEV2ZW50XHJcbiAgICB8IFN0cmVhbUxvYWRpbmdFdmVudFxyXG4gICAgfCBTdHJlYW1QcmVDb25uZWN0RXZlbnRcclxuICAgIHwgU3RyZWFtUmVjb25uZWN0RXZlbnRcclxuICAgIHwgU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50XHJcbiAgICB8IFBsYXlTdHJlYW1FcnJvckV2ZW50XHJcbiAgICB8IFBsYXlTdHJlYW1FdmVudFxyXG4gICAgfCBQbGF5U3RyZWFtUmVqZWN0ZWRFdmVudFxyXG4gICAgfCBMb2FkRnJlZXplRnJhbWVFdmVudFxyXG4gICAgfCBIaWRlRnJlZXplRnJhbWVFdmVudFxyXG4gICAgfCBTdGF0c1JlY2VpdmVkRXZlbnRcclxuICAgIHwgU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50XHJcbiAgICB8IExhdGVuY3lUZXN0UmVzdWx0RXZlbnRcclxuICAgIHwgSW5pdGlhbFNldHRpbmdzRXZlbnRcclxuICAgIHwgU2V0dGluZ3NDaGFuZ2VkRXZlbnRcclxuICAgIHwgWHJTZXNzaW9uU3RhcnRlZEV2ZW50XHJcbiAgICB8IFhyU2Vzc2lvbkVuZGVkRXZlbnRcclxuICAgIHwgWHJGcmFtZUV2ZW50O1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcclxuICAgIC8qKlxyXG4gICAgICogRGlzcGF0Y2ggYSBuZXcgZXZlbnQuXHJcbiAgICAgKiBAcGFyYW0gZSBldmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpc3BhdGNoRXZlbnQoZTogUGl4ZWxTdHJlYW1pbmdFdmVudCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYW4gZXZlbnQgaGFuZGxlci5cclxuICAgICAqIEBwYXJhbSB0eXBlIGV2ZW50IG5hbWVcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBldmVudCBoYW5kbGVyIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyPFxyXG4gICAgICAgIFQgZXh0ZW5kcyBQaXhlbFN0cmVhbWluZ0V2ZW50Wyd0eXBlJ10sXHJcbiAgICAgICAgRSBleHRlbmRzIFBpeGVsU3RyZWFtaW5nRXZlbnQgJiB7IHR5cGU6IFQgfVxyXG4gICAgPih0eXBlOiBULCBsaXN0ZW5lcjogKGU6IEV2ZW50ICYgRSkgPT4gdm9pZCkge1xyXG4gICAgICAgIHN1cGVyLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBldmVudCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxcclxuICAgICAgICBUIGV4dGVuZHMgUGl4ZWxTdHJlYW1pbmdFdmVudFsndHlwZSddLFxyXG4gICAgICAgIEUgZXh0ZW5kcyBQaXhlbFN0cmVhbWluZ0V2ZW50ICYgeyB0eXBlOiBUIH1cclxuICAgID4odHlwZTogVCwgbGlzdGVuZXI6IChlOiBFdmVudCAmIEUpID0+IHZvaWQpIHtcclxuICAgICAgICBzdXBlci5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuZXhwb3J0IHR5cGUgVW5yZWdpc3RlckZ1bmN0aW9uID0gKCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudExpc3RlbmVyVHJhY2tlciB7XHJcbiAgICBwcml2YXRlIHVucmVnaXN0ZXJDYWxsYmFja3M6IFVucmVnaXN0ZXJGdW5jdGlvbltdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB1bnJlZ2lzdGVyQWxsIGlzIGNhbGxlZC5cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBcclxuICAgICAqL1xyXG4gICAgYWRkVW5yZWdpc3RlckNhbGxiYWNrKGNhbGxiYWNrOiBVbnJlZ2lzdGVyRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlIGFsbCBjYWxsYmFja3MgYW5kIGNsZWFyIHRoZSBsaXN0LlxyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyQWxsKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBwb3B1bGF0ZSBmaWxlIGluZm9ybWF0aW9uIGZyb20gYnl0ZSBidWZmZXJzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZpbGVVdGlsIHtcclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIGEgZmlsZXMgZXh0ZW5zaW9uIHdoZW4gcmVjZWl2ZWQgb3ZlciBkYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSB2aWV3IC0gdGhlIGZpbGUgZXh0ZW5zaW9uIGRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHNldEV4dGVuc2lvbkZyb21CeXRlcyh2aWV3OiBVaW50OEFycmF5LCBmaWxlOiBGaWxlVGVtcGxhdGUpIHtcclxuICAgICAgICAvLyBSZXNldCBmaWxlIGlmIHdlIGdvdCBhIGZpbGUgbWVzc2FnZSBhbmQgd2UgYXJlIG5vdCBcInJlY2VpdmluZ1wiIGl0IHlldFxyXG4gICAgICAgIGlmICghZmlsZS5yZWNlaXZpbmcpIHtcclxuICAgICAgICAgICAgZmlsZS5taW1ldHlwZSA9ICcnO1xyXG4gICAgICAgICAgICBmaWxlLmV4dGVuc2lvbiA9ICcnO1xyXG4gICAgICAgICAgICBmaWxlLnJlY2VpdmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGZpbGUudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZmlsZS5zaXplID0gMDtcclxuICAgICAgICAgICAgZmlsZS5kYXRhID0gW107XHJcbiAgICAgICAgICAgIGZpbGUudGltZXN0YW1wU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAnUmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZmlsZScsXHJcbiAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBleHRlbnNpb25Bc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKFxyXG4gICAgICAgICAgICB2aWV3LnNsaWNlKDEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGV4dGVuc2lvbkFzU3RyaW5nLCA2KTtcclxuICAgICAgICBmaWxlLmV4dGVuc2lvbiA9IGV4dGVuc2lvbkFzU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIGEgZmlsZXMgbWltZSB0eXBlIHdoZW4gcmVjZWl2ZWQgb3ZlciBkYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSB2aWV3IC0gdGhlIGZpbGUgbWltZSB0eXBlIGRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHNldE1pbWVUeXBlRnJvbUJ5dGVzKHZpZXc6IFVpbnQ4QXJyYXksIGZpbGU6IEZpbGVUZW1wbGF0ZSkge1xyXG4gICAgICAgIC8vIFJlc2V0IGZpbGUgaWYgd2UgZ290IGEgZmlsZSBtZXNzYWdlIGFuZCB3ZSBhcmUgbm90IFwicmVjZWl2aW5nXCIgaXQgeWV0XHJcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZykge1xyXG4gICAgICAgICAgICBmaWxlLm1pbWV0eXBlID0gJyc7XHJcbiAgICAgICAgICAgIGZpbGUuZXh0ZW5zaW9uID0gJyc7XHJcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgZmlsZS52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmaWxlLnNpemUgPSAwO1xyXG4gICAgICAgICAgICBmaWxlLmRhdGEgPSBbXTtcclxuICAgICAgICAgICAgZmlsZS50aW1lc3RhbXBTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdSZWNlaXZlZCBmaXJzdCBjaHVuayBvZiBmaWxlJyxcclxuICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1pbWVBc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKHZpZXcuc2xpY2UoMSkpO1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgbWltZUFzU3RyaW5nLCA2KTtcclxuICAgICAgICBmaWxlLm1pbWV0eXBlID0gbWltZUFzU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIGEgZmlsZXMgY29udGVudHMgd2hlbiByZWNlaXZlZCBvdmVyIGRhdGEgY2hhbm5lbFxyXG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZmlsZSBjb250ZW50cyBkYXRhXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXRDb250ZW50c0Zyb21CeXRlcyh2aWV3OiBVaW50OEFycmF5LCBmaWxlOiBGaWxlVGVtcGxhdGUpIHtcclxuICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHJlY2VpdmVkIHRoZSBpbml0aWFsIHNldHVwIGluc3RydWN0aW9ucywgcmV0dXJuXHJcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZykgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IHRoZSB0b3RhbCBzaXplIG9mIHRoZSBmaWxlIChhY3Jvc3MgYWxsIGNodW5rcylcclxuICAgICAgICBmaWxlLnNpemUgPSBNYXRoLmNlaWwoXHJcbiAgICAgICAgICAgIG5ldyBEYXRhVmlldyh2aWV3LnNsaWNlKDEsIDUpLmJ1ZmZlcikuZ2V0SW50MzIoMCwgdHJ1ZSkgL1xyXG4gICAgICAgICAgICAgICAgMTYzNzkgLyogVGhlIG1heGltdW0gbnVtYmVyIG9mIHBheWxvYWQgYml0cyBwZXIgbWVzc2FnZSovXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBmaWxlIHBhcnQgb2YgdGhlIHBheWxvYWRcclxuICAgICAgICBjb25zdCBmaWxlQnl0ZXMgPSB2aWV3LnNsaWNlKDEgKyA0KTtcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kIHRvIGV4aXN0aW5nIGRhdGEgdGhhdCBob2xkcyB0aGUgZmlsZVxyXG4gICAgICAgIGZpbGUuZGF0YS5wdXNoKGZpbGVCeXRlcyk7XHJcblxyXG4gICAgICAgIC8vIFVuY29tbWVudCBmb3IgZGVidWdcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBgUmVjZWl2ZWQgZmlsZSBjaHVuazogJHtmaWxlLmRhdGEubGVuZ3RofS8ke2ZpbGUuc2l6ZX1gLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGZpbGUuZGF0YS5sZW5ndGggPT09IGZpbGUuc2l6ZSkge1xyXG4gICAgICAgICAgICBmaWxlLnJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmaWxlLnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVjZWl2ZWQgY29tcGxldGUgZmlsZScsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2ZlckR1cmF0aW9uID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBmaWxlLnRpbWVzdGFtcFN0YXJ0O1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2ZlckJpdHJhdGUgPSBNYXRoLnJvdW5kKFxyXG4gICAgICAgICAgICAgICAgKGZpbGUuc2l6ZSAqIDE2ICogMTAyNCkgLyB0cmFuc2ZlckR1cmF0aW9uXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgYEF2ZXJhZ2UgdHJhbnNmZXIgYml0cmF0ZTogJHt0cmFuc2ZlckJpdHJhdGV9a2IvcyBvdmVyICR7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJEdXJhdGlvbiAvIDEwMDBcclxuICAgICAgICAgICAgICAgIH0gc2Vjb25kc2AsXHJcbiAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBGaWxlIHJlY29uc3RydWN0aW9uXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBFeGFtcGxlIGNvZGUgdG8gcmVjb25zdHJ1Y3QgdGhlIGZpbGVcclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogVGhpcyBjb2RlIHJlY29uc3RydWN0cyB0aGUgcmVjZWl2ZWQgZGF0YSBpbnRvIHRoZSBvcmlnaW5hbCBmaWxlIGJhc2VkIG9uIHRoZSBtaW1lIHR5cGUgYW5kIGV4dGVuc2lvbiBwcm92aWRlZCBhbmQgdGhlbiBkb3dubG9hZHMgdGhlIHJlY29uc3RydWN0ZWQgZmlsZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZWQgPSBuZXcgQmxvYihmaWxlLmRhdGEsIHsgdHlwZTogZmlsZS5taW1ldHlwZSB9KTtcclxuICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBVUkwuY3JlYXRlT2JqZWN0VVJMKHJlY2VpdmVkKSk7XHJcbiAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIGB0cmFuc2Zlci4ke2ZpbGUuZXh0ZW5zaW9ufWApO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChhKTtcclxuICAgICAgICAgICAgLy8gaWYgeW91IGFyZSBzbyBpbmNsaW5lZCB0byBtYWtlIGl0IGF1dG8tZG93bmxvYWQsIGRvIHNvbWV0aGluZyBsaWtlOiBhLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIGEucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlLmRhdGEubGVuZ3RoID4gZmlsZS5zaXplKSB7XHJcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgUmVjZWl2ZWQgYmlnZ2VyIGZpbGUgdGhhbiBhZHZlcnRpc2VkOiAke2ZpbGUuZGF0YS5sZW5ndGh9LyR7ZmlsZS5zaXplfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHRlbXBsYXRlIGZvciBhIGRvd25sb2FkZWQgZmlsZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZpbGVUZW1wbGF0ZSB7XHJcbiAgICBtaW1ldHlwZSA9ICcnO1xyXG4gICAgZXh0ZW5zaW9uID0gJyc7XHJcbiAgICByZWNlaXZpbmcgPSBmYWxzZTtcclxuICAgIHNpemUgPSAwO1xyXG4gICAgZGF0YTogQXJyYXk8VWludDhBcnJheT4gPSBbXTtcclxuICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICB0aW1lc3RhbXBTdGFydDogbnVtYmVyO1xyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5leHBvcnQgY2xhc3MgV2ViR0xVdGlscyB7XHJcbiAgICBzdGF0aWMgdmVydGV4U2hhZGVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFfcG9zaXRpb247XHJcblx0XHRhdHRyaWJ1dGUgdmVjMiBhX3RleENvb3JkO1xyXG5cclxuXHRcdC8vIGlucHV0XHJcblx0XHR1bmlmb3JtIHZlYzIgdV9yZXNvbHV0aW9uO1xyXG5cdFx0dW5pZm9ybSB2ZWM0IHVfb2Zmc2V0O1xyXG5cclxuXHRcdC8vXHJcblx0XHR2YXJ5aW5nIHZlYzIgdl90ZXhDb29yZDtcclxuXHJcblx0XHR2b2lkIG1haW4oKSB7XHJcblx0XHQgICAvLyBjb252ZXJ0IHRoZSByZWN0YW5nbGUgZnJvbSBwaXhlbHMgdG8gMC4wIHRvIDEuMFxyXG5cdFx0ICAgdmVjMiB6ZXJvVG9PbmUgPSBhX3Bvc2l0aW9uIC8gdV9yZXNvbHV0aW9uO1xyXG5cclxuXHRcdCAgIC8vIGNvbnZlcnQgZnJvbSAwLT4xIHRvIDAtPjJcclxuXHRcdCAgIHZlYzIgemVyb1RvVHdvID0gemVyb1RvT25lICogMi4wO1xyXG5cclxuXHRcdCAgIC8vIGNvbnZlcnQgZnJvbSAwLT4yIHRvIC0xLT4rMSAoY2xpcHNwYWNlKVxyXG5cdFx0ICAgdmVjMiBjbGlwU3BhY2UgPSB6ZXJvVG9Ud28gLSAxLjA7XHJcblxyXG5cdFx0ICAgZ2xfUG9zaXRpb24gPSB2ZWM0KGNsaXBTcGFjZSAqIHZlYzIoMSwgLTEpLCAwLCAxKTtcclxuXHRcdCAgIC8vIHBhc3MgdGhlIHRleENvb3JkIHRvIHRoZSBmcmFnbWVudCBzaGFkZXJcclxuXHRcdCAgIC8vIFRoZSBHUFUgd2lsbCBpbnRlcnBvbGF0ZSB0aGlzIHZhbHVlIGJldHdlZW4gcG9pbnRzLlxyXG5cdFx0ICAgdl90ZXhDb29yZCA9IChhX3RleENvb3JkICogdV9vZmZzZXQueHkpICsgdV9vZmZzZXQuenc7XHJcblx0XHR9XHJcblx0XHRgO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmcmFnbWVudFNoYWRlcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgXHJcblx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuXHJcblx0XHQvLyBvdXIgdGV4dHVyZVxyXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdV9pbWFnZTtcclxuXHJcblx0XHQvLyB0aGUgdGV4Q29vcmRzIHBhc3NlZCBpbiBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyLlxyXG5cdFx0dmFyeWluZyB2ZWMyIHZfdGV4Q29vcmQ7XHJcblxyXG5cdFx0dm9pZCBtYWluKCkge1xyXG5cdFx0ICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfaW1hZ2UsIHZfdGV4Q29vcmQpO1xyXG5cdFx0fVxyXG5cdFx0YDtcclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuZXhwb3J0IGNsYXNzIFdlYlhSVXRpbHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWVwIGNvcGllcyBhIGdhbWVwYWQncyB2YWx1ZXMgYnkgZmlyc3QgY29udmVydGluZyBpdCB0byBhIEpTT04gb2JqZWN0IGFuZCB0aGVuIGJhY2sgdG8gYSBnYW1lcGFkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGdhbWVwYWQgdGhlIG9yaWdpbmFsIGdhbWVwYWRcclxuICAgICAqIEByZXR1cm5zIGEgbmV3IGdhbWVwYWQgb2JqZWN0LCBwb3B1bGF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgZ2FtZXBhZHMgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkZWVwQ29weUdhbWVwYWQoZ2FtZXBhZDogR2FtZXBhZCk6IEdhbWVwYWQge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKFxyXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zOiBnYW1lcGFkLmJ1dHRvbnMubWFwKChiKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIEpTT04ucGFyc2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWQ6IGIucHJlc3NlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoZWQ6IGIudG91Y2hlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBheGVzOiBnYW1lcGFkLmF4ZXNcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvTW91c2VDb250cm9sbGVyJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcbmltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnLi9WaWRlb1BsYXllcic7XHJcblxyXG4vKipcclxuICogVmlkZW8gUGxheWVyIENvbnRyb2xsZXIgaGFuZGxlcyB0aGUgY3JlYXRpb24gb2YgdGhlIHZpZGVvIEhUTUwgZWxlbWVudCBhbmQgYWxsIGhhbmRsZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RyZWFtQ29udHJvbGxlciB7XHJcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XHJcbiAgICBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQ7XHJcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciBWaWRlbyBQbGF5ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnQXVkaW8nKSBhcyBIVE1MQXVkaW9FbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBQZWVyIGNvbm5lY3Rpb24gaGFzIGEgdHJhY2sgZXZlbnRcclxuICAgICAqIEBwYXJhbSBydGNUcmFja0V2ZW50IC0gUlRDIFRyYWNrIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2socnRjVHJhY2tFdmVudDogUlRDVHJhY2tFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdoYW5kbGVPblRyYWNrICcgKyBKU09OLnN0cmluZ2lmeShydGNUcmFja0V2ZW50LnN0cmVhbXMpLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG5cclxuICAgICAgICBpZiAocnRjVHJhY2tFdmVudC50cmFjaykge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdHb3QgdHJhY2sgLSAnICtcclxuICAgICAgICAgICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgK1xyXG4gICAgICAgICAgICAgICAgICAgICcgaWQ9JyArXHJcbiAgICAgICAgICAgICAgICAgICAgcnRjVHJhY2tFdmVudC50cmFjay5pZCArXHJcbiAgICAgICAgICAgICAgICAgICAgJyByZWFkeVN0YXRlPScgK1xyXG4gICAgICAgICAgICAgICAgICAgIHJ0Y1RyYWNrRXZlbnQudHJhY2sucmVhZHlTdGF0ZSxcclxuICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgPT0gJ2F1ZGlvJykge1xyXG4gICAgICAgICAgICB0aGlzLkNyZWF0ZUF1ZGlvVHJhY2socnRjVHJhY2tFdmVudC5zdHJlYW1zWzBdKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSAndmlkZW8nICYmXHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgIT09IHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gcnRjVHJhY2tFdmVudC5zdHJlYW1zWzBdO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICdTZXQgdmlkZW8gc291cmNlIGZyb20gdmlkZW8gdHJhY2sgb250cmFjay4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRoZSBhdWRpbyBkZXZpY2Ugd2hlbiByZWNlaXZpbmcgYW4gUlRDVHJhY2tFdmVudCB3aXRoIHRoZSBraW5kIG9mIFwiYXVkaW9cIlxyXG4gICAgICogQHBhcmFtIGF1ZGlvTWVkaWFTdHJlYW0gLSBBdWRpbyBNZWRpYSBzdHJlYW0gdHJhY2tcclxuICAgICAqL1xyXG4gICAgQ3JlYXRlQXVkaW9UcmFjayhhdWRpb01lZGlhU3RyZWFtOiBNZWRpYVN0cmVhbSkge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcblxyXG4gICAgICAgIC8vIGRvIG5vdGhpbmcgdGhlIHZpZGVvIGhhcyB0aGUgc2FtZSBtZWRpYSBzdHJlYW0gYXMgdGhlIGF1ZGlvIHRyYWNrIHdlIGhhdmUgaGVyZSAodGhleSBhcmUgbGlua2VkKVxyXG4gICAgICAgIGlmICh2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID09IGF1ZGlvTWVkaWFTdHJlYW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB2aWRlbyBlbGVtZW50IGhhcyBzb21lIG90aGVyIG1lZGlhIHN0cmVhbSB0aGF0IGlzIG5vdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBhdWRpbyB0cmFja1xyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICYmXHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgIT09IGF1ZGlvTWVkaWFTdHJlYW1cclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IGF1ZGlvIGVsZW1lbnRcclxuICAgICAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQuc3JjT2JqZWN0ID0gYXVkaW9NZWRpYVN0cmVhbTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAnQ3JlYXRlZCBuZXcgYXVkaW8gZWxlbWVudCB0byBwbGF5IHNlcGFyYXRlIGF1ZGlvIHN0cmVhbS4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBDb25maWcsIEZsYWdzIH0gZnJvbSAnLi4vQ29uZmlnL0NvbmZpZyc7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5cclxuLyoqXHJcbiAqIEV4dHJhIHR5cGVzIGZvciB0aGUgSFRNTEVsZW1lbnRcclxuICovXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgbW96UmVxdWVzdFBvaW50ZXJMb2NrPygpOiB2b2lkO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogVGhlIHZpZGVvIHBsYXllciBodG1sIGVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWaWRlb1BsYXllciB7XHJcbiAgICBwcml2YXRlIGNvbmZpZzogQ29uZmlnO1xyXG4gICAgcHJpdmF0ZSB2aWRlb0VsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQ7XHJcbiAgICBwcml2YXRlIG9yaWVudGF0aW9uQ2hhbmdlVGltZW91dDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBsYXN0VGltZVJlc2l6ZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICBvbk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uQ2FsbGJhY2s6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIG9uUmVzaXplUGxheWVyQ2FsbGJhY2s6ICgpID0+IHZvaWQ7XHJcbiAgICByZXNpemVUaW1lb3V0SGFuZGxlOiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IHRoZSBodG1sIGRpdiB0aGUgdGhlIHZpZGVvIHBsYXllciB3aWxsIGJlIGluamVjdGVkIGludG9cclxuICAgICAqIEBwYXJhbSBjb25maWcgdGhlIGFwcGxpY2F0aW9ucyBjb25maWd1cmF0aW9uLiBXZSdyZSBpbnRlcmVzdGVkIGluIHRoZSBzdGFydFZpZGVvTXV0ZWQgZmxhZ1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih2aWRlb0VsZW1lbnRQYXJlbnQ6IEhUTUxFbGVtZW50LCBjb25maWc6IENvbmZpZykge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5pZCA9ICdzdHJlYW1pbmdWaWRlbyc7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnBsYXlzSW5saW5lID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYWxsJztcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy52aWRlb0VsZW1lbnQpO1xyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplUGxheWVyQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgJ1Jlc29sdXRpb24gY2hhbmdlZCwgcmVzdHlsaW5nIHBsYXllciwgZGlkIHlvdSBmb3JnZXQgdG8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbj8nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uTWF0Y2hWaWV3cG9ydFJlc29sdXRpb25DYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgICAgICAnUmVzb2x1dGlvbiBjaGFuZ2VkIGFuZCBtYXRjaCB2aWV3cG9ydCByZXNvbHV0aW9uIGlzIHR1cm5lZCBvbiwgZGlkIHlvdSBmb3JnZXQgdG8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbj8nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHBsYXkgZm9yIHZpZGVvXHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50LnBhdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGxheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25sb2FkZWRtZXRhZGF0YSA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vblZpZGVvSW5pdGlhbGl6ZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBzZXQgcmVzaXplIGV2ZW50cyB0byB0aGUgd2luZG93cyBpZiBpdCBpcyByZXNpemVkIG9yIGl0cyBvcmllbnRhdGlvbiBpcyBjaGFuZ2VkXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMucmVzaXplUGxheWVyU3R5bGUoKSwgdHJ1ZSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgKCkgPT5cclxuICAgICAgICAgICAgdGhpcy5vbk9yaWVudGF0aW9uQ2hhbmdlKClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCB0aGUgdmlkZW8gZWxlbWVudCB3aXRoIGFueSBhcHBsaWNhdGlvbiBjb25maWcgYW5kIHBsYXlzIHRoZSB2aWRlbyBlbGVtZW50LlxyXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIGZvciBpZiBwbGF5aW5nIHRoZSB2aWRlbyB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXHJcbiAgICAgKi9cclxuICAgIHBsYXkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQubXV0ZWQgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKFxyXG4gICAgICAgICAgICBGbGFncy5TdGFydFZpZGVvTXV0ZWRcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LmF1dG9wbGF5ID0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChcclxuICAgICAgICAgICAgRmxhZ3MuQXV0b1BsYXlWaWRlb1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9FbGVtZW50LnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHZpZGVvIGVsZW1lbnQgaXMgcGF1c2VkLlxyXG4gICAgICovXHJcbiAgICBpc1BhdXNlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQucGF1c2VkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSB2aWRlbyBlbGVtZW50IGlzIHBsYXlpbmcuXHJcbiAgICAgKi9cclxuICAgIGlzVmlkZW9SZWFkeSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5yZWFkeVN0YXRlICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucmVhZHlTdGF0ZSA+IDBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdmlkZW8gZWxlbWVudCBoYXMgYSB2YWxpZCB2aWRlbyBzb3VyY2UgKHNyY09iamVjdCkuXHJcbiAgICAgKi9cclxuICAgIGhhc1ZpZGVvU291cmNlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgaHRtbCB2aWRlbyBlbGVtZW50XHJcbiAgICAgKiBAcmV0dXJucyAtIHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIHZpZGVvIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgZ2V0VmlkZW9FbGVtZW50KCk6IEhUTUxWaWRlb0VsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBodG1sIHZpZGVvIGVsZW1lbnRzIHBhcmVudFxyXG4gICAgICogQHJldHVybnMgLSB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSB2aWRlbyBlbGVtZW50cyBwYXJlbnRcclxuICAgICAqL1xyXG4gICAgZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgVmlkZW8gRWxlbWVudHMgc3JjIG9iamVjdCB0cmFja3MgdG8gZW5hYmxlXHJcbiAgICAgKiBAcGFyYW0gZW5hYmxlZCAtIEVuYWJsZSBUcmFja3Mgb24gdGhlIFNyYyBPYmplY3RcclxuICAgICAqL1xyXG4gICAgc2V0VmlkZW9FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICAvLyB0aGlzIGlzIGEgdGVtcG9yYXJ5IGhhY2sgdW50aWwgdHlwZSBzY3JpcHRzIHZpZGVvIGVsZW1lbnQgaXMgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBuZWVkIGZvciB0cmFja3Mgb24gYSBodG1sIHZpZGVvIGVsZW1lbnRcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudDtcclxuICAgICAgICAoPE1lZGlhU3RyZWFtPnZpZGVvRWxlbWVudC5zcmNPYmplY3QpXHJcbiAgICAgICAgICAgIC5nZXRUcmFja3MoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCgodHJhY2s6IE1lZGlhU3RyZWFtVHJhY2spID0+ICh0cmFjay5lbmFibGVkID0gZW5hYmxlZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHdoZW4gdGhlIHZpZGVvIGhhcyBiZWVuIGluaXRpYWxpemVkIHdpdGggYSBzcmNPYmplY3RcclxuICAgICAqL1xyXG4gICAgb25WaWRlb0luaXRpYWxpemVkKCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT24gdGhlIG9yaWVudGF0aW9uIGNoYW5nZSBvZiBhIHdpbmRvdyBjbGVhciB0aGUgdGltZW91dFxyXG4gICAgICovXHJcbiAgICBvbk9yaWVudGF0aW9uQ2hhbmdlKCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm9yaWVudGF0aW9uQ2hhbmdlVGltZW91dCk7XHJcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplcyB0aGUgcGxheWVyIHN0eWxlIGJhc2VkIG9uIHRoZSB3aW5kb3cgaGVpZ2h0IGFuZCB3aWR0aFxyXG4gICAgICogQHJldHVybnMgLSBuaWwgaWYgcmVxdWlyZW1lbnRzIGFyZSBzYXRpc2ZpZWRcclxuICAgICAqL1xyXG4gICAgcmVzaXplUGxheWVyU3R5bGUoKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcclxuXHJcbiAgICAgICAgaWYgKHZpZGVvRWxlbWVudFBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZpeGVkLXNpemUnKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplUGxheWVyQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY29udHJvbHMgZm9yIHJlc2l6aW5nIHRoZSBwbGF5ZXJcclxuICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlVG9GaWxsUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMub25SZXNpemVQbGF5ZXJDYWxsYmFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplcyB0aGUgcGxheWVyIGVsZW1lbnQgdG8gZmlsbCB0aGUgcGFyZW50IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVzaXplUGxheWVyU3R5bGVUb0ZpbGxQYXJlbnRFbGVtZW50KCkge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcblxyXG4gICAgICAgIC8vVmlkZW8gaXMgbm90IGluaXRpYWxpemVkIHlldCBzbyBzZXQgdmlkZW9FbGVtZW50UGFyZW50IHRvIHNpemUgb2YgcGFyZW50IGVsZW1lbnRcclxuICAgICAgICBjb25zdCBzdHlsZVdpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlSGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlVG9wID0gMDtcclxuICAgICAgICBjb25zdCBzdHlsZUxlZnQgPSAwO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5zZXRBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICdzdHlsZScsXHJcbiAgICAgICAgICAgICd0b3A6ICcgK1xyXG4gICAgICAgICAgICAgICAgc3R5bGVUb3AgK1xyXG4gICAgICAgICAgICAgICAgJ3B4OyBsZWZ0OiAnICtcclxuICAgICAgICAgICAgICAgIHN0eWxlTGVmdCArXHJcbiAgICAgICAgICAgICAgICAncHg7IHdpZHRoOiAnICtcclxuICAgICAgICAgICAgICAgIHN0eWxlV2lkdGggK1xyXG4gICAgICAgICAgICAgICAgJzsgaGVpZ2h0OiAnICtcclxuICAgICAgICAgICAgICAgIHN0eWxlSGVpZ2h0ICtcclxuICAgICAgICAgICAgICAgICc7IGN1cnNvcjogZGVmYXVsdDsnXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVWaWRlb1N0cmVhbVNpemUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICBpZiAobm93IC0gdGhpcy5sYXN0VGltZVJlc2l6ZWQgPiAzMDApIHtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5vbk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uQ2FsbGJhY2soXHJcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgsXHJcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgJ1Jlc2l6aW5nIHRvbyBvZnRlbiAtIHNraXBwaW5nJyxcclxuICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplVGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxyXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKSxcclxuICAgICAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgV2ViU29ja2V0Q29udHJvbGxlciB9IGZyb20gJy4uL1dlYlNvY2tldHMvV2ViU29ja2V0Q29udHJvbGxlcic7XHJcbmltcG9ydCB7IFN0cmVhbUNvbnRyb2xsZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9TdHJlYW1Db250cm9sbGVyJztcclxuaW1wb3J0IHtcclxuICAgIE1lc3NhZ2VBbnN3ZXIsXHJcbiAgICBNZXNzYWdlT2ZmZXIsXHJcbiAgICBNZXNzYWdlQ29uZmlnLFxyXG4gICAgTWVzc2FnZVN0cmVhbWVyTGlzdFxyXG59IGZyb20gJy4uL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUnO1xyXG5pbXBvcnQgeyBGcmVlemVGcmFtZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9GcmVlemVGcmFtZS9GcmVlemVGcmFtZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBBRktDb250cm9sbGVyIH0gZnJvbSAnLi4vQUZLL0FGS0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIgfSBmcm9tICcuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyJztcclxuaW1wb3J0IHsgS2V5Ym9hcmRDb250cm9sbGVyIH0gZnJvbSAnLi4vSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMnO1xyXG5pbXBvcnQge1xyXG4gICAgQ29uZmlnLFxyXG4gICAgRmxhZ3MsXHJcbiAgICBDb250cm9sU2NoZW1lVHlwZSxcclxuICAgIFRleHRQYXJhbWV0ZXJzLFxyXG4gICAgT3B0aW9uUGFyYW1ldGVycyxcclxuICAgIE51bWVyaWNQYXJhbWV0ZXJzXHJcbn0gZnJvbSAnLi4vQ29uZmlnL0NvbmZpZyc7XHJcbmltcG9ydCB7XHJcbiAgICBFbmNvZGVyU2V0dGluZ3MsXHJcbiAgICBJbml0aWFsU2V0dGluZ3MsXHJcbiAgICBXZWJSVENTZXR0aW5nc1xyXG59IGZyb20gJy4uL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyc7XHJcbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gJy4uL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0cyc7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5pbXBvcnQgeyBGaWxlVGVtcGxhdGUsIEZpbGVVdGlsIH0gZnJvbSAnLi4vVXRpbC9GaWxlVXRpbCc7XHJcbmltcG9ydCB7IElucHV0Q2xhc3Nlc0ZhY3RvcnkgfSBmcm9tICcuLi9JbnB1dHMvSW5wdXRDbGFzc2VzRmFjdG9yeSc7XHJcbmltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXInO1xyXG5pbXBvcnQge1xyXG4gICAgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIsXHJcbiAgICBNZXNzYWdlRGlyZWN0aW9uXHJcbn0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBSZXNwb25zZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgKiBhcyBNZXNzYWdlUmVjZWl2ZSBmcm9tICcuLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlJztcclxuaW1wb3J0IHsgTWVzc2FnZU9uU2NyZWVuS2V5Ym9hcmQgfSBmcm9tICcuLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlJztcclxuaW1wb3J0IHsgU2VuZERlc2NyaXB0b3JDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZERlc2NyaXB0b3JDb250cm9sbGVyJztcclxuaW1wb3J0IHsgU2VuZE1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZE1lc3NhZ2VDb250cm9sbGVyJztcclxuaW1wb3J0IHsgVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlciB9IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvTW91c2VDb250cm9sbGVyJztcclxuaW1wb3J0IHsgR2FtZVBhZENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvR2FtZXBhZENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbFNlbmRlciB9IGZyb20gJy4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsU2VuZGVyJztcclxuaW1wb3J0IHtcclxuICAgIENvb3JkaW5hdGVDb252ZXJ0ZXIsXHJcbiAgICBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmRcclxufSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBQaXhlbFN0cmVhbWluZyB9IGZyb20gJy4uL1BpeGVsU3RyZWFtaW5nL1BpeGVsU3RyZWFtaW5nJztcclxuaW1wb3J0IHsgSVRvdWNoQ29udHJvbGxlciB9IGZyb20gJy4uL0lucHV0cy9JVG91Y2hDb250cm9sbGVyJztcclxuaW1wb3J0IHtcclxuICAgIERhdGFDaGFubmVsQ2xvc2VFdmVudCxcclxuICAgIERhdGFDaGFubmVsRXJyb3JFdmVudCxcclxuICAgIERhdGFDaGFubmVsT3BlbkV2ZW50LFxyXG4gICAgSGlkZUZyZWV6ZUZyYW1lRXZlbnQsXHJcbiAgICBMb2FkRnJlZXplRnJhbWVFdmVudCxcclxuICAgIFBsYXlTdHJlYW1FcnJvckV2ZW50LFxyXG4gICAgUGxheVN0cmVhbUV2ZW50LFxyXG4gICAgUGxheVN0cmVhbVJlamVjdGVkRXZlbnQsXHJcbiAgICBTdHJlYW1lckxpc3RNZXNzYWdlRXZlbnRcclxufSBmcm9tICcuLi9VdGlsL0V2ZW50RW1pdHRlcic7XHJcbi8qKlxyXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIFdlYlJUQyBQbGF5ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIHtcclxuICAgIGNvbmZpZzogQ29uZmlnO1xyXG4gICAgcmVzcG9uc2VDb250cm9sbGVyOiBSZXNwb25zZUNvbnRyb2xsZXI7XHJcbiAgICBzZHBDb25zdHJhaW50czogUlRDT2ZmZXJPcHRpb25zO1xyXG4gICAgd2ViU29ja2V0Q29udHJvbGxlcjogV2ViU29ja2V0Q29udHJvbGxlcjtcclxuICAgIC8vIFRoZSBwcmltYXJ5IGRhdGEgY2hhbm5lbC4gVGhpcyBpcyBiaWRpcmVjdGlvbmFsIHdoZW4gcDJwIGFuZCBzZW5kIG9ubHkgd2hlbiB1c2luZyBhbiBTRlVcclxuICAgIHNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXI7XHJcbiAgICAvLyBBIHJlY3Ygb25seSBkYXRhIGNoYW5uZWwgcmVxdWlyZWQgd2hlbiB1c2luZyBhbiBTRlVcclxuICAgIHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcjtcclxuICAgIGRhdGFDaGFubmVsU2VuZGVyOiBEYXRhQ2hhbm5lbFNlbmRlcjtcclxuICAgIGRhdGFjaGFubmVsT3B0aW9uczogUlRDRGF0YUNoYW5uZWxJbml0O1xyXG4gICAgdmlkZW9QbGF5ZXI6IFZpZGVvUGxheWVyO1xyXG4gICAgc3RyZWFtQ29udHJvbGxlcjogU3RyZWFtQ29udHJvbGxlcjtcclxuICAgIHBlZXJDb25uZWN0aW9uQ29udHJvbGxlcjogUGVlckNvbm5lY3Rpb25Db250cm9sbGVyO1xyXG4gICAgaW5wdXRDbGFzc2VzRmFjdG9yeTogSW5wdXRDbGFzc2VzRmFjdG9yeTtcclxuICAgIGZyZWV6ZUZyYW1lQ29udHJvbGxlcjogRnJlZXplRnJhbWVDb250cm9sbGVyO1xyXG4gICAgc2hvdWxkU2hvd1BsYXlPdmVybGF5ID0gdHJ1ZTtcclxuICAgIGFma0NvbnRyb2xsZXI6IEFGS0NvbnRyb2xsZXI7XHJcbiAgICB2aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0OiBET01SZWN0O1xyXG4gICAgbGF0ZW5jeVN0YXJ0VGltZTogbnVtYmVyO1xyXG4gICAgcGl4ZWxTdHJlYW1pbmc6IFBpeGVsU3RyZWFtaW5nO1xyXG4gICAgc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyO1xyXG4gICAgc2VuZERlc2NyaXB0b3JDb250cm9sbGVyOiBTZW5kRGVzY3JpcHRvckNvbnRyb2xsZXI7XHJcbiAgICBzZW5kTWVzc2FnZUNvbnRyb2xsZXI6IFNlbmRNZXNzYWdlQ29udHJvbGxlcjtcclxuICAgIHRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXI6IFRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXI7XHJcbiAgICBrZXlib2FyZENvbnRyb2xsZXI6IEtleWJvYXJkQ29udHJvbGxlcjtcclxuICAgIG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyO1xyXG4gICAgdG91Y2hDb250cm9sbGVyOiBJVG91Y2hDb250cm9sbGVyO1xyXG4gICAgZ2FtZVBhZENvbnRyb2xsZXI6IEdhbWVQYWRDb250cm9sbGVyO1xyXG4gICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlcjtcclxuICAgIGlzVXNpbmdTRlU6IGJvb2xlYW47XHJcbiAgICBpc1F1YWxpdHlDb250cm9sbGVyOiBib29sZWFuO1xyXG4gICAgc3RhdHNUaW1lckhhbmRsZTogbnVtYmVyO1xyXG4gICAgZmlsZTogRmlsZVRlbXBsYXRlO1xyXG4gICAgcHJlZmVycmVkQ29kZWM6IHN0cmluZztcclxuICAgIHBlZXJDb25maWc6IFJUQ0NvbmZpZ3VyYXRpb247XHJcbiAgICB2aWRlb0F2Z1FwOiBudW1iZXI7XHJcbiAgICBzaG91bGRSZWNvbm5lY3Q6IGJvb2xlYW47XHJcbiAgICBpc1JlY29ubmVjdGluZzogYm9vbGVhbjtcclxuICAgIHJlY29ubmVjdEF0dGVtcHQ6IG51bWJlcjtcclxuICAgIHN1YnNjcmliZWRTdHJlYW06IHN0cmluZyB8IG51bGw7XHJcbiAgICBzaWduYWxsaW5nVXJsQnVpbGRlcjogKCkgPT4gc3RyaW5nO1xyXG5cclxuICAgIC8vIGlmIHlvdSBvdmVycmlkZSB0aGUgZGlzY29ubmVjdGlvbiBtZXNzYWdlIGJ5IGNhbGxpbmcgdGhlIGludGVyZmFjZSBtZXRob2Qgc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZVxyXG4gICAgLy8gaXQgd2lsbCB1c2UgdGhpcyBwcm9wZXJ0eSB0byBzdG9yZSB0aGUgb3ZlcnJpZGUgbWVzc2FnZSBzdHJpbmdcclxuICAgIGRpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gdGhlIGZyb250ZW5kIGNvbmZpZyBvYmplY3RcclxuICAgICAqIEBwYXJhbSBwaXhlbFN0cmVhbWluZyAtIHRoZSBQaXhlbFN0cmVhbWluZyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWcsIHBpeGVsU3RyZWFtaW5nOiBQaXhlbFN0cmVhbWluZykge1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcgPSBwaXhlbFN0cmVhbWluZztcclxuICAgICAgICB0aGlzLnJlc3BvbnNlQ29udHJvbGxlciA9IG5ldyBSZXNwb25zZUNvbnRyb2xsZXIoKTtcclxuICAgICAgICB0aGlzLmZpbGUgPSBuZXcgRmlsZVRlbXBsYXRlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2RwQ29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgICAgIG9mZmVyVG9SZWNlaXZlQXVkaW86IHRydWUsXHJcbiAgICAgICAgICAgIG9mZmVyVG9SZWNlaXZlVmlkZW86IHRydWVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBzZXQgdXAgdGhlIGFmayBsb2dpYyBjbGFzcyBhbmQgY29ubmVjdCB1cCBpdHMgbWV0aG9kIGZvciBjbG9zaW5nIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyID0gbmV3IEFGS0NvbnRyb2xsZXIoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLFxyXG4gICAgICAgICAgICB0aGlzLm9uQWZrVHJpZ2dlcmVkLmJpbmQodGhpcylcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5vbkFGS1RpbWVkT3V0Q2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZShcclxuICAgICAgICAgICAgICAgICdZb3UgaGF2ZSBiZWVuIGRpc2Nvbm5lY3RlZCBkdWUgdG8gaW5hY3Rpdml0eSdcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyID0gbmV3IEZyZWV6ZUZyYW1lQ29udHJvbGxlcihcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy52aWRlb0VsZW1lbnRQYXJlbnRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyID0gbmV3IFZpZGVvUGxheWVyKFxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLnZpZGVvRWxlbWVudFBhcmVudCxcclxuICAgICAgICAgICAgdGhpcy5jb25maWdcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIub25WaWRlb0luaXRpYWxpemVkID0gKCkgPT5cclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVWaWRlb0luaXRpYWxpemVkKCk7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gaW4gbWF0Y2ggdmlld3BvcnQgcmVzb2x1dGlvbiBtb2RlLCB3aGVuIHRoZSBicm93c2VyIHZpZXdwb3J0IGlzIHJlc2l6ZWQgd2Ugc2VuZCBhIHJlc2l6ZSBjb21tYW5kIGJhY2sgdG8gVUUuXHJcbiAgICAgICAgdGhpcy52aWRlb1BsYXllci5vbk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uQ2FsbGJhY2sgPSAoXHJcbiAgICAgICAgICAgIHdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgICAgIGhlaWdodDogbnVtYmVyXHJcbiAgICAgICAgKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgICAgICAgICAnUmVzb2x1dGlvbi5XaWR0aCc6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgJ1Jlc29sdXRpb24uSGVpZ2h0JzogaGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZChkZXNjcmlwdG9yKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBFdmVyeSB0aW1lIHZpZGVvIHBsYXllciBpcyByZXNpemVkIGluIGJyb3dzZXIgd2UgbmVlZCB0byByZWluaXRpYWxpemUgdGhlIG1vdXNlIGNvb3JkaW5hdGUgY29udmVyc2lvbiBhbmQgZnJlZXplIGZyYW1lIHNpemluZyBsb2dpYy5cclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLm9uUmVzaXplUGxheWVyQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyID0gbmV3IFN0cmVhbUNvbnRyb2xsZXIodGhpcy52aWRlb1BsYXllcik7XHJcblxyXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IG5ldyBDb29yZGluYXRlQ29udmVydGVyKHRoaXMudmlkZW9QbGF5ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyID0gbmV3IERhdGFDaGFubmVsQ29udHJvbGxlcigpO1xyXG4gICAgICAgIHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlciA9IG5ldyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIoKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRGF0YUNoYW5uZWxFdmVudEVtaXR0ZXJzKFxyXG4gICAgICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRGF0YUNoYW5uZWxFdmVudEVtaXR0ZXJzKHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlcik7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlciA9IG5ldyBEYXRhQ2hhbm5lbFNlbmRlcihcclxuICAgICAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlci5yZXNldEFma1dhcm5pbmdUaW1lck9uRGF0YVNlbmQgPSAoKSA9PlxyXG4gICAgICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIucmVzZXRBZmtXYXJuaW5nVGltZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlciA9IG5ldyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcigpO1xyXG5cclxuICAgICAgICAvLyBzZXQgdXAgd2Vic29ja2V0IG1ldGhvZHNcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIgPSBuZXcgV2ViU29ja2V0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkNvbmZpZyA9IChcclxuICAgICAgICAgICAgbWVzc2FnZUNvbmZpZzogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUNvbmZpZ1xyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0ID0gKFxyXG4gICAgICAgICAgICBtZXNzYWdlTGlzdDogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVN0cmVhbWVyTGlzdFxyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVTdHJlYW1lckxpc3RNZXNzYWdlKG1lc3NhZ2VMaXN0KTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJTb2NrZXRPbmNsb3NlT3ZlcmxheU1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25EaXNjb25uZWN0KFxyXG4gICAgICAgICAgICAgICAgYFdlYnNvY2tldCBkaXNjb25uZWN0ICgke2V2ZW50LmNvZGV9KSAke1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnJlYXNvbiAhPSAnJyA/ICctICcgKyBldmVudC5yZWFzb24gOiAnJ1xyXG4gICAgICAgICAgICAgICAgfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWaWRlb0VuY29kZXJBdmdRUCgwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbk9wZW4uYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgQnJvd3NlclNlbmRzT2ZmZXIgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKFxyXG4gICAgICAgICAgICAgICAgRmxhZ3MuQnJvd3NlclNlbmRPZmZlclxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZighQnJvd3NlclNlbmRzT2ZmZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5yZXF1ZXN0U3RyZWFtZXJMaXN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25DbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLnN0b3BBZmtXYXJuaW5nVGltZXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3Agc2VuZGluZyBzdGF0cyBvbiBpbnRlcnZhbCBpZiB3ZSBoYXZlIGNsb3NlZCBvdXIgY29ubmVjdGlvblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0c1RpbWVySGFuZGxlICYmIHRoaXMuc3RhdHNUaW1lckhhbmRsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRzVGltZXJIYW5kbGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIGFsbCBpbnB1dCBkZXZpY2UgZXZlbnQgaGFuZGxlcnMgb24gZGlzY29ubmVjdFxyXG4gICAgICAgICAgICB0aGlzLnNldFRvdWNoSW5wdXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRNb3VzZUlucHV0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0S2V5Ym9hcmRJbnB1dEVuYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnNldEdhbWVQYWRJbnB1dEVuYWJsZWQoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5zaG91bGRSZWNvbm5lY3QgJiYgdGhpcy5jb25maWcuZ2V0TnVtZXJpY1NldHRpbmdWYWx1ZShOdW1lcmljUGFyYW1ldGVycy5NYXhSZWNvbm5lY3RBdHRlbXB0cykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVjb25uZWN0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCsrO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0YXJ0U3RyZWFtQXV0b21hdGljYWxseSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNldCB1cCB0aGUgZmluYWwgd2ViUnRjIHBsYXllciBjb250cm9sbGVyIG1ldGhvZHMgZnJvbSB3aXRoaW4gb3VyIGFwcGxpY2F0aW9uIHNvIGEgY29ubmVjdGlvbiBjYW4gYmUgYWN0aXZhdGVkXHJcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIgPSBuZXcgU2VuZERlc2NyaXB0b3JDb250cm9sbGVyKFxyXG4gICAgICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyLFxyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlciA9IG5ldyBTZW5kTWVzc2FnZUNvbnRyb2xsZXIoXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIsXHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlciA9IG5ldyBUb1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyKFxyXG4gICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVycygpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucG9wdWxhdGVEZWZhdWx0UHJvdG9jb2woKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5ID0gbmV3IElucHV0Q2xhc3Nlc0ZhY3RvcnkoXHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9QbGF5ZXIsXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlclxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuaXNVc2luZ1NGVSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNRdWFsaXR5Q29udHJvbGxlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucHJlZmVycmVkQ29kZWMgPSAnJztcclxuICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk9wdGlvblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCxcclxuICAgICAgICAgICAgKHN0cmVhbWVyaWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmVhbWVyaWQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2xvc2UgdGhlIGN1cnJlbnQgcGVlciBjb25uZWN0aW9uIGFuZCBjcmVhdGUgYSBuZXcgb25lXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuY3JlYXRlUGVlckNvbm5lY3Rpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlZmVycmVkQ29kZWNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZWRTdHJlYW0gPSBzdHJlYW1lcmlkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRTdWJzY3JpYmUoc3RyZWFtZXJpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLnNldFZpZGVvRW5jb2RlckF2Z1FQKC0xKTtcclxuXHJcbiAgICAgICAgdGhpcy5zaWduYWxsaW5nVXJsQnVpbGRlciA9ICAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzaWduYWxsaW5nU2VydmVyVXJsID0gdGhpcy5jb25maWcuZ2V0VGV4dFNldHRpbmdWYWx1ZShcclxuICAgICAgICAgICAgICAgIFRleHRQYXJhbWV0ZXJzLlNpZ25hbGxpbmdTZXJ2ZXJVcmxcclxuICAgICAgICAgICAgKTtcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgY29ubmVjdGluZyB0byB0aGUgU0ZVIGFkZCBhIHNwZWNpYWwgdXJsIHBhcmFtZXRlciB0byB0aGUgdXJsXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBzaWduYWxsaW5nU2VydmVyVXJsICs9ICc/JyArIEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIgKyAnPXRydWUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGlzIG5vIGxvbmdlciBuZWVkZWQsIGJ1dCBpcyBhIGdvb2QgZXhhbXBsZSBmb3IgaG93IHN1YnNlcXVlbnQgY29uZmlnIGZsYWdzIGNhbiBiZSBhcHBlbmRlZFxyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Ccm93c2VyU2VuZE9mZmVyKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc2lnbmFsbGluZ1NlcnZlclVybCArPSAoc2lnbmFsbGluZ1NlcnZlclVybC5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArIEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIgKyAnPXRydWUnO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHNpZ25hbGxpbmdTZXJ2ZXJVcmw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFrZSBhIHJlcXVlc3QgdG8gVW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkIGNvb3JkaW5hdGVzXHJcbiAgICAgKiBAcGFyYW0geCB4IGF4aXMgY29vcmRpbmF0ZVxyXG4gICAgICogQHBhcmFtIHkgeSBheGlzIGNvb3JkaW5hdGVcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZChcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyXHJcbiAgICApOiBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIudW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNZXNzYWdlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uTWVzc2FnZShldmVudDogTWVzc2FnZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBVaW50OEFycmF5KGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01lc3NhZ2UgaW5jb21pbmc6JyArIG1lc3NhZ2UsIDYpO1xyXG5cclxuICAgICAgICAvL3RyeSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZVR5cGUgPVxyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLmZyb21TdHJlYW1lck1lc3NhZ2VzLmdldEZyb21WYWx1ZShcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VbMF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLmZyb21TdHJlYW1lckhhbmRsZXJzLmdldChtZXNzYWdlVHlwZSkoXHJcbiAgICAgICAgICAgIGV2ZW50LmRhdGFcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vTG9nZ2VyLkVycm9yKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDdXN0b20gZGF0YSBjaGFubmVsIG1lc3NhZ2Ugd2l0aCBtZXNzYWdlIHR5cGUgdGhhdCBpcyB1bmtub3duIHRvIHRoZSBQaXhlbCBTdHJlYW1pbmcgcHJvdG9jb2wuIERvZXMgeW91ciBQaXhlbFN0cmVhbWluZ1Byb3RvY29sIG5lZWQgdXBkYXRpbmc/IFRoZSBtZXNzYWdlIHR5cGUgd2FzOiAke21lc3NhZ2VbMF19YCk7XHJcbiAgICAgICAgLy99XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBtZXNzYWdlIGFsbCBoYW5kbGVyc1xyXG4gICAgICovXHJcbiAgICByZWdpc3Rlck1lc3NhZ2VIYW5kbGVycygpIHtcclxuICAgICAgICAvLyBGcm9tIFN0cmVhbWVyXHJcbiAgICAgICAgLy8gTWVzc2FnZSBldmVudHMgZnJvbSB0aGUgc3RyZWFtZXIgaGF2ZSBhIGRhdGEgdHlwZSBvZiBBcnJheUJ1ZmZlciBhcyB3ZSBmb3JjZSB0aGlzIHR5cGUgaW4gdGhlIERhdGFjaGFubmVsQ29udHJvbGxlclxyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdRdWFsaXR5Q29udHJvbE93bmVyc2hpcCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxyXG4gICAgICAgICAgICAnUmVzcG9uc2UnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMucmVzcG9uc2VDb250cm9sbGVyLm9uUmVzcG9uc2UoZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdDb21tYW5kJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tbWFuZChkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0ZyZWV6ZUZyYW1lJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB0aGlzLm9uRnJlZXplRnJhbWVNZXNzYWdlKGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxyXG4gICAgICAgICAgICAnVW5mcmVlemVGcmFtZScsXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMuaW52YWxpZGF0ZUZyZWV6ZUZyYW1lQW5kRW5hYmxlVmlkZW8oKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1ZpZGVvRW5jb2RlckF2Z1FQJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB0aGlzLmhhbmRsZVZpZGVvRW5jb2RlckF2Z1FQKGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxyXG4gICAgICAgICAgICAnTGF0ZW5jeVRlc3QnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMuaGFuZGxlTGF0ZW5jeVRlc3RSZXN1bHQoZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdJbml0aWFsU2V0dGluZ3MnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMuaGFuZGxlSW5pdGlhbFNldHRpbmdzKGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxyXG4gICAgICAgICAgICAnRmlsZUV4dGVuc2lvbicsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vbkZpbGVFeHRlbnNpb24oZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdGaWxlTWltZVR5cGUnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMub25GaWxlTWltZVR5cGUoZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdGaWxlQ29udGVudHMnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMub25GaWxlQ29udGVudHMoZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdUZXN0RWNobycsXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8qIERvIG5vdGhpbmcgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0lucHV0Q29udHJvbE93bmVyc2hpcCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vbklucHV0Q29udHJvbE93bmVyc2hpcChkYXRhKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0dhbWVwYWRSZXNwb25zZScsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vbkdhbWVwYWRSZXNwb25zZShkYXRhKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1Byb3RvY29sJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB0aGlzLm9uUHJvdG9jb2xNZXNzYWdlKGRhdGEpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gVG8gU3RyZWFtZXJcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0lGcmFtZVJlcXVlc3QnLFxyXG4gICAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdJRnJhbWVSZXF1ZXN0J1xyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnLFxyXG4gICAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0Zwc1JlcXVlc3QnLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0Zwc1JlcXVlc3QnKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdBdmVyYWdlQml0cmF0ZVJlcXVlc3QnLFxyXG4gICAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdBdmVyYWdlQml0cmF0ZVJlcXVlc3QnXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1N0YXJ0U3RyZWFtaW5nJyxcclxuICAgICAgICAgICAgKCkgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnU3RhcnRTdHJlYW1pbmcnXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1N0b3BTdHJlYW1pbmcnLFxyXG4gICAgICAgICAgICAoKSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdTdG9wU3RyZWFtaW5nJ1xyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdMYXRlbmN5VGVzdCcsXHJcbiAgICAgICAgICAgICgpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0xhdGVuY3lUZXN0JylcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnUmVxdWVzdEluaXRpYWxTZXR0aW5ncycsXHJcbiAgICAgICAgICAgICgpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1Rlc3RFY2hvJyxcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLyogRG8gbm90aGluZyAqL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1VJSW50ZXJhY3Rpb24nLFxyXG4gICAgICAgICAgICAoZGF0YTogb2JqZWN0KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdFVJSW50ZXJhY3Rpb24oZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnQ29tbWFuZCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBvYmplY3QpID0+IHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0tleURvd24nLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnS2V5RG93bicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdLZXlVcCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdLZXlVcCcsIGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0tleVByZXNzJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ0tleVByZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ01vdXNlRW50ZXInLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnTW91c2VFbnRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdNb3VzZUxlYXZlJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlTGVhdmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnTW91c2VEb3duJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlRG93bicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdNb3VzZVVwJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlVXAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnTW91c2VNb3ZlJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlTW92ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdNb3VzZVdoZWVsJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlV2hlZWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnTW91c2VEb3VibGUnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnTW91c2VEb3VibGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnVG91Y2hTdGFydCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdUb3VjaFN0YXJ0JyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1RvdWNoRW5kJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ1RvdWNoRW5kJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1RvdWNoTW92ZScsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdUb3VjaE1vdmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnR2FtZXBhZENvbm5lY3RlZCcsXHJcbiAgICAgICAgICAgICgpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ0dhbWVwYWRDb25uZWN0ZWQnXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0dhbWVwYWRCdXR0b25QcmVzc2VkJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ0dhbWVwYWRCdXR0b25QcmVzc2VkJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0dhbWVwYWRCdXR0b25SZWxlYXNlZCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdHYW1lcGFkQnV0dG9uUmVsZWFzZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnR2FtZXBhZEFuYWxvZycsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdHYW1lcGFkQW5hbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ0dhbWVwYWREaXNjb25uZWN0ZWQnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnR2FtZXBhZERpc2Nvbm5lY3RlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdYUkhNRFRyYW5zZm9ybScsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdYUkhNRFRyYW5zZm9ybScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdYUkNvbnRyb2xsZXJUcmFuc2Zvcm0nLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnWFJDb250cm9sbGVyVHJhbnNmb3JtJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1hSU3lzdGVtJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ1hSU3lzdGVtJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcclxuICAgICAgICAgICAgJ1hSQnV0dG9uVG91Y2hlZCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICdYUkJ1dHRvblRvdWNoZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnWFJCdXR0b25QcmVzc2VkJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUHJlc3NlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXHJcbiAgICAgICAgICAgICdYUkJ1dHRvblJlbGVhc2VkJyxcclxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUmVsZWFzZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxyXG4gICAgICAgICAgICAnWFJBbmFsb2cnLFxyXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcclxuICAgICAgICAgICAgICAgICAgICAnWFJBbmFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGUgdGhlIGxvZ2ljIGFzc29jaWF0ZWQgd2l0aCBhIGNvbW1hbmQgZnJvbSBVRVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgb25Db21tYW5kKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkNvbW1hbmQnLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBjb21tYW5kQXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShcclxuICAgICAgICAgICAgbWVzc2FnZS5zbGljZSgxKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdEYXRhIENoYW5uZWwgQ29tbWFuZDogJyArIGNvbW1hbmRBc1N0cmluZyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgY29tbWFuZDogTWVzc2FnZU9uU2NyZWVuS2V5Ym9hcmQgPSBKU09OLnBhcnNlKGNvbW1hbmRBc1N0cmluZyk7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQuY29tbWFuZCA9PT0gJ29uU2NyZWVuS2V5Ym9hcmQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZChjb21tYW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIGEgcHJvdG9jb2wgbWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoZSBzdHJlYW1lclxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgdGhlIG1lc3NhZ2UgZGF0YSBmcm9tIHRoZSBzdHJlYW1lclxyXG4gICAgICovXHJcbiAgICBvblByb3RvY29sTWVzc2FnZShtZXNzYWdlOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3RvY29sU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUoXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnNsaWNlKDEpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3RvY29sSlNPTiA9IEpTT04ucGFyc2UocHJvdG9jb2xTdHJpbmcpO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvY29sSlNPTiwgJ0RpcmVjdGlvbicpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ01hbGZvcm1lZCBwcm90b2NvbCByZWNlaXZlZC4gRW5zdXJlIHRoZSBwcm90b2NvbCBtZXNzYWdlIGNvbnRhaW5zIGEgZGlyZWN0aW9uJ1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBwcm90b2NvbEpTT04uRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICBkZWxldGUgcHJvdG9jb2xKU09OLkRpcmVjdGlvbjtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICBgUmVjZWl2ZWQgbmV3ICR7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID09IE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ0Zyb21TdHJlYW1lcidcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAnVG9TdHJlYW1lcidcclxuICAgICAgICAgICAgICAgIH0gcHJvdG9jb2wuIFVwZGF0aW5nIGV4aXN0aW5nIHByb3RvY29sLi4uYFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm90b2NvbEpTT04pLmZvckVhY2goKG1lc3NhZ2VUeXBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gcHJvdG9jb2xKU09OW21lc3NhZ2VUeXBlXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIG1lc3NhZ2UgY29udGFpbnMgYWxsIHRoZSByZWxldmFudCBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYnl0ZUxlbmd0aCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVG9TdHJlYW1lci0+JHttZXNzYWdlVHlwZX0gcHJvdG9jb2wgZGVmaW5pdGlvbiB3YXMgbWFsZm9ybWVkIGFzIGl0IGRpZG4ndCBjb250YWluIGF0IGxlYXN0IGFuIGlkIGFuZCBhIGJ5dGVMZW5ndGhcXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluaXRpb24gd2FzOiAke0pTT04uc3RyaW5naWZ5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYnl0ZUxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RydWN0dXJlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHNwZWNpZnkgYSBieXRlbGVuZ3RoLCB3aWxsIG11c3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgc3RydWN0dXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVG9TdHJlYW1lci0+JHttZXNzYWdlVHlwZX0gcHJvdG9jb2wgZGVmaW5pdGlvbiB3YXMgbWFsZm9ybWVkIGFzIGl0IHNwZWNpZmllZCBhIGJ5dGVMZW5ndGggYnV0IG5vIGFjY29tcGFueWluZyBzdHJ1Y3R1cmVgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGluIGEgZm9yRWFjaCBpcyBlcXVpdmFsZW50IHRvIGEgY29udGludWUgaW4gYSBub3JtYWwgZm9yIGxvb3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUeXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgcmVnaXN0ZXJlZCBhIGhhbmRsZXIgZm9yIHRoaXMgbWVzc2FnZSB0eXBlIHdlIGNhbiBhZGQgaXQgdG8gb3VyIHN1cHBvcnRlZCBtZXNzYWdlcy4gaWUgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlciguLi4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBUaGVyZSB3YXMgbm8gcmVnaXN0ZXJlZCBoYW5kbGVyIGZvciBcIiR7bWVzc2FnZVR5cGV9XCIgLSB0cnkgYWRkaW5nIG9uZSB1c2luZyByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgXCIke21lc3NhZ2VUeXBlfVwiLCBteUhhbmRsZXIpYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBtZXNzYWdlIGNvbnRhaW5zIGFsbCB0aGUgcmVsZXZhbnQgcGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgJ2lkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgRnJvbVN0cmVhbWVyLT4ke21lc3NhZ2VUeXBlfSBwcm90b2NvbCBkZWZpbml0aW9uIHdhcyBtYWxmb3JtZWQgYXMgaXQgZGlkbid0IGNvbnRhaW4gYXQgbGVhc3QgYW4gaWRcXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmluaXRpb24gd2FzOiAke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UsIG51bGwsIDIpfWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVySGFuZGxlcnMuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUeXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgcmVnaXN0ZXJlZCBhIGhhbmRsZXIgZm9yIHRoaXMgbWVzc2FnZSB0eXBlLiBpZSByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKC4uLilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhlcmUgd2FzIG5vIHJlZ2lzdGVyZWQgaGFuZGxlciBmb3IgXCIke21lc3NhZ2V9XCIgLSB0cnkgYWRkaW5nIG9uZSB1c2luZyByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCBcIiR7bWVzc2FnZVR5cGV9XCIsIG15SGFuZGxlcilgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVW5rbm93biBkaXJlY3Rpb246ICR7ZGlyZWN0aW9ufWBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBPbmNlIHRoZSBwcm90b2NvbCBoYXMgYmVlbiByZWNlaXZlZCwgd2UgY2FuIHNlbmQgb3VyIGNvbnRyb2wgbWVzc2FnZXNcclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyLlNlbmRSZXF1ZXN0SW5pdGlhbFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci5TZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgYW4gaW5wdXQgY29udHJvbCBtZXNzYWdlIHdoZW4gaXQgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgc3RyZWFtZXJcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBpbnB1dCBjb250cm9sIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgb25JbnB1dENvbnRyb2xPd25lcnNoaXAobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkobWVzc2FnZSk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLklucHV0Q29udHJvbE93bmVyc2hpcCcsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGlucHV0Q29udHJvbE93bmVyc2hpcCA9IG5ldyBCb29sZWFuKHZpZXdbMV0pLnZhbHVlT2YoKTtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBgUmVjZWl2ZWQgaW5wdXQgY29udHJvbGxlciBtZXNzYWdlIC0gd2lsbCB5b3VyIGlucHV0IGNvbnRyb2wgdGhlIHN0cmVhbTogJHtpbnB1dENvbnRyb2xPd25lcnNoaXB9YFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25JbnB1dENvbnRyb2xPd25lcnNoaXAoaW5wdXRDb250cm9sT3duZXJzaGlwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgXHJcbiAgICAgKi9cclxuICAgIG9uR2FtZXBhZFJlc3BvbnNlKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZUpTT04gPSBKU09OLnBhcnNlKHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyLm9uR2FtZXBhZFJlc3BvbnNlUmVjZWl2ZWQocmVzcG9uc2VKU09OLmNvbnRyb2xsZXJJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25BZmtUcmlnZ2VyZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLm9uQWZrQ2xpY2soKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhlIHN0cmVhbSBpcyBwYXVzZWQgcGxheSBpdCwgaWYgd2UgY2FuXHJcbiAgICAgICAgaWYgKHRoaXMudmlkZW9QbGF5ZXIuaXNQYXVzZWQoKSAmJiB0aGlzLnZpZGVvUGxheWVyLmhhc1ZpZGVvU291cmNlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5U3RyZWFtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHdoZXRoZXIgd2Ugc2hvdWxkIHRpbWVvdXQgd2hlbiBhZmsuXHJcbiAgICAgKiBAcGFyYW0gYWZrRW5hYmxlZCBJZiB0cnVlIHdlIHRpbWVvdXQgd2hlbiBpZGxlIGZvciBzb21lIGdpdmVuIGFtb3VudCBvZiB0aW1lLlxyXG4gICAgICovXHJcbiAgICBzZXRBZmtFbmFibGVkKGFma0VuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoYWZrRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uQWZrVHJpZ2dlcmVkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLnN0b3BBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXN0YXJ0IHRoZSBzdHJlYW0gYXV0b21hdGljYWxseSB3aXRob3V0IHJlZnJlc2hpbmcgdGhlIHBhZ2VcclxuICAgICAqL1xyXG4gICAgcmVzdGFydFN0cmVhbUF1dG9tYXRpY2FsbHkoKSB7XHJcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gd2ViU29ja2V0Q29udHJvbGxlciByZXR1cm4gaW1tZWRpYXRlbHkgb3IgdGhpcyB3aWxsIG5vdCB3b3JrXHJcbiAgICAgICAgaWYgKCF0aGlzLndlYlNvY2tldENvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAnVGhlIFdlYiBTb2NrZXQgQ29udHJvbGxlciBkb2VzIG5vdCBleGlzdCBzbyB0aGlzIHdpbGwgbm90IHdvcmsgcmlnaHQgbm93LidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgYSB3ZWJzb2NrZXQgb2JqZWN0IGhhcyBub3QgYmVlbiBjcmVhdGVkIGNvbm5lY3Qgbm9ybWFsbHkgd2l0aG91dCBjbG9zaW5nXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLndlYlNvY2tldCB8fFxyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TRURcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAnQSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXMgbm90IGJlZW4gbWFkZSB5ZXQgc28gd2Ugd2lsbCBzdGFydCB0aGUgc3RyZWFtJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0F1dG9Db25uZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgcmVwbGF5IHN0YXR1cyBzbyB3ZSBnZXQgYSB0ZXh0IG92ZXJsYXkgb3ZlciBhbiBhY3Rpb24gb3ZlcmxheVxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBkaXNjb25uZWN0IG1lc3NhZ2VcclxuICAgICAgICAgICAgdGhpcy5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCdSZXN0YXJ0aW5nIHN0cmVhbS4uLicpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2xvc2UgdGhlIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG5cclxuICAgICAgICAgICAgLy8gd2FpdCBmb3IgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgYW5kIHJlc3RhcnQgdGhlIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgY29uc3QgYXV0b0Nvbm5lY3RUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0F1dG9Db25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKTtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChhdXRvQ29ubmVjdFRpbWVvdXQpO1xyXG4gICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkcyBhIGZyZWV6ZSBmcmFtZSBpZiBpdCBpcyByZXF1aXJlZCBvdGhlcndpc2Ugc2hvd3MgdGhlIHBsYXkgb3ZlcmxheVxyXG4gICAgICovXHJcbiAgICBsb2FkRnJlZXplRnJhbWVPclNob3dQbGF5T3ZlcmxheSgpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgIG5ldyBMb2FkRnJlZXplRnJhbWVFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93UGxheU92ZXJsYXk6IHRoaXMuc2hvdWxkU2hvd1BsYXlPdmVybGF5LFxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZDogdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIudmFsaWQsXHJcbiAgICAgICAgICAgICAgICBqcGVnRGF0YTogdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuanBlZ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkU2hvd1BsYXlPdmVybGF5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3Nob3dpbmcgcGxheSBvdmVybGF5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdzaG93aW5nIGZyZWV6ZSBmcmFtZScpO1xyXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5zaG93RnJlZXplRnJhbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9QbGF5ZXIuc2V0VmlkZW9FbmFibGVkKGZhbHNlKTtcclxuICAgICAgICB9LCB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5mcmVlemVGcmFtZURlbGF5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgbG9hZCBpdFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGZyZWV6ZSBmcmFtZSBkYXRhIGluIGJ5dGVzXHJcbiAgICAgKi9cclxuICAgIG9uRnJlZXplRnJhbWVNZXNzYWdlKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkZyZWV6ZUZyYW1lJyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnByb2Nlc3NGcmVlemVGcmFtZU1lc3NhZ2UodmlldywgKCkgPT5cclxuICAgICAgICAgICAgdGhpcy5sb2FkRnJlZXplRnJhbWVPclNob3dQbGF5T3ZlcmxheSgpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSB0aGUgdmlkZW8gYWZ0ZXIgaGlkaW5nIGEgZnJlZXplIGZyYW1lXHJcbiAgICAgKi9cclxuICAgIGludmFsaWRhdGVGcmVlemVGcmFtZUFuZEVuYWJsZVZpZGVvKCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5GcmVlemVGcmFtZScsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICBuZXcgSGlkZUZyZWV6ZUZyYW1lRXZlbnQoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5oaWRlRnJlZXplRnJhbWUoKTtcclxuICAgICAgICB9LCB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5mcmVlemVGcmFtZURlbGF5KTtcclxuICAgICAgICBpZiAodGhpcy52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwIGRhdGFjaGFubmVsIGRhdGEgZm9yIHByb2Nlc3NpbmcgZmlsZSBleHRlbnNpb25cclxuICAgICAqIEBwYXJhbSBkYXRhIHRoZSBmaWxlIGV4dGVuc2lvbiBkYXRhXHJcbiAgICAgKi9cclxuICAgIG9uRmlsZUV4dGVuc2lvbihkYXRhOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICBGaWxlVXRpbC5zZXRFeHRlbnNpb25Gcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByZXAgZGF0YWNoYW5uZWwgZGF0YSBmb3IgcHJvY2Vzc2luZyB0aGUgZmlsZSBtaW1lIHR5cGVcclxuICAgICAqIEBwYXJhbSBkYXRhIHRoZSBmaWxlIG1pbWUgdHlwZSBkYXRhXHJcbiAgICAgKi9cclxuICAgIG9uRmlsZU1pbWVUeXBlKGRhdGE6IEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xyXG4gICAgICAgIEZpbGVVdGlsLnNldE1pbWVUeXBlRnJvbUJ5dGVzKHZpZXcsIHRoaXMuZmlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwIGRhdGFjaGFubmVsIGRhdGEgZm9yIHByb2Nlc3NpbmcgdGhlIGZpbGUgY29udGVudHNcclxuICAgICAqIEBwYXJhbSBkYXRhIHRoZSBmaWxlIGNvbnRlbnRzIGRhdGFcclxuICAgICAqL1xyXG4gICAgb25GaWxlQ29udGVudHMoZGF0YTogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XHJcbiAgICAgICAgRmlsZVV0aWwuc2V0Q29udGVudHNGcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBsYXlzIHRoZSBzdHJlYW0gYXVkaW8gYW5kIHZpZGVvIHNvdXJjZSBhbmQgc2V0cyB1cCBvdGhlciBwaWVjZXMgd2hpbGUgdGhlIHN0cmVhbSBzdGFydHNcclxuICAgICAqL1xyXG4gICAgcGxheVN0cmVhbSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9QbGF5ZXIuZ2V0VmlkZW9FbGVtZW50KCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9XHJcbiAgICAgICAgICAgICAgICAnQ291bGQgbm90IHBsYXkgdmlkZW8gc3RyZWFtIGJlY2F1c2UgdGhlIHZpZGVvIHBsYXllciB3YXMgbm90IGluaXRpYWxpemVkIGNvcnJlY3RseS4nO1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICBuZXcgUGxheVN0cmVhbUVycm9yRXZlbnQoeyBtZXNzYWdlIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBtZXNzYWdlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgZGlzY29ubmVjdCBtZXNzYWdlXHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZShcclxuICAgICAgICAgICAgICAgICdTdHJlYW0gbm90IGluaXRpYWxpemVkIGNvcnJlY3RseSdcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNsb3NlIHRoZSBjb25uZWN0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvUGxheWVyLmhhc1ZpZGVvU291cmNlKCkpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLldhcm5pbmcoXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCBwbGF5IHN0cmVhbSwgdGhlIHZpZGVvIGVsZW1lbnQgaGFzIG5vIHNyY09iamVjdCB0byBwbGF5LidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRUb3VjaElucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLlRvdWNoSW5wdXQpKTtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IFBsYXlTdHJlYW1FdmVudCgpKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQuc3JjT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQubXV0ZWQgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5TdGFydFZpZGVvTXV0ZWQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgLnBsYXkoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheVZpZGVvKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChvblJlamVjdGVkUmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBvblJlamVjdGVkUmVhc29uKTtcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGF1dG9wbGF5aW5nIHZpZGVvIHdpdGhvdXQgaW50ZXJhY3Rpb24gLSB0byByZXNvbHZlIHRoaXMgd2UgYXJlIGdvaW5nIHRvIHNob3cgdGhlIHBsYXkgYnV0dG9uIG92ZXJsYXkuJ1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGxheVN0cmVhbVJlamVjdGVkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBvblJlamVjdGVkUmVhc29uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNob3VsZFNob3dQbGF5T3ZlcmxheSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnNob3dGcmVlemVGcmFtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGxheXMgdGhlIHZpZGVvIHN0cmVhbVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHBsYXlWaWRlbygpIHtcclxuICAgICAgICAvLyBoYW5kbGUgcGxheSgpIHdpdGggcHJvbWlzZSBhcyBpdCBpcyBhbiBhc3luY2hyb25vdXMgY2FsbFxyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIucGxheSgpLmNhdGNoKChvblJlamVjdGVkUmVhc29uOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQuc3JjT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuYXVkaW9FbGVtZW50LnBhdXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBvblJlamVjdGVkUmVhc29uKTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAnQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGF1dG9wbGF5aW5nIHZpZGVvIHdpdGhvdXQgaW50ZXJhY3Rpb24gLSB0byByZXNvbHZlIHRoaXMgd2UgYXJlIGdvaW5nIHRvIHNob3cgdGhlIHBsYXkgYnV0dG9uIG92ZXJsYXkuJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICBuZXcgUGxheVN0cmVhbVJlamVjdGVkRXZlbnQoeyByZWFzb246IG9uUmVqZWN0ZWRSZWFzb24gfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSB0aGUgdmlkZW8gdG8gcGxheSBhdXRvbWF0aWNhbGx5IGlmIGVuYWJsZUF1dG9wbGF5IGlzIHRydWVcclxuICAgICAqL1xyXG4gICAgYXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5BdXRvUGxheVZpZGVvKSkge1xyXG4gICAgICAgICAgICAvLyBhdHRlbXB0IHRvIHBsYXkgdGhlIHZpZGVvXHJcbiAgICAgICAgICAgIHRoaXMucGxheVN0cmVhbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBTaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc2lnbmFsbGluZ1VybCA9IHRoaXMuc2lnbmFsbGluZ1VybEJ1aWxkZXIoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY29ubmVjdChzaWduYWxsaW5nVXJsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgd2lsbCBzdGFydCB0aGUgaGFuZHNoYWtlIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIHBlZXJDb25maWcgIC0gUlRDIENvbmZpZ3VyYXRpb24gT3B0aW9ucyBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcmVtYXJrIFJUQyBQZWVyIENvbm5lY3Rpb24gb24gSWNlIENhbmRpZGF0ZSBldmVudCBoYXZlIGl0IGhhbmRsZWQgYnkgaGFuZGxlIFNlbmQgSWNlIENhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBzdGFydFNlc3Npb24ocGVlckNvbmZpZzogUlRDQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIHRoaXMucGVlckNvbmZpZyA9IHBlZXJDb25maWc7XHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIGZvcmNpbmcgdHVyblxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkZvcmNlVFVSTikpIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGEgdHVybiBzZXJ2ZXJcclxuICAgICAgICAgICAgY29uc3QgaGFzVHVyblNlcnZlciA9IHRoaXMuY2hlY2tUdXJuU2VydmVyQXZhaWxhYmlsaXR5KHBlZXJDb25maWcpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2xvc2UgYW5kIGVycm9yIGlmIHR1cm4gaXMgZm9yY2VkIGFuZCB0aGVyZSBpcyBubyB0dXJuIHNlcnZlclxyXG4gICAgICAgICAgICBpZiAoIWhhc1R1cm5TZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5JbmZvKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ05vIHR1cm4gc2VydmVyIHdhcyBmb3VuZCBpbiB0aGUgUGVlciBDb25uZWN0aW9uIE9wdGlvbnMuIFRVUk4gY2Fubm90IGJlIGZvcmNlZCwgY2xvc2luZyBjb25uZWN0aW9uLiBQbGVhc2UgdXNlIFNUVU4gaW5zdGVhZCdcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoXHJcbiAgICAgICAgICAgICAgICAgICAgJ1RVUk4gY2Fubm90IGJlIGZvcmNlZCwgY2xvc2luZyBjb25uZWN0aW9uLiBQbGVhc2UgdXNlIFNUVU4gaW5zdGVhZC4nXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXQgdXAgdGhlIHBlZXIgY29ubmVjdGlvbiBjb250cm9sbGVyXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIgPSBuZXcgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyKFxyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25maWcsXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgICB0aGlzLnByZWZlcnJlZENvZGVjXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHVwIHBlZXIgY29ubmVjdGlvbiBjb250cm9sbGVyIHZpZGVvIHN0YXRzXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25WaWRlb1N0YXRzID0gKGV2ZW50OiBBZ2dyZWdhdGVkU3RhdHMpID0+XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVmlkZW9TdGF0cyhldmVudCk7XHJcblxyXG4gICAgICAgIC8qIFdoZW4gdGhlIFBlZXIgQ29ubmVjdGlvbiB3YW50cyB0byBzZW5kIGFuIG9mZmVyIGhhdmUgaXQgaGFuZGxlZCAqL1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uU2VuZFdlYlJUQ09mZmVyID0gKFxyXG4gICAgICAgICAgICBvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdFxyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVTZW5kV2ViUlRDT2ZmZXIob2ZmZXIpO1xyXG5cclxuICAgICAgICAvKiBXaGVuIHRoZSBQZWVyIENvbm5lY3Rpb24gd2FudHMgdG8gc2VuZCBhbiBhbnN3ZXIgaGF2ZSBpdCBoYW5kbGVkICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25TZW5kV2ViUlRDQW5zd2VyID0gKFxyXG4gICAgICAgICAgICBvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdFxyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVTZW5kV2ViUlRDQW5zd2VyKG9mZmVyKTtcclxuXHJcbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIGljZSBjYW5kaWRhdGUgaXMgYWRkZWQgaGF2ZSBpdCBoYW5kbGVkICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25QZWVySWNlQ2FuZGlkYXRlID0gKFxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbkljZUV2ZW50OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50XHJcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZVNlbmRJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudCk7XHJcblxyXG4gICAgICAgIC8qIFdoZW4gdGhlIFBlZXIgQ29ubmVjdGlvbiBoYXMgYSBkYXRhIGNoYW5uZWwgY3JlYXRlZCBmb3IgaXQgYnkgdGhlIGJyb3dzZXIsIGhhbmRsZSBpdCAqL1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uRGF0YUNoYW5uZWwgPSAoXHJcbiAgICAgICAgICAgIGRhdGFjaGFubmVsRXZlbnQ6IFJUQ0RhdGFDaGFubmVsRXZlbnRcclxuICAgICAgICApID0+IHRoaXMuaGFuZGxlRGF0YUNoYW5uZWwoZGF0YWNoYW5uZWxFdmVudCk7XHJcblxyXG4gICAgICAgIC8vIHNldCB1cCB3ZWJSdGMgdGV4dCBvdmVybGF5c1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcgPSAoKSA9PlxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0Nvbm5lY3RpbmcoKTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5zaG93VGV4dE92ZXJsYXlTZXR1cEZhaWx1cmUgPSAoKSA9PlxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0ZhaWxlZCgpO1xyXG4gICAgICAgIGxldCB3ZWJSdGNDb25uZWN0ZWRTZW50ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEJyb3dzZXJzIGVtaXQgXCJjb25uZWN0ZWRcIiB3aGVuIGdldHRpbmcgZmlyc3QgY29ubmVjdGlvbiBhbmQgXCJjb21wbGV0ZWRcIiB3aGVuIGZpbmlzaGluZ1xyXG4gICAgICAgICAgICAvLyBjYW5kaWRhdGUgY2hlY2tpbmcuIEhvd2V2ZXIsIHNvbWV0aW1lcyBicm93c2VycyBjYW4gc2tpcCBcImNvbm5lY3RlZFwiIGFuZCBvbmx5IGVtaXQgXCJjb21wbGV0ZWRcIi5cclxuICAgICAgICAgICAgLy8gVGhlcmVmb3JlIG5lZWQgdG8gY2hlY2sgYm90aCBjYXNlcyBhbmQgZW1pdCBvbldlYlJ0Y0Nvbm5lY3RlZCBvbmx5IG9uY2Ugb24gdGhlIGZpcnN0IGhpdC5cclxuICAgICAgICAgICAgaWYgKCF3ZWJSdGNDb25uZWN0ZWRTZW50ICYmIFxyXG4gICAgICAgICAgICAgICAgW1wiY29ubmVjdGVkXCIsIFwiY29tcGxldGVkXCJdLmluY2x1ZGVzKHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLmljZUNvbm5lY3Rpb25TdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjQ29ubmVjdGVkKCk7XHJcbiAgICAgICAgICAgICAgICB3ZWJSdGNDb25uZWN0ZWRTZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qIFJUQyBQZWVyIENvbm5lY3Rpb24gb24gVHJhY2sgZXZlbnQgLT4gaGFuZGxlIG9uIHRyYWNrICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25UcmFjayA9ICh0cmFja0V2ZW50OiBSVENUcmFja0V2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuaGFuZGxlT25UcmFjayh0cmFja0V2ZW50KTtcclxuXHJcbiAgICAgICAgLyogU3RhcnQgdGhlIEhhbmQgc2hha2UgcHJvY2VzcyBieSBjcmVhdGluZyBhbiBPZmZlciAqL1xyXG4gICAgICAgIGNvbnN0IEJyb3dzZXJTZW5kc09mZmVyID0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChcclxuICAgICAgICAgICAgRmxhZ3MuQnJvd3NlclNlbmRPZmZlclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKEJyb3dzZXJTZW5kc09mZmVyKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGJyb3dzZXIgaXMgc2VuZGluZyB0aGUgb2ZmZXIsIGNyZWF0ZSBhbiBvZmZlciBhbmQgc2VuZCBpdCB0byB0aGUgc3RyZWFtZXJcclxuICAgICAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5jcmVhdGVEYXRhQ2hhbm5lbChcclxuICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgJ2NpcnJ1cycsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFjaGFubmVsT3B0aW9uc1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChcclxuICAgICAgICAgICAgICAgIGV2OiBNZXNzYWdlRXZlbnQ8QXJyYXlCdWZmZXI+XHJcbiAgICAgICAgICAgICkgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5jcmVhdGVPZmZlcihcclxuICAgICAgICAgICAgICAgIHRoaXMuc2RwQ29uc3RyYWludHMsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB0aGUgcGVlciBjb25uZWN0aW9uIG9wdGlvbnMgZm9yIGEgdHVybiBzZXJ2ZXIgYW5kIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxyXG4gICAgICovXHJcbiAgICBjaGVja1R1cm5TZXJ2ZXJBdmFpbGFiaWxpdHkob3B0aW9uczogUlRDQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIC8vIGlmIGljZVNlcnZlcnMgaXMgZW1wdHkgcmV0dXJuIGZhbHNlIHRoaXMgc2hvdWxkIG5vdCBiZSB0aGUgZ2VuZXJhbCB1c2UgY2FzZSBidXQgaXMgaGVyZSBpbmNhc2VcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaWNlU2VydmVycykge1xyXG4gICAgICAgICAgICBMb2dnZXIuSW5mbyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQSB0dXJuIHNldmVyIHdhcyBub3QgZm91bmQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBpY2Ugc2VydmVycyB0byBjaGVjayBmb3IgYSB0dXJuIHVybFxyXG4gICAgICAgIGZvciAoY29uc3QgaWNlU2VydmVyIG9mIG9wdGlvbnMuaWNlU2VydmVycykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHVybCBvZiBpY2VTZXJ2ZXIudXJscykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVybC5pbmNsdWRlcygndHVybicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYEEgdHVybiBzZXZlciB3YXMgZm91bmQgYXQgJHt1cmx9YFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIExvZ2dlci5JbmZvKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdBIHR1cm4gc2V2ZXIgd2FzIG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIENvbmZpZyBNZXNzYWdlIGlzIHJlY2VpdmVkIGNvbnRhaW5zIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucyByZXF1aXJlZCAoU1RVTiBhbmQgVFVSTiBTZXJ2ZXIgSW5mbylcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlQ29uZmlnIC0gQ29uZmlnIE1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZzogTWVzc2FnZUNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuXHJcbiAgICAgICAgLy8gVGVsbCB0aGUgV2ViUnRjQ29udHJvbGxlciB0byBzdGFydCBhIHNlc3Npb24gd2l0aCB0aGUgcGVlciBvcHRpb25zIHNlbnQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICAgIHRoaXMuc3RhcnRTZXNzaW9uKG1lc3NhZ2VDb25maWcucGVlckNvbm5lY3Rpb25PcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiB0aGUgc2lnbmFsaW5nIHNlcnZlciBzZW5kcyBhIFdlYlJUQyBBbnN3ZXIgb3ZlciB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGF2ZSB0aGUgV2ViUnRjQ29udHJvbGxlciBoYW5kbGUgdGhlIG1lc3NhZ2VcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJSdGNBbnN3ZXIgPSAoXHJcbiAgICAgICAgICAgIG1lc3NhZ2VBbnN3ZXI6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBbnN3ZXJcclxuICAgICAgICApID0+IHRoaXMuaGFuZGxlV2ViUnRjQW5zd2VyKG1lc3NhZ2VBbnN3ZXIpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y09mZmVyID0gKFxyXG4gICAgICAgICAgICBtZXNzYWdlT2ZmZXI6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VPZmZlclxyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVXZWJSdGNPZmZlcihtZXNzYWdlT2ZmZXIpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMgPSAoXHJcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhQ2hhbm5lbHM6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VQZWVyRGF0YUNoYW5uZWxzXHJcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZVdlYlJ0Y1NGVVBlZXJEYXRhY2hhbm5lbHMobWVzc2FnZURhdGFDaGFubmVscyk7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgc2VuZHMgYSBJY2VDYW5kaWRhdGUgb3ZlciB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGF2ZSB0aGUgV2ViUnRjQ29udHJvbGxlciBoYW5kbGUgdGhlIG1lc3NhZ2VcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25JY2VDYW5kaWRhdGUgPSAoXHJcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdFxyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVJY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgZ2l2ZXMgdXMgdGhlIGxpc3Qgb2Ygc3RyZWFtZXIgaWRzLlxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTdHJlYW1lckxpc3RNZXNzYWdlKG1lc3NhZ2VTdHJlYW1lckxpc3Q6IE1lc3NhZ2VTdHJlYW1lckxpc3QpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICBgR290IHN0cmVhbWVyIGxpc3QgJHttZXNzYWdlU3RyZWFtZXJMaXN0Lmlkc31gLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5pc1JlY29ubmVjdGluZykge1xyXG4gICAgICAgICAgICBpZihtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkcy5pbmNsdWRlcyh0aGlzLnN1YnNjcmliZWRTdHJlYW0pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSByZWNvbm5lY3RpbmcgYW5kIHRoZSBwcmV2aW91c2x5IHN1YnNjcmliZWQgc3RyZWFtIGhhcyBjb21lIGJhY2ssIHJlc3Vic2NyaWJlIHRvIGl0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVjb25uZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRTdWJzY3JpYmUodGhpcy5zdWJzY3JpYmVkU3RyZWFtKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMucmVjb25uZWN0QXR0ZW1wdCA8IHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBPdXIgcHJldmlvdXMgc3RyZWFtIGhhc24ndCBjb21lIGJhY2ssIHdhaXQgMiBzZWNvbmRzIGFuZCByZXF1ZXN0IGFuIHVwZGF0ZWQgc3RyZWFtIGxpc3RcclxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCsrO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnJlcXVlc3RTdHJlYW1lckxpc3QoKTtcclxuICAgICAgICAgICAgICAgIH0sIDIwMDApXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSd2ZSBleGhhdXN0ZWQgb3VyIHJlY29ubmVjdCBhdHRlbXB0cywgcmV0dXJuIHRvIG1haW4gc2NyZWVuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRSZWNvbm5lY3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiXCJcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nT3B0aW9ucyhcclxuICAgICAgICAgICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsXHJcbiAgICAgICAgICAgICAgICAgICAgW11cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzZXR0aW5nT3B0aW9ucyA9IFsuLi5tZXNzYWdlU3RyZWFtZXJMaXN0Lmlkc107IC8vIGNvcHkgdGhlIG9yaWdpbmFsIG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzXHJcbiAgICAgICAgICAgIHNldHRpbmdPcHRpb25zLnVuc2hpZnQoJycpOyAvLyBhZGQgYW4gZW1wdHkgb3B0aW9uIGF0IHRoZSB0b3BcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoXHJcbiAgICAgICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nT3B0aW9uc1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgbGV0IGF1dG9TZWxlY3RlZFN0cmVhbWVySWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAobWVzc2FnZVN0cmVhbWVyTGlzdC5pZHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgb25seSBhIHNpbmdsZSBzdHJlYW1lciwgc3Vic2NyaWJlIHRvIGl0IHJlZ2FyZGxlc3Mgb2Ygd2hhdCBpcyBpbiB0aGUgVVJMXHJcbiAgICAgICAgICAgICAgICBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkID0gbWVzc2FnZVN0cmVhbWVyTGlzdC5pZHNbMF07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLlByZWZlclNGVSkgJiZcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzLmluY2x1ZGVzKCdTRlUnKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBTRlUgdG9nZ2xlIGlzIG9uIGFuZCB0aGVyZSdzIGFuIFNGVSBjb25uZWN0ZWQsIHN1YnNjcmliZSB0byBpdCByZWdhcmRsZXNzIG9mIHdoYXQgaXMgaW4gdGhlIFVSTFxyXG4gICAgICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZCA9ICdTRlUnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLmhhcyhPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQpICYmXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkcy5pbmNsdWRlcyhcclxuICAgICAgICAgICAgICAgICAgICB1cmxQYXJhbXMuZ2V0KE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZClcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgc3RyZWFtZXIgSUQgaW4gdGhlIFVSTCBhbmQgYSBzdHJlYW1lciB3aXRoIHRoaXMgSUQgaXMgY29ubmVjdGVkLCBzZXQgaXQgYXMgdGhlIHNlbGVjdGVkIHN0cmVhbWVyXHJcbiAgICAgICAgICAgICAgICBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkID0gdXJsUGFyYW1zLmdldChPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhdXRvU2VsZWN0ZWRTdHJlYW1lcklkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9TZWxlY3RlZFN0cmVhbWVySWRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgbmV3IFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVN0cmVhbWVyTGlzdCxcclxuICAgICAgICAgICAgICAgICAgICBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgUlRDIEFuc3dlciBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0gQW5zd2VyIC0gQW5zd2VyIFNEUCBmcm9tIHRoZSBwZWVyLlxyXG4gICAgICovXHJcbiAgICBoYW5kbGVXZWJSdGNBbnN3ZXIoQW5zd2VyOiBNZXNzYWdlQW5zd2VyKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgR290IGFuc3dlciBzZHAgJHtBbnN3ZXIuc2RwfWAsIDYpO1xyXG5cclxuICAgICAgICBjb25zdCBzZHBBbnN3ZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQgPSB7XHJcbiAgICAgICAgICAgIHNkcDogQW5zd2VyLnNkcCxcclxuICAgICAgICAgICAgdHlwZTogJ2Fuc3dlcidcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5yZWNlaXZlQW5zd2VyKHNkcEFuc3dlcik7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVQb3N0V2VicnRjTmVnb3RpYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgUlRDIG9mZmVyIGZyb20gYSBXZWJSVEMgcGVlciAocmVjZWl2ZWQgdGhyb3VnaCB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIpLlxyXG4gICAgICogQHBhcmFtIE9mZmVyIC0gT2ZmZXIgU0RQIGZyb20gdGhlIHBlZXIuXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVdlYlJ0Y09mZmVyKE9mZmVyOiBNZXNzYWdlT2ZmZXIpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBHb3Qgb2ZmZXIgc2RwICR7T2ZmZXIuc2RwfWAsIDYpO1xyXG5cclxuICAgICAgICB0aGlzLmlzVXNpbmdTRlUgPSBPZmZlci5zZnUgPyBPZmZlci5zZnUgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc1VzaW5nU0ZVKSB7XHJcbiAgICAgICAgICAgIC8vIERpc2FibGUgbmVnb3RpYXRpbmcgd2l0aCB0aGUgc2Z1IGFzIHRoZSBzZnUgb25seSBzdXBwb3J0cyBvbmUgY29kZWMgYXQgYSB0aW1lXHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnByZWZlcnJlZENvZGVjID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzZHBPZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCA9IHtcclxuICAgICAgICAgICAgc2RwOiBPZmZlci5zZHAsXHJcbiAgICAgICAgICAgIHR5cGU6ICdvZmZlcidcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5yZWNlaXZlT2ZmZXIoc2RwT2ZmZXIsIHRoaXMuY29uZmlnKTtcclxuICAgICAgICB0aGlzLmhhbmRsZVBvc3RXZWJydGNOZWdvdGlhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIFNGVSBwcm92aWRlcyB0aGUgcGVlciB3aXRoIGl0cyBkYXRhIGNoYW5uZWxzXHJcbiAgICAgKiBAcGFyYW0gRGF0YUNoYW5uZWxzIC0gVGhlIG1lc3NhZ2UgZnJvbSB0aGUgU0ZVIGNvbnRhaW5pbmcgdGhlIGRhdGEgY2hhbm5lbHMgaWRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVdlYlJ0Y1NGVVBlZXJEYXRhY2hhbm5lbHMoXHJcbiAgICAgICAgRGF0YUNoYW5uZWxzOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUGVlckRhdGFDaGFubmVsc1xyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc3QgU2VuZE9wdGlvbnM6IFJUQ0RhdGFDaGFubmVsSW5pdCA9IHtcclxuICAgICAgICAgICAgb3JkZXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgaWQ6IERhdGFDaGFubmVscy5zZW5kU3RyZWFtSWRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCB1bmlkaXJlY3Rpb25hbCA9XHJcbiAgICAgICAgICAgIERhdGFDaGFubmVscy5zZW5kU3RyZWFtSWQgIT0gRGF0YUNoYW5uZWxzLnJlY3ZTdHJlYW1JZDtcclxuXHJcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5jcmVhdGVEYXRhQ2hhbm5lbChcclxuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sXHJcbiAgICAgICAgICAgIHVuaWRpcmVjdGlvbmFsID8gJ3NlbmQtZGF0YWNoYW5uZWwnIDogJ2RhdGFjaGFubmVsJyxcclxuICAgICAgICAgICAgU2VuZE9wdGlvbnNcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAodW5pZGlyZWN0aW9uYWwpIHtcclxuICAgICAgICAgICAgY29uc3QgUmVjdk9wdGlvbnM6IFJUQ0RhdGFDaGFubmVsSW5pdCA9IHtcclxuICAgICAgICAgICAgICAgIG9yZGVyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaWQ6IERhdGFDaGFubmVscy5yZWN2U3RyZWFtSWRcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5jcmVhdGVEYXRhQ2hhbm5lbChcclxuICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgJ3JlY3YtZGF0YWNoYW5uZWwnLFxyXG4gICAgICAgICAgICAgICAgUmVjdk9wdGlvbnNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uT3BlbiA9ICgpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFNGVVJlY3ZEYXRhQ2hhbm5lbFJlYWR5KCk7XHJcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIHVuaS1kaXJlY3Rpb25hbCwgb25seSB0aGUgcmVjdiBkYXRhIGNoYW5uZWwgc2hvdWxkIGhhbmRsZSBpbmNvbWluZyBtZXNzYWdlc1xyXG4gICAgICAgICAgICB0aGlzLnJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25NZXNzYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgZXY6IE1lc3NhZ2VFdmVudFxyXG4gICAgICAgICAgICApID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBlbHNlIG91ciBwcmltYXJ5IGRhdGFjaGFubmVsIGlzIHNlbmQvcmVjdiBzbyBpdCBjYW4gaGFuZGxlIGluY29taW5nIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25NZXNzYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgZXY6IE1lc3NhZ2VFdmVudFxyXG4gICAgICAgICAgICApID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlUG9zdFdlYnJ0Y05lZ290aWF0aW9uKCkge1xyXG4gICAgICAgIC8vIHN0YXJ0IHRoZSBhZmsgd2FybmluZyB0aW1lciBhcyBQUyBpcyBub3cgcnVubmluZ1xyXG4gICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5zdGFydEFma1dhcm5pbmdUaW1lcigpO1xyXG4gICAgICAgIC8vIHNob3cgdGhlIG92ZXJsYXkgdGhhdCB3ZSBoYXZlIG5lZ290aWF0ZWQgYSBjb25uZWN0aW9uXHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25XZWJSdGNTZHAoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHNUaW1lckhhbmRsZSAmJiB0aGlzLnN0YXRzVGltZXJIYW5kbGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRzVGltZXJIYW5kbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGF0c1RpbWVySGFuZGxlID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHRoaXMuZ2V0U3RhdHMoKSwgMTAwMCk7XHJcblxyXG4gICAgICAgIC8qICAqL1xyXG4gICAgICAgIHRoaXMuc2V0TW91c2VJbnB1dEVuYWJsZWQodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Nb3VzZUlucHV0KSk7XHJcbiAgICAgICAgdGhpcy5zZXRLZXlib2FyZElucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLktleWJvYXJkSW5wdXQpKTtcclxuICAgICAgICB0aGlzLnNldEdhbWVQYWRJbnB1dEVuYWJsZWQodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5HYW1lcGFkSW5wdXQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYW4gaWNlIENhbmRpZGF0ZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyIGFkZCBpdCB0byB0aGUgUGVlciBDb25uZWN0aW9uIENsaWVudFxyXG4gICAgICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIEljZSBDYW5kaWRhdGUgZnJvbSBTZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdXZWIgUlRDIENvbnRyb2xsZXI6IG9uV2ViUnRjSWNlJyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG5ldyBSVENJY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlKTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5oYW5kbGVPbkljZShjYW5kaWRhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgaWNlIENhbmRpZGF0ZSB0byB0aGUgc2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gaWNlRXZlbnQgLSBSVEMgUGVlciBDb25uZWN0aW9uSWNlRXZlbnQpIHtcclxuICAgICAqL1xyXG4gICAgaGFuZGxlU2VuZEljZUNhbmRpZGF0ZShpY2VFdmVudDogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ09uSWNlQ2FuZGlkYXRlJywgNik7XHJcbiAgICAgICAgaWYgKGljZUV2ZW50LmNhbmRpZGF0ZSAmJiBpY2VFdmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kSWNlQ2FuZGlkYXRlKGljZUV2ZW50LmNhbmRpZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgaWNlIENhbmRpZGF0ZSB0byB0aGUgc2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gaWNlRXZlbnQgLSBSVEMgUGVlciBDb25uZWN0aW9uSWNlRXZlbnQpIHtcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoZGF0YWNoYW5uZWxFdmVudDogUlRDRGF0YUNoYW5uZWxFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdEYXRhIGNoYW5uZWwgY3JlYXRlZCBmb3IgdXMgYnkgYnJvd3NlciBhcyB3ZSBhcmUgYSByZWNlaXZpbmcgcGVlci4nLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmRhdGFDaGFubmVsID1cclxuICAgICAgICAgICAgZGF0YWNoYW5uZWxFdmVudC5jaGFubmVsO1xyXG4gICAgICAgIC8vIERhdGEgY2hhbm5lbCB3YXMgY3JlYXRlZCBmb3IgdXMsIHNvIHdlIGp1c3QgbmVlZCB0byBzZXR1cCBpdHMgY2FsbGJhY2tzIGFuZCBhcnJheSB0eXBlXHJcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5zZXR1cERhdGFDaGFubmVsKCk7XHJcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5oYW5kbGVPbk1lc3NhZ2UgPSAoXHJcbiAgICAgICAgICAgIGV2OiBNZXNzYWdlRXZlbnQ8QXJyYXlCdWZmZXI+XHJcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZShldik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBSVEMgT2ZmZXIgU2Vzc2lvbiB0byB0aGUgU2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gb2ZmZXIgLSBSVEMgU2Vzc2lvbiBEZXNjcmlwdGlvblxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTZW5kV2ViUlRDT2ZmZXIob2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnU2VuZGluZyB0aGUgb2ZmZXIgdG8gdGhlIFNlcnZlcicsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kV2ViUnRjT2ZmZXIob2ZmZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgUlRDIE9mZmVyIFNlc3Npb24gdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIGFuc3dlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0aW9uXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVNlbmRXZWJSVENBbnN3ZXIoYW5zd2VyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ1NlbmRpbmcgdGhlIGFuc3dlciB0byB0aGUgU2VydmVyJyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRXZWJSdGNBbnN3ZXIoYW5zd2VyKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNVc2luZ1NGVSkge1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFdlYlJ0Y0RhdGFjaGFubmVsUmVxdWVzdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIG92ZXJsYXkgdG8gdGhlIHBsYXllciBkaXZcclxuICAgICAqL1xyXG4gICAgc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKCkge1xyXG4gICAgICAgIC8vIENhbGN1bGF0aW5nIGFuZCBub3JtYWxpemluZyBwb3NpdGlvbnMgZGVwZW5kcyBvbiB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgcGxheWVyLlxyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCA9IHRoaXMudmlkZW9QbGF5ZXJcclxuICAgICAgICAgICAgLmdldFZpZGVvUGFyZW50RWxlbWVudCgpXHJcbiAgICAgICAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIuc2V0dXBOb3JtYWxpemVBbmRRdWFudGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lLnJlc2l6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgdGhlIENvbm5lY3Rpb24gdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKSB7XHJcbiAgICAgICAgLy8gV2UgZXhwbGljaXRseSBjYWxsZWQgY2xvc2UsIHRoZXJlZm9yZSB3ZSBkb24ndCB3YW50IHRvIHRyaWdnZXIgYXV0byByZWNvbm5lY3RcclxuICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlcj8uY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb3NlIHRoZSBwZWVyIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgY2xvc2VQZWVyQ29ubmVjdGlvbigpIHtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlcj8uY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb3NlIGFsbCBjb25uZWN0aW9uc1xyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCk7XHJcbiAgICAgICAgdGhpcy5jbG9zZVBlZXJDb25uZWN0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlcyBhIFZpZGVvIFN0YXRzIEV2ZW50IGluIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGdldFN0YXRzKCkge1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmdlbmVyYXRlU3RhdHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBMYXRlbmN5IFRlc3QgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgc2VuZExhdGVuY3lUZXN0KCkge1xyXG4gICAgICAgIHRoaXMubGF0ZW5jeVN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuc2VuZExhdGVuY3lUZXN0KHtcclxuICAgICAgICAgICAgU3RhcnRUaW1lOiB0aGlzLmxhdGVuY3lTdGFydFRpbWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIE1pblFQIGVuY29kZXIgc2V0dGluZyB0byB0aGUgVUUgSW5zdGFuY2UuXHJcbiAgICAgKiBAcGFyYW0gbWluUVAgLSBUaGUgbG93ZXIgYm91bmQgZm9yIFFQIHdoZW4gZW5jb2RpbmdcclxuICAgICAqIHZhbGlkIHZhbHVlcyBhcmUgKDEtNTEpIHdoZXJlOlxyXG4gICAgICogMSA9IEJlc3QgcXVhbGl0eSBidXQgaGlnaGVzdCBiaXRyYXRlLlxyXG4gICAgICogNTEgPSBXb3JzdCBxdWFsaXR5IGJ1dCBsb3dlc3QgYml0cmF0ZS5cclxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIG1pblFQIGlzIDEgbWVhbmluZyB0aGUgZW5jb2RlciBpcyBmcmVlXHJcbiAgICAgKiB0byBhaW0gZm9yIHRoZSBiZXN0IHF1YWxpdHkgaXQgY2FuIG9uIHRoZSBnaXZlbiBuZXR3b3JrIGxpbmsuXHJcbiAgICAgKi9cclxuICAgIHNlbmRFbmNvZGVyTWluUVAobWluUVA6IG51bWJlcikge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYE1pblFQPSR7bWluUVB9XFxuYCwgNik7XHJcblxyXG4gICAgICAgIGlmIChtaW5RUCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcclxuICAgICAgICAgICAgICAgICdFbmNvZGVyLk1pblFQJzogbWluUVBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgTWF4UVAgZW5jb2RlciBzZXR0aW5nIHRvIHRoZSBVRSBJbnN0YW5jZS5cclxuICAgICAqIEBwYXJhbSBtYXhRUCAtIFRoZSB1cHBlciBib3VuZCBmb3IgUVAgd2hlbiBlbmNvZGluZ1xyXG4gICAgICogdmFsaWQgdmFsdWVzIGFyZSAoMS01MSkgd2hlcmU6XHJcbiAgICAgKiAxID0gQmVzdCBxdWFsaXR5IGJ1dCBoaWdoZXN0IGJpdHJhdGUuXHJcbiAgICAgKiA1MSA9IFdvcnN0IHF1YWxpdHkgYnV0IGxvd2VzdCBiaXRyYXRlLlxyXG4gICAgICogQnkgZGVmYXVsdCB0aGUgbWF4UVAgaXMgNTEgbWVhbmluZyB0aGUgZW5jb2RlciBpcyBmcmVlXHJcbiAgICAgKiB0byBkcm9wIHF1YWxpdHkgYXMgbG93IGFzIG5lZWRlZCBvbiB0aGUgZ2l2ZW4gbmV0d29yayBsaW5rLlxyXG4gICAgICovXHJcbiAgICAgc2VuZEVuY29kZXJNYXhRUChtYXhRUDogbnVtYmVyKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgTWF4UVA9JHttYXhRUH1cXG5gLCA2KTtcclxuXHJcbiAgICAgICAgaWYgKG1heFFQICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoe1xyXG4gICAgICAgICAgICAgICAgJ0VuY29kZXIuTWF4UVAnOiBtYXhRUFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSB7IFdlYlJUQy5NaW5CaXRyYXRlOiBTb21lTnVtYmVyIH19IGNvbW1hbmQgdG8gVUUgdG8gc2V0IFxyXG4gICAgICogdGhlIG1pbmltdW0gYml0cmF0ZSB0aGF0IHdlIGFsbG93IFdlYlJUQyB0byB1c2UgXHJcbiAgICAgKiAobm90ZSBzZXR0aW5nIHRoaXMgdG9vIGhpZ2ggaW4gcG9vciBuZXR3b3JrcyBjYW4gYmUgcHJvYmxlbWF0aWMpLlxyXG4gICAgICogQHBhcmFtIG1pbkJpdHJhdGUgLSBUaGUgbWluaW11bSBiaXRyYXRlIHdlIHdvdWxkIGxpa2UgV2ViUlRDIHRvIG5vdCBmYWxsIGJlbG93LlxyXG4gICAgICovXHJcbiAgICBzZW5kV2ViUlRDTWluQml0cmF0ZShtaW5CaXRyYXRlOiBudW1iZXIpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBXZWJSVEMgTWluIEJpdHJhdGU9JHttaW5CaXRyYXRlfWAsIDYpO1xyXG4gICAgICAgIGlmIChtaW5CaXRyYXRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoe1xyXG4gICAgICAgICAgICAgICAgJ1dlYlJUQy5NaW5CaXRyYXRlJzogbWluQml0cmF0ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSB7IFdlYlJUQy5NYXhCaXRyYXRlOiBTb21lTnVtYmVyIH19IGNvbW1hbmQgdG8gVUUgdG8gc2V0IFxyXG4gICAgICogdGhlIG1pbmltdW0gYml0cmF0ZSB0aGF0IHdlIGFsbG93IFdlYlJUQyB0byB1c2UgXHJcbiAgICAgKiAobm90ZSBzZXR0aW5nIHRoaXMgdG9vIGxvdyBjb3VsZCByZXN1bHQgaW4gYmxvY2t5IHZpZGVvKS5cclxuICAgICAqIEBwYXJhbSBtaW5CaXRyYXRlIC0gVGhlIG1pbmltdW0gYml0cmF0ZSB3ZSB3b3VsZCBsaWtlIFdlYlJUQyB0byBub3QgZmFsbCBiZWxvdy5cclxuICAgICAqL1xyXG4gICAgIHNlbmRXZWJSVENNYXhCaXRyYXRlKG1heEJpdHJhdGU6IG51bWJlcikge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFdlYlJUQyBNYXggQml0cmF0ZT0ke21heEJpdHJhdGV9YCwgNik7XHJcbiAgICAgICAgaWYgKG1heEJpdHJhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZCh7XHJcbiAgICAgICAgICAgICAgICAnV2ViUlRDLk1heEJpdHJhdGUnOiBtYXhCaXRyYXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIHsgV2ViUlRDLkZwczogU29tZU51bWJlciB9fSBVRSA1LjArXHJcbiAgICAgKiBhbmQgeyBXZWJSVEMuTWF4RnBzIH0gVUUgNC4yNyBjb21tYW5kIHRvIHNldCBcclxuICAgICAqIHRoZSBtYXhpbXVtIGZwcyB3ZSB3b3VsZCBsaWtlIFdlYlJUQyB0byBzdHJlYW0gYXQuIFxyXG4gICAgICogQHBhcmFtIGZwcyAtIFRoZSBtYXhpbXVtIHN0cmVhbSBmcHMuXHJcbiAgICAgKi9cclxuICAgICBzZW5kV2ViUlRDRnBzKGZwczogbnVtYmVyKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgV2ViUlRDIEZQUz0ke2Zwc31gLCA2KTtcclxuICAgICAgICBpZiAoZnBzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoeydXZWJSVEMuRnBzJzogZnBzfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHsnV2ViUlRDLk1heEZwcyc6IGZwc30pOyAvKiBUT0RPOiBSZW1vdmUgd2hlbiBVRSA0LjI3IHVuc3VwcG9ydGVkLiAqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIHRoZSBVSSBEZXNjcmlwdG9yIGBzdGF0IGZwc2AgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIHNlbmRTaG93RnBzKCk6IHZvaWQge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBzaG93IHN0YXQgdG8gVUUgICAtLS0tJyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoeyAnc3RhdC5mcHMnOiAnJyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYW4gSWZyYW1lIHJlcXVlc3QgdG8gdGhlIHN0cmVhbWVyXHJcbiAgICAgKi9cclxuICAgIHNlbmRJZnJhbWVSZXF1ZXN0KCk6IHZvaWQge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBSZXF1ZXN0IGZvciBhbiBJRnJhbWUgIC0tLS0nLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0lGcmFtZVJlcXVlc3QnKSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIFVJSW50ZXJhY3Rpb24gbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBlbWl0VUlJbnRlcmFjdGlvbihkZXNjcmlwdG9yOiBvYmplY3QgfCBzdHJpbmcpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnLS0tLSAgIFNlbmRpbmcgY3VzdG9tIFVJSW50ZXJhY3Rpb24gbWVzc2FnZSAgIC0tLS0nLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0VUlJbnRlcmFjdGlvbihkZXNjcmlwdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBDb21tYW5kIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZW1pdENvbW1hbmQoZGVzY3JpcHRvcjogb2JqZWN0KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJy0tLS0gICBTZW5kaW5nIGN1c3RvbSBDb21tYW5kIG1lc3NhZ2UgICAtLS0tJyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgY29uc29sZSBjb21tYW5kIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZW1pdENvbnNvbGVDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBjdXN0b20gQ29tbWFuZDpDb25zb2xlQ29tbWFuZCBtZXNzYWdlICAgLS0tLScsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcclxuICAgICAgICAgICAgQ29uc29sZUNvbW1hbmQ6IGNvbW1hbmQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhIHJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlIHRvIGhhdmUgb3duZXJzaGlwIG9mIFF1YWxpdHlcclxuICAgICAqL1xyXG4gICAgc2VuZFJlcXVlc3RRdWFsaXR5Q29udHJvbE93bmVyc2hpcCgpOiB2b2lkIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnLS0tLSAgIFNlbmRpbmcgUmVxdWVzdCB0byBDb250cm9sIFF1YWxpdHkgIC0tLS0nLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIuU2VuZFJlcXVlc3RRdWFsaXR5Q29udHJvbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgTGF0ZW5jeSBUZXN0IFJlc3VsdCBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gTGF0ZW5jeSBUZXN0IFRpbWluZ3NcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTGF0ZW5jeVRlc3RSZXN1bHQobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUubGF0ZW5jeVRlc3QnLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBsYXRlbmN5QXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShcclxuICAgICAgICAgICAgbWVzc2FnZS5zbGljZSgxKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgbGF0ZW5jeVRlc3RSZXN1bHRzOiBMYXRlbmN5VGVzdFJlc3VsdHMgPSBuZXcgTGF0ZW5jeVRlc3RSZXN1bHRzKCk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihsYXRlbmN5VGVzdFJlc3VsdHMsIEpTT04ucGFyc2UobGF0ZW5jeUFzU3RyaW5nKSk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnByb2Nlc3NGaWVsZHMoKTtcclxuXHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnRlc3RTdGFydFRpbWVNcyA9IHRoaXMubGF0ZW5jeVN0YXJ0VGltZTtcclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuYnJvd3NlclJlY2VpcHRUaW1lTXMgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMubGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSA9IH5+KFxyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuYnJvd3NlclJlY2VpcHRUaW1lTXMgLVxyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdFN0YXJ0VGltZU1zXHJcbiAgICAgICAgKTtcclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdER1cmF0aW9uID0gfn4oXHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5UcmFuc21pc3Npb25UaW1lTXMgLVxyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuUmVjZWlwdFRpbWVNc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLm5ldHdvcmtMYXRlbmN5ID0gfn4oXHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5sYXRlbmN5RXhjbHVkaW5nRGVjb2RlIC1cclxuICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnRlc3REdXJhdGlvblxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zICYmXHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5icm93c2VyUmVjZWlwdFRpbWVNc1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuZW5kVG9FbmRMYXRlbmN5ID1cclxuICAgICAgICAgICAgICAgIH5+KGxhdGVuY3lUZXN0UmVzdWx0cy5mcmFtZURpc3BsYXlEZWx0YVRpbWVNcyArXHJcbiAgICAgICAgICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLm5ldHdvcmtMYXRlbmN5LFxyXG4gICAgICAgICAgICAgICAgK2xhdGVuY3lUZXN0UmVzdWx0cy5DYXB0dXJlVG9TZW5kTXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbkxhdGVuY3lUZXN0UmVzdWx0KGxhdGVuY3lUZXN0UmVzdWx0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIEVuY29kZXIgYW5kIFdlYiBSVEMgU2V0dGluZ3MgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIEluaXRpYWwgRW5jb2RlciBhbmQgV2ViIFJUQyBTZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVJbml0aWFsU2V0dGluZ3MobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5pdGlhbFNldHRpbmdzJyxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZEFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUoXHJcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2xpY2UoMSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZEluaXRpYWxTZXR0aW5ncyA9IEpTT04ucGFyc2UocGF5bG9hZEFzU3RyaW5nKTtcclxuXHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFNldHRpbmdzOiBJbml0aWFsU2V0dGluZ3MgPSBuZXcgSW5pdGlhbFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuRW5jb2Rlcikge1xyXG4gICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MuRW5jb2RlclNldHRpbmdzID0gcGFyc2VkSW5pdGlhbFNldHRpbmdzLkVuY29kZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyc2VkSW5pdGlhbFNldHRpbmdzLldlYlJUQykge1xyXG4gICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MgPSBwYXJzZWRJbml0aWFsU2V0dGluZ3MuV2ViUlRDO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcnNlZEluaXRpYWxTZXR0aW5ncy5QaXhlbFN0cmVhbWluZykge1xyXG4gICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncyA9XHJcbiAgICAgICAgICAgICAgICBwYXJzZWRJbml0aWFsU2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyc2VkSW5pdGlhbFNldHRpbmdzLkNvbmZpZ09wdGlvbnMgJiYgcGFyc2VkSW5pdGlhbFNldHRpbmdzLkNvbmZpZ09wdGlvbnMuRGVmYXVsdFRvSG92ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnRW5hYmxlZChcclxuICAgICAgICAgICAgICAgIEZsYWdzLkhvdmVyaW5nTW91c2VNb2RlLFxyXG4gICAgICAgICAgICAgICAgISFwYXJzZWRJbml0aWFsU2V0dGluZ3MuQ29uZmlnT3B0aW9ucy5EZWZhdWx0VG9Ib3ZlclxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5pdGlhbFNldHRpbmdzLnVlQ29tcGF0aWJsZSgpO1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgcGF5bG9hZEFzU3RyaW5nLCA2KTtcclxuXHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25Jbml0aWFsU2V0dGluZ3MoaW5pdGlhbFNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgUXVhbnRpemF0aW9uIFBhcmFtZXRlciBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gRW5jb2RlcnMgUXVhbnRpemF0aW9uIFBhcmFtZXRlclxyXG4gICAgICovXHJcbiAgICBoYW5kbGVWaWRlb0VuY29kZXJBdmdRUChtZXNzYWdlOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5WaWRlb0VuY29kZXJBdmdRUCcsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IEF2Z1FQID0gTnVtYmVyKFxyXG4gICAgICAgICAgICBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zZXRWaWRlb0VuY29kZXJBdmdRUChBdmdRUCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIHZpZGVvIGVsZW1lbnQgaGFzIGJlZW4gbG9hZGVkIHdpdGggYSBzcmNPYmplY3RcclxuICAgICAqL1xyXG4gICAgaGFuZGxlVmlkZW9Jbml0aWFsaXplZCgpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblZpZGVvSW5pdGlhbGl6ZWQoKTtcclxuXHJcbiAgICAgICAgLy8gZWl0aGVyIGF1dG9wbGF5IHRoZSB2aWRlbyBvciBzZXQgdXAgdGhlIHBsYXkgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMuYXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpO1xyXG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmxhZyBzZXQgaWYgdGhlIHVzZXIgaGFzIFF1YWxpdHkgT3duZXJzaGlwXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIERvZXMgdGhlIGN1cnJlbnQgY2xpZW50IGhhdmUgUXVhbGl0eSBPd25lcnNoaXBcclxuICAgICAqL1xyXG4gICAgb25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChtZXNzYWdlOiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcclxuICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAnLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmlzUXVhbGl0eUNvbnRyb2xsZXIgPSBuZXcgQm9vbGVhbih2aWV3WzFdKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgYFJlY2VpdmVkIHF1YWxpdHkgY29udHJvbGxlciBtZXNzYWdlLCB3aWxsIGNvbnRyb2wgcXVhbGl0eTogJHt0aGlzLmlzUXVhbGl0eUNvbnRyb2xsZXJ9YFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChcclxuICAgICAgICAgICAgdGhpcy5pc1F1YWxpdHlDb250cm9sbGVyXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgQWdncmVnYXRlZCBzdGF0cyBhcmUgQ29sbGVjdGVkXHJcbiAgICAgKiBAcGFyYW0gc3RhdHMgLSBBZ2dyZWdhdGVkIFN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVZpZGVvU3RhdHMoc3RhdHM6IEFnZ3JlZ2F0ZWRTdGF0cykge1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uVmlkZW9TdGF0cyhzdGF0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBSZXNpemUgdGhlIFZpZGVvIFBsYXllciBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZVBsYXllclN0eWxlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgb3ZlcnJpZGRlbiBkaXNjb25uZWN0IG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZ2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG92ZXJyaWRlIGZvciB0aGUgZGlzY29ubmVjdCBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIHNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlID0gbWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQcmVmZXJyZWRDb2RlYyhjb2RlYzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5wcmVmZXJyZWRDb2RlYyA9IGNvZGVjO1xyXG4gICAgICAgIGlmICh0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wcmVmZXJyZWRDb2RlYyA9IGNvZGVjO1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci51cGRhdGVDb2RlY1NlbGVjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRWaWRlb0VuY29kZXJBdmdRUChhdmdRUDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0F2Z1FwID0gYXZnUVA7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25WaWRlb0VuY29kZXJBdmdRUCh0aGlzLnZpZGVvQXZnUXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZW5hYmxlcy9kaXNhYmxlcyBrZXlib2FyZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgc2V0S2V5Ym9hcmRJbnB1dEVuYWJsZWQoaXNFbmFibGVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZENvbnRyb2xsZXI/LnVucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpO1xyXG4gICAgICAgIGlmIChpc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlib2FyZENvbnRyb2xsZXIgPSB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkucmVnaXN0ZXJLZXlCb2FyZChcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZW5hYmxlcy9kaXNhYmxlcyBtb3VzZSBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgc2V0TW91c2VJbnB1dEVuYWJsZWQoaXNFbmFibGVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXI/LnVucmVnaXN0ZXJNb3VzZUV2ZW50cygpO1xyXG4gICAgICAgIGlmIChpc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgbW91c2VNb2RlID0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSlcclxuICAgICAgICAgICAgPyBDb250cm9sU2NoZW1lVHlwZS5Ib3ZlcmluZ01vdXNlXHJcbiAgICAgICAgICAgIDogQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyID1cclxuICAgICAgICAgICAgdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5LnJlZ2lzdGVyTW91c2UobW91c2VNb2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIHRvdWNoIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBzZXRUb3VjaElucHV0RW5hYmxlZChpc0VuYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnRvdWNoQ29udHJvbGxlcj8udW5yZWdpc3RlclRvdWNoRXZlbnRzKCk7XHJcbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IHRoaXMuaW5wdXRDbGFzc2VzRmFjdG9yeS5yZWdpc3RlclRvdWNoKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5GYWtlTW91c2VXaXRoVG91Y2hlcyksXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3RcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIGdhbWUgcGFkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBzZXRHYW1lUGFkSW5wdXRFbmFibGVkKGlzRW5hYmxlZDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXI/LnVucmVnaXN0ZXJHYW1lUGFkRXZlbnRzKCk7XHJcbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyID0gdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5LnJlZ2lzdGVyR2FtZVBhZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyLm9uR2FtZXBhZENvbm5lY3RlZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZENvbm5lY3RlZCcpKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5nYW1lUGFkQ29udHJvbGxlci5vbkdhbWVwYWREaXNjb25uZWN0ZWQgPSAoY29udHJvbGxlcklkeDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWREaXNjb25uZWN0ZWQnKShbY29udHJvbGxlcklkeF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyRGF0YUNoYW5uZWxFdmVudEVtaXR0ZXJzKGRhdGFDaGFubmVsOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcclxuICAgICAgICBkYXRhQ2hhbm5lbC5vbk9wZW4gPSAobGFiZWwsIGV2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICBuZXcgRGF0YUNoYW5uZWxPcGVuRXZlbnQoeyBsYWJlbCwgZXZlbnQgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICBkYXRhQ2hhbm5lbC5vbkNsb3NlID0gKGxhYmVsLCBldmVudCkgPT5cclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgbmV3IERhdGFDaGFubmVsQ2xvc2VFdmVudCh7IGxhYmVsLCBldmVudCB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGRhdGFDaGFubmVsLm9uRXJyb3IgPSAobGFiZWwsIGV2ZW50KSA9PlxyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICBuZXcgRGF0YUNoYW5uZWxFcnJvckV2ZW50KHsgbGFiZWwsIGV2ZW50IH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBUaGUgVHlwZXMgb2YgTWVzc2FnZXMgdGhhdCB3aWxsIGJlIHJlY2VpdmVkXHJcbiAqL1xyXG5leHBvcnQgZW51bSBNZXNzYWdlUmVjdlR5cGVzIHtcclxuICAgIENPTkZJRyA9ICdjb25maWcnLFxyXG4gICAgU1RSRUFNRVJfTElTVCA9ICdzdHJlYW1lckxpc3QnLFxyXG4gICAgUExBWUVSX0NPVU5UID0gJ3BsYXllckNvdW50JyxcclxuICAgIE9GRkVSID0gJ29mZmVyJyxcclxuICAgIEFOU1dFUiA9ICdhbnN3ZXInLFxyXG4gICAgSUNFX0NBTkRJREFURSA9ICdpY2VDYW5kaWRhdGUnLFxyXG4gICAgUEVFUl9EQVRBX0NIQU5ORUxTID0gJ3BlZXJEYXRhQ2hhbm5lbHMnLFxyXG4gICAgUElORyA9ICdwaW5nJyxcclxuICAgIFdBUk5JTkcgPSAnd2FybmluZydcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbmNyZXRlIFJlY2VpdmVkIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VSZWN2IHtcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIGlkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlQXV0aFJlcXVpcmVkIGV4dGVuZHMgTWVzc2FnZVJlY3Yge31cclxuXHJcbi8qKlxyXG4gKiBDb25maWcgTWVzc2FnZSBXcmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZUNvbmZpZyBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxuICAgIHBlZXJDb25uZWN0aW9uT3B0aW9uczogUlRDQ29uZmlndXJhdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0cmVhbWVyIExpc3QgTWVzc2FnZSBXcmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVN0cmVhbWVyTGlzdCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxuICAgIGlkczogc3RyaW5nW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQbGF5ZXIgQ291bnQgTWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVBsYXllckNvdW50IGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG4gICAgY291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYiBSVEMgb2ZmZXIgQW5zd2VyIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBbnN3ZXIgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XHJcbiAgICBzZHA6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYlJUQyBzZHAgb2ZmZXIgTWVzc2FnZSB3cmFwcGVyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VPZmZlciBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxuICAgIHNkcDogc3RyaW5nO1xyXG4gICAgc2Z1PzogYm9vbGVhbjtcclxuICAgIGRlZmF1bHRUb0hvdmVyPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogSWNlIENhbmRpZGF0ZSBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlSWNlQ2FuZGlkYXRlIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG4gICAgY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGVJbml0O1xyXG59XHJcblxyXG4vKipcclxuICogUGVlciBEYXRhIENoYW5uZWxzIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VQZWVyRGF0YUNoYW5uZWxzIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG4gICAgcmVjdlN0cmVhbUlkOiBudW1iZXI7XHJcbiAgICBzZW5kU3RyZWFtSWQ6IG51bWJlcjtcclxuICAgIHR5cGU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VPblNjcmVlbktleWJvYXJkIHtcclxuICAgIGNvbW1hbmQ6IHN0cmluZztcclxuICAgIHNob3dPblNjcmVlbktleWJvYXJkOiBib29sZWFuO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgU2VuZCBUeXBlcyB0aGF0IGFyZSBwdXNoZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gKi9cclxuZXhwb3J0IGVudW0gTWVzc2FnZVNlbmRUeXBlcyB7XHJcbiAgICBMSVNUX1NUUkVBTUVSUyA9ICdsaXN0U3RyZWFtZXJzJyxcclxuICAgIFNVQlNDUklCRSA9ICdzdWJzY3JpYmUnLFxyXG4gICAgVU5TVUJTQ1JJQkUgPSAndW5zdWJzY3JpYmUnLFxyXG4gICAgSUNFX0NBTkRJREFURSA9ICdpY2VDYW5kaWRhdGUnLFxyXG4gICAgT0ZGRVIgPSAnb2ZmZXInLFxyXG4gICAgQU5TV0VSID0gJ2Fuc3dlcicsXHJcbiAgICBEQVRBQ0hBTk5FTFJFUVVFU1QgPSAnZGF0YUNoYW5uZWxSZXF1ZXN0JyxcclxuICAgIFNGVVJFQ1ZEQVRBQ0hBTk5FTFJFQURZID0gJ3BlZXJEYXRhQ2hhbm5lbHNSZWFkeScsXHJcbiAgICBQT05HID0gJ3BvbmcnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFdyYXBwZXIgZm9yIHRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlU2VuZCBpbXBsZW1lbnRzIFNlbmQge1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgcGVlckNvbm5lY3Rpb25PcHRpb25zOiBvYmplY3Q7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcclxuICAgICAqIEByZXR1cm5zIC0gSlNPTiBTdHJpbmcgb2YgdGhlIE1lc3NhZ2UgdG8gc2VuZFxyXG4gICAgICovXHJcbiAgICBwYXlsb2FkKCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdTZW5kaW5nID0+IFxcbicgKyBKU09OLnN0cmluZ2lmeSh0aGlzLCB1bmRlZmluZWQsIDQpLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VuZCB7XHJcbiAgICAvKipcclxuICAgICAqIFR1cm5zIHRoZSB3cmFwcGVyIGludG8gYSBKU09OIFN0cmluZ1xyXG4gICAgICogQHJldHVybnMgLSBKU09OIFN0cmluZyBvZiB0aGUgTWVzc2FnZSB0byBzZW5kXHJcbiAgICAgKi9cclxuICAgIHBheWxvYWQ6ICgpID0+IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VMaXN0U3RyZWFtZXJzIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLkxJU1RfU1RSRUFNRVJTO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVN1YnNjcmliZSBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIHN0cmVhbWVySWQ6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHJlYW1lcmlkOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuU1VCU0NSSUJFO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtZXJJZCA9IHN0cmVhbWVyaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlVW5zdWJzY3JpYmUgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuVU5TVUJTQ1JJQkU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnN0YW5jZSBSZXF1ZXN0IE1lc3NhZ2UgV3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VQb25nIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgdGltZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5QT05HO1xyXG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAgV2ViIFJUQyBPZmZlciBtZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlV2ViUlRDT2ZmZXIgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XHJcbiAgICBzZHA6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBvZmZlciAtIEdlbmVyYXRlZCBXZWIgUlRDIE9mZmVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9mZmVyPzogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5PRkZFUjtcclxuXHJcbiAgICAgICAgaWYgKG9mZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IG9mZmVyLnR5cGUgYXMgTWVzc2FnZVNlbmRUeXBlcztcclxuICAgICAgICAgICAgdGhpcy5zZHAgPSBvZmZlci5zZHA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogIFdlYiBSVEMgQW5zd2VyIG1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VXZWJSVENBbnN3ZXIgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XHJcbiAgICBzZHA6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBhbnN3ZXIgLSBHZW5lcmF0ZWQgV2ViIFJUQyBPZmZlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihhbnN3ZXI/OiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLkFOU1dFUjtcclxuXHJcbiAgICAgICAgaWYgKGFuc3dlcikge1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBhbnN3ZXIudHlwZSBhcyBNZXNzYWdlU2VuZFR5cGVzO1xyXG4gICAgICAgICAgICB0aGlzLnNkcCA9IGFuc3dlci5zZHA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogIFdlYiBSVEMgRGF0YSBjaGFubmVsIHJlcXVlc3QgbWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVdlYlJUQ0RhdGFjaGFubmVsUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5EQVRBQ0hBTk5FTFJFUVVFU1Q7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAgV2ViIFJUQyBTRlUgRGF0YSBjaGFubmVsIHJlYWR5IG1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5TRlVSRUNWREFUQUNIQU5ORUxSRUFEWTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJUQyBJY2UgQ2FuZGlkYXRlIFdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlSWNlQ2FuZGlkYXRlIGltcGxlbWVudHMgU2VuZCB7XHJcbiAgICBjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZTtcclxuICAgIHR5cGU6IE1lc3NhZ2VTZW5kVHlwZXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLklDRV9DQU5ESURBVEU7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGUgPSBjYW5kaWRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcclxuICAgICAqIEByZXR1cm5zIC0gSlNPTiBTdHJpbmcgb2YgdGhlIE1lc3NhZ2UgdG8gc2VuZFxyXG4gICAgICovXHJcbiAgICBwYXlsb2FkKCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICdTZW5kaW5nID0+IFxcbicgKyBKU09OLnN0cmluZ2lmeSh0aGlzLCB1bmRlZmluZWQsIDQpLFxyXG4gICAgICAgICAgICA2XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xyXG5pbXBvcnQgeyBXZWJTb2NrZXRDb250cm9sbGVyIH0gZnJvbSAnLi9XZWJTb2NrZXRDb250cm9sbGVyJztcclxuaW1wb3J0IHtcclxuICAgIE1lc3NhZ2VSZWN2VHlwZXMsXHJcbiAgICBNZXNzYWdlQ29uZmlnLFxyXG4gICAgTWVzc2FnZVN0cmVhbWVyTGlzdCxcclxuICAgIE1lc3NhZ2VQbGF5ZXJDb3VudCxcclxuICAgIE1lc3NhZ2VBbnN3ZXIsXHJcbiAgICBNZXNzYWdlT2ZmZXIsXHJcbiAgICBNZXNzYWdlSWNlQ2FuZGlkYXRlLFxyXG4gICAgTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHNcclxufSBmcm9tICcuL01lc3NhZ2VSZWNlaXZlJztcclxuaW1wb3J0IHsgTWVzc2FnZVBvbmcgfSBmcm9tICcuL01lc3NhZ2VTZW5kJztcclxuXHJcbi8qKlxyXG4gKiBTaWduYWxsaW5nIHByb3RvY29sIGZvciBoYW5kbGluZyBtZXNzYWdlcyBmcm9tIHRoZSBzaWduYWxsaW5nIHNlcnZlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTaWduYWxsaW5nUHJvdG9jb2wge1xyXG4gICAgcHJpdmF0ZSBGcm9tVUVNZXNzYWdlSGFuZGxlcnM6IE1hcDxzdHJpbmcsIChwYXlsb2FkOiBzdHJpbmcpID0+IHZvaWQ+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuRnJvbVVFTWVzc2FnZUhhbmRsZXJzID0gbmV3IE1hcDxcclxuICAgICAgICAgICAgc3RyaW5nLFxyXG4gICAgICAgICAgICAocGF5bG9hZDogc3RyaW5nKSA9PiB2b2lkXHJcbiAgICAgICAgPigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZE1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgIG1lc3NhZ2VJZDogc3RyaW5nLFxyXG4gICAgICAgIG1lc3NhZ2VIYW5kbGVyOiAocGF5bG9hZDogc3RyaW5nKSA9PiB2b2lkXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLkZyb21VRU1lc3NhZ2VIYW5kbGVycy5zZXQobWVzc2FnZUlkLCBtZXNzYWdlSGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlTWVzc2FnZShtZXNzYWdlSWQ6IHN0cmluZywgbWVzc2FnZURhdGE6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLkZyb21VRU1lc3NhZ2VIYW5kbGVycy5oYXMobWVzc2FnZUlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLkZyb21VRU1lc3NhZ2VIYW5kbGVycy5nZXQobWVzc2FnZUlkKShtZXNzYWdlRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgIGBNZXNzYWdlIHR5cGUgb2YgJHttZXNzYWdlSWR9IGRvZXMgbm90IGhhdmUgYSBtZXNzYWdlIGhhbmRsZXIgcmVnaXN0ZXJlZCBvbiB0aGUgZnJvbnRlbmQgLSBpZ25vcmluZyBtZXNzYWdlLmBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cCBhbnkgZGVmYXVsdCBzaWduYWxsaW5nIG1lc3NhZ2UgaGFuZGxpbmcsIHRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIG9yIGFkZGl0aW9uYWwgaGFuZGxlcnMgYWRkZWQgd2l0aCBgYWRkTWVzc2FnZUhhbmRsZXJgLlxyXG4gICAgICogQHBhcmFtIHdlYnNvY2tldENvbnRyb2xsZXIgVGhlIGNvbnRyb2xsZXIgdG8gc2V0dXAgdGhlc2UgaGFuZGxlcnMgb24uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXR1cERlZmF1bHRIYW5kbGVycyh3ZWJzb2NrZXRDb250cm9sbGVyOiBXZWJTb2NrZXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgLy8gUElOR1xyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBJTkcsXHJcbiAgICAgICAgICAgIChwaW5nUGF5bG9hZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZW5kIG91ciBwb25nIHBheWxvYWQgYmFjayB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXJcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvbmdQYXlsb2FkID0gbmV3IE1lc3NhZ2VQb25nKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICApLnBheWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBJTkcgKyAnOiAnICsgcGluZ1BheWxvYWQsXHJcbiAgICAgICAgICAgICAgICAgICAgNlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIud2ViU29ja2V0LnNlbmQocG9uZ1BheWxvYWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gQ09ORklHXHJcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuQ09ORklHLFxyXG4gICAgICAgICAgICAoY29uZmlnUGF5bG9hZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIE1lc3NhZ2VSZWN2VHlwZXMuQ09ORklHLCA2KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZzogTWVzc2FnZUNvbmZpZyA9IEpTT04ucGFyc2UoY29uZmlnUGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uQ29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBTVFJFQU1FUl9MSVNUXHJcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfTElTVCxcclxuICAgICAgICAgICAgKGxpc3RQYXlsb2FkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlNUUkVBTUVSX0xJU1QsXHJcbiAgICAgICAgICAgICAgICAgICAgNlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbWVyTGlzdDogTWVzc2FnZVN0cmVhbWVyTGlzdCA9XHJcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShsaXN0UGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0KHN0cmVhbWVyTGlzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBQTEFZRVJfQ09VTlRcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5QTEFZRVJfQ09VTlQsXHJcbiAgICAgICAgICAgIChwbGF5ZXJDb3VudFBheWxvYWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuUExBWUVSX0NPVU5ULFxyXG4gICAgICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJDb3VudDogTWVzc2FnZVBsYXllckNvdW50ID1cclxuICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKHBsYXllckNvdW50UGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgJ1BsYXllciBDb3VudDogJyArIHBsYXllckNvdW50LmNvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIDZcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBBTlNXRVJcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5BTlNXRVIsXHJcbiAgICAgICAgICAgIChhbnN3ZXJQYXlsb2FkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBNZXNzYWdlUmVjdlR5cGVzLkFOU1dFUiwgNik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbnN3ZXI6IE1lc3NhZ2VBbnN3ZXIgPSBKU09OLnBhcnNlKGFuc3dlclBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y0Fuc3dlcihhbnN3ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gT0ZGRVJcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5PRkZFUixcclxuICAgICAgICAgICAgKG9mZmVyUGF5bG9hZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZW5kIG91ciBwb25nIHBheWxvYWQgYmFjayB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXJcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgTWVzc2FnZVJlY3ZUeXBlcy5PRkZFUiwgNik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZlcjogTWVzc2FnZU9mZmVyID0gSlNPTi5wYXJzZShvZmZlclBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y09mZmVyKG9mZmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIElDRSBDQU5ESURBVEVcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcclxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5JQ0VfQ0FORElEQVRFLFxyXG4gICAgICAgICAgICAoaWNlQ2FuZGlkYXRlUGF5bG9hZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZW5kIG91ciBwb25nIHBheWxvYWQgYmFjayB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXJcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLklDRV9DQU5ESURBVEUsXHJcbiAgICAgICAgICAgICAgICAgICAgNlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGljZUNhbmRpZGF0ZTogTWVzc2FnZUljZUNhbmRpZGF0ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShpY2VDYW5kaWRhdGVQYXlsb2FkKTtcclxuICAgICAgICAgICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIub25JY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlLmNhbmRpZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBXQVJOSU5HXHJcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoXHJcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuV0FSTklORyxcclxuICAgICAgICAgICAgKHdhcm5pbmdQYXlsb2FkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYFdhcm5pbmcgcmVjZWl2ZWQ6ICR7d2FybmluZ1BheWxvYWR9YFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFBFRVIgREFUQSBDSEFOTkVMU1xyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKFxyXG4gICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBFRVJfREFUQV9DSEFOTkVMUyxcclxuICAgICAgICAgICAgKHBlZXJEYXRhQ2hhbm5lbHNQYXlsb2FkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBFRVJfREFUQV9DSEFOTkVMUyxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGVlckRhdGFDaGFubmVsczogTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHMgPSBKU09OLnBhcnNlKFxyXG4gICAgICAgICAgICAgICAgICAgIHBlZXJEYXRhQ2hhbm5lbHNQYXlsb2FkXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMocGVlckRhdGFDaGFubmVscyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcclxuaW1wb3J0ICogYXMgTWVzc2FnZVJlY2VpdmUgZnJvbSAnLi9NZXNzYWdlUmVjZWl2ZSc7XHJcbmltcG9ydCAqIGFzIE1lc3NhZ2VTZW5kIGZyb20gJy4vTWVzc2FnZVNlbmQnO1xyXG5pbXBvcnQgeyBTaWduYWxsaW5nUHJvdG9jb2wgfSBmcm9tICcuL1NpZ25hbGxpbmdQcm90b2NvbCc7XHJcblxyXG4vLyBkZWNsYXJlIHRoZSBuZXcgbWV0aG9kIGZvciB0aGUgd2Vic29ja2V0IGludGVyZmFjZVxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2ViU29ja2V0IHtcclxuICAgICAgICBvbm1lc3NhZ2ViaW5hcnk/KGV2ZW50PzogTWVzc2FnZUV2ZW50KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBjb250cm9sbGVyIGZvciB0aGUgV2ViU29ja2V0IGFuZCBhbGwgYXNzb2NpYXRlZCBtZXRob2RzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV2ViU29ja2V0Q29udHJvbGxlciB7XHJcbiAgICBXU19PUEVOX1NUQVRFID0gMTtcclxuICAgIHdlYlNvY2tldDogV2ViU29ja2V0O1xyXG4gICAgb25PcGVuOiBFdmVudFRhcmdldDtcclxuICAgIG9uQ2xvc2U6IEV2ZW50VGFyZ2V0O1xyXG4gICAgc2lnbmFsbGluZ1Byb3RvY29sOiBTaWduYWxsaW5nUHJvdG9jb2w7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5vbk9wZW4gPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UgPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgICAgICB0aGlzLnNpZ25hbGxpbmdQcm90b2NvbCA9IG5ldyBTaWduYWxsaW5nUHJvdG9jb2woKTtcclxuICAgICAgICBTaWduYWxsaW5nUHJvdG9jb2wuc2V0dXBEZWZhdWx0SGFuZGxlcnModGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0gY29ubmVjdGlvblVSTCAtIFRoZSBBZGRyZXNzIG9mIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcmV0dXJucyAtIElmIHRoZXJlIGlzIGEgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjb25uZWN0KGNvbm5lY3Rpb25VUkw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgY29ubmVjdGlvblVSTCwgNik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQgPSBuZXcgV2ViU29ja2V0KGNvbm5lY3Rpb25VUkwpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm9wZW4gPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25PcGVuKGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25lcnJvciA9ICgpID0+IHRoaXMuaGFuZGxlT25FcnJvcigpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRsZU9uQ2xvc2UoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25tZXNzYWdlYmluYXJ5ID0gKGV2ZW50KSA9PlxyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVPbk1lc3NhZ2VCaW5hcnkoZXZlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBMb2dnZXIuRXJyb3IoZXJyb3IsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hhdCBoYXBwZW5zIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkIGluIGJpbmFyeSBmb3JtXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNZXNzYWdlIFJlY2VpdmVkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uTWVzc2FnZUJpbmFyeShldmVudDogTWVzc2FnZUV2ZW50KSB7XHJcbiAgICAgICAgLy8gaWYgdGhlIGV2ZW50IGlzIGVtcHR5IHJldHVyblxyXG4gICAgICAgIGlmICghZXZlbnQgfHwgIWV2ZW50LmRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaGFuZGxlIHRoZSBiaW5hcnkgYW5kIHRoZW4gaGFuZGxlIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgZXZlbnQuZGF0YVxyXG4gICAgICAgICAgICAudGV4dCgpXHJcbiAgICAgICAgICAgIC50aGVuKChtZXNzYWdlU3RyaW5nOiB1bmtub3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBhIG5ldyBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25zdHJ1Y3RlZE1lc3NhZ2UgPSBuZXcgTWVzc2FnZUV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICdtZXNzYWdlRnJvbUJpbmFyeScsXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBtZXNzYWdlU3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzZW5kIHRoZSBuZXcgc3RyaW5naWZpZWQgZXZlbnQgYmFjayBpbnRvIGBvbm1lc3NhZ2VgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9uTWVzc2FnZShjb25zdHJ1Y3RlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYEZhaWxlZCB0byBwYXJzZSBiaW5hcnkgYmxvYiBmcm9tIHdlYnNvY2tldCwgcmVhc29uOiAke2Vycm9yfWBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGF0IGhhcHBlbnMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcclxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgUmVjZWl2ZWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25NZXNzYWdlKGV2ZW50OiBNZXNzYWdlRXZlbnQpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB3ZWJzb2NrZXQgbWVzc2FnZSBpcyBiaW5hcnksIGlmIHNvLCBzdHJpbmdpZnkgaXQuXHJcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVPbk1lc3NhZ2VCaW5hcnkoZXZlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdiA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ3JlY2VpdmVkID0+IFxcbicgK1xyXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShldmVudC5kYXRhKSwgdW5kZWZpbmVkLCA0KSxcclxuICAgICAgICAgICAgNlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFNlbmQgdG8gb3VyIHNpZ25hbGxpbmcgcHJvdG9jb2wgdG8gaGFuZGxlIHRoZSBpbmNvbWluZyBtZXNzYWdlXHJcbiAgICAgICAgdGhpcy5zaWduYWxsaW5nUHJvdG9jb2wuaGFuZGxlTWVzc2FnZShtZXNzYWdlLnR5cGUsIGV2ZW50LmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgb3BlbmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBOb3QgVXNlZFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBoYW5kbGVPbk9wZW4oZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ0Nvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldCcsXHJcbiAgICAgICAgICAgIDZcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMub25PcGVuLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdvcGVuJykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIG9uIHRoZSB3ZWJzb2NrZXRcclxuICAgICAqIEBwYXJhbSBldmVudCAtIEVycm9yIFBheWxvYWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25FcnJvcigpIHtcclxuICAgICAgICBMb2dnZXIuRXJyb3IoTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1dlYlNvY2tldCBlcnJvcicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgY2xvc2VkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBDbG9zZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkNsb3NlKGV2ZW50OiBDbG9zZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5vbldlYlNvY2tldE9uY2xvc2VPdmVybGF5TWVzc2FnZShldmVudCk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhcclxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcclxuICAgICAgICAgICAgJ0Rpc2Nvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldDogJyArXHJcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShldmVudC5jb2RlKSArXHJcbiAgICAgICAgICAgICAgICAnIC0gJyArXHJcbiAgICAgICAgICAgICAgICBldmVudC5yZWFzb25cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMub25DbG9zZS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2xvc2UnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVxdWVzdFN0cmVhbWVyTGlzdCgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VMaXN0U3RyZWFtZXJzKCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFN1YnNjcmliZShzdHJlYW1lcmlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VTdWJzY3JpYmUoc3RyZWFtZXJpZCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFVuc3Vic2NyaWJlKCkge1xyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZVVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFdlYlJ0Y09mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlV2ViUlRDT2ZmZXIob2ZmZXIpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbmRXZWJSdGNBbnN3ZXIoYW5zd2VyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlV2ViUlRDQW5zd2VyKGFuc3dlcik7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZFdlYlJ0Y0RhdGFjaGFubmVsUmVxdWVzdCgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VXZWJSVENEYXRhY2hhbm5lbFJlcXVlc3QoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBzZW5kU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHkoKSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHkoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIGFuIFJUQyBJY2UgQ2FuZGlkYXRlIHRvIHRoZSBTZXJ2ZXJcclxuICAgICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2VuZGluZyBJY2UgQ2FuZGlkYXRlJyk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldCAmJlxyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5yZWFkeVN0YXRlID09PSB0aGlzLldTX09QRU5fU1RBVEVcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy93cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogJ2ljZUNhbmRpZGF0ZScsIGNhbmRpZGF0ZTogY2FuZGlkYXRlIH0pKTtcclxuICAgICAgICAgICAgY29uc3QgSWNlQ2FuZGlkYXRlID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQoSWNlQ2FuZGlkYXRlLnBheWxvYWQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBXZWJzb2NrZXQgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLndlYlNvY2tldD8uY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogRXZlbnQgdXNlZCBmb3IgRGlzcGxheWluZyB3ZWJzb2NrZXQgY2xvc2VkIG1lc3NhZ2VzICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uV2ViU29ja2V0T25jbG9zZU92ZXJsYXlNZXNzYWdlKGV2ZW50OiBDbG9zZUV2ZW50KSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIE1lc3NhZ2UgQ29udGFpbnMgdGhlIHBheWxvYWQgb2YgdGhlIHBlZXIgY29ubmVjdGlvbiBvcHRpb25zIHVzZWQgZm9yIHRoZSBSVEMgUGVlciBoYW5kIHNoYWtlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUNvbmZpZyAtIENvbmZpZyBNZXNzYWdlIHJlY2VpdmVkIGZyb20gaGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uQ29uZmlnKG1lc3NhZ2VDb25maWc6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VDb25maWcpIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgTWVzc2FnZSBDb250YWlucyB0aGUgcGF5bG9hZCBvZiB0aGUgcGVlciBjb25uZWN0aW9uIG9wdGlvbnMgdXNlZCBmb3IgdGhlIFJUQyBQZWVyIGhhbmQgc2hha2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlQ29uZmlnIC0gQ29uZmlnIE1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgb25TdHJlYW1lckxpc3QobWVzc2FnZVN0cmVhbWVyTGlzdDogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVN0cmVhbWVyTGlzdCkge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpY2VDYW5kaWRhdGUgLSBJY2UgQ2FuZGlkYXRlIHNlbnQgZnJvbSB0aGUgU2lnbmFsaW5nIHNlcnZlciBzZXJ2ZXIncyBSVEMgaGFuZCBzaGFrZVxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdCkge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHdlYnNvY2tldCByZWNlaXZlcyB0aGUgYW5zd2VyIGZvciB0aGUgUlRDIHBlZXIgQ29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VBbnN3ZXIgLSBUaGUgUlRDIEFuc3dlciBwYXlsb2FkIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvbldlYlJ0Y0Fuc3dlcihtZXNzYWdlQW5zd2VyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQW5zd2VyKSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIHRoZSBvZmZlciBmb3IgdGhlIFJUQyBwZWVyIENvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlT2ZmZXIgLSBUaGUgc2RwIG9mZmVyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgb25XZWJSdGNPZmZlcihtZXNzYWdlT2ZmZXI6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VPZmZlcikge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHdlYnNvY2tldCByZWNlaXZlcyB0aGUgZGF0YSBjaGFubmVscyBmb3IgdGhlIFJUQyBwZWVyIENvbm5lY3Rpb24gZnJvbSB0aGUgU0ZVXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZURhdGFDaGFubmVscyAtIFRoZSBkYXRhIGNoYW5uZWxzIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMoXHJcbiAgICAgICAgbWVzc2FnZURhdGFDaGFubmVsczogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHNcclxuICAgICkge31cclxufVxyXG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XHJcbmltcG9ydCB7IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIgfSBmcm9tICcuLi9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IFdlYkdMVXRpbHMgfSBmcm9tICcuLi9VdGlsL1dlYkdMVXRpbHMnO1xyXG5pbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi4vSW5wdXRzL0dhbWVwYWRUeXBlcyc7XHJcbmltcG9ydCB7IFhSR2FtZXBhZENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvWFJHYW1lcGFkQ29udHJvbGxlcic7XHJcbmltcG9ydCB7IFhyRnJhbWVFdmVudCB9IGZyb20gJy4uL1V0aWwvRXZlbnRFbWl0dGVyJ1xyXG5pbXBvcnQgeyBGbGFncyB9IGZyb20gJy4uL3BpeGVsc3RyZWFtaW5nZnJvbnRlbmQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdlYlhSQ29udHJvbGxlciB7XHJcbiAgICBwcml2YXRlIHhyU2Vzc2lvbjogWFJTZXNzaW9uO1xyXG4gICAgcHJpdmF0ZSB4clJlZlNwYWNlOiBYUlJlZmVyZW5jZVNwYWNlO1xyXG4gICAgcHJpdmF0ZSBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgICBwcml2YXRlIHBvc2l0aW9uTG9jYXRpb246IG51bWJlcjtcclxuICAgIHByaXZhdGUgdGV4Y29vcmRMb2NhdGlvbjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSByZXNvbHV0aW9uTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uO1xyXG4gICAgcHJpdmF0ZSBvZmZzZXRMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XHJcblxyXG4gICAgcHJpdmF0ZSBwb3NpdGlvbkJ1ZmZlcjogV2ViR0xCdWZmZXI7XHJcbiAgICBwcml2YXRlIHRleGNvb3JkQnVmZmVyOiBXZWJHTEJ1ZmZlcjtcclxuXHJcbiAgICBwcml2YXRlIHdlYlJ0Y0NvbnRyb2xsZXI6IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XHJcbiAgICBwcml2YXRlIHhyR2FtZXBhZENvbnRyb2xsZXI6IFhSR2FtZXBhZENvbnRyb2xsZXI7XHJcbiAgICBwcml2YXRlIHhyQ29udHJvbGxlcnM6IEFycmF5PENvbnRyb2xsZXI+O1xyXG5cclxuICAgIG9uU2Vzc2lvblN0YXJ0ZWQ6IEV2ZW50VGFyZ2V0O1xyXG4gICAgb25TZXNzaW9uRW5kZWQ6IEV2ZW50VGFyZ2V0O1xyXG4gICAgb25GcmFtZTogRXZlbnRUYXJnZXQ7XHJcblxyXG4gICAgY29uc3RydWN0b3Iod2ViUnRjUGxheWVyQ29udHJvbGxlcjogV2ViUnRjUGxheWVyQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMueHJTZXNzaW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIgPSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMueHJDb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMueHJHYW1lcGFkQ29udHJvbGxlciA9IG5ldyBYUkdhbWVwYWRDb250cm9sbGVyKFxyXG4gICAgICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMub25TZXNzaW9uRW5kZWQgPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0ZWQgPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgICAgICB0aGlzLm9uRnJhbWUgPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgeHJDbGlja2VkKCkge1xyXG4gICAgICAgIGlmICghdGhpcy54clNlc3Npb24pIHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLnhyXHJcbiAgICAgICAgICAgICAgICAucmVxdWVzdFNlc3Npb24oJ2ltbWVyc2l2ZS12cicpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoc2Vzc2lvbjogWFJTZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblhyU2Vzc2lvblN0YXJ0ZWQoc2Vzc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnhyU2Vzc2lvbi5lbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25YclNlc3Npb25FbmRlZCgpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdYUiBTZXNzaW9uIGVuZGVkJyk7XHJcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25TZXNzaW9uRW5kZWQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3hyU2Vzc2lvbkVuZGVkJykpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uWHJTZXNzaW9uU3RhcnRlZChzZXNzaW9uOiBYUlNlc3Npb24pIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdYUiBTZXNzaW9uIHN0YXJ0ZWQnKTtcclxuXHJcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBzZXNzaW9uO1xyXG4gICAgICAgIHRoaXMueHJTZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vblhyU2Vzc2lvbkVuZGVkKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICAgIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywge1xyXG4gICAgICAgICAgICB4ckNvbXBhdGlibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy54clNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoe1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXI6IG5ldyBYUldlYkdMTGF5ZXIodGhpcy54clNlc3Npb24sIHRoaXMuZ2wpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNldHVwIHZlcnRleCBzaGFkZXJcclxuICAgICAgICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmdsLmNyZWF0ZVNoYWRlcih0aGlzLmdsLlZFUlRFWF9TSEFERVIpO1xyXG4gICAgICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgV2ViR0xVdGlscy52ZXJ0ZXhTaGFkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcik7XHJcblxyXG4gICAgICAgIC8vIHNldHVwIGZyYWdtZW50IHNoYWRlclxyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5GUkFHTUVOVF9TSEFERVIpO1xyXG4gICAgICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBXZWJHTFV0aWxzLmZyYWdtZW50U2hhZGVyKCkpO1xyXG4gICAgICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XHJcblxyXG4gICAgICAgIC8vIHNldHVwIEdMU0wgcHJvZ3JhbVxyXG4gICAgICAgIGNvbnN0IHNoYWRlclByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgICAgIHRoaXMuZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgICAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xyXG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICAgICAgLy8gbG9vayB1cCB3aGVyZSB2ZXJ0ZXggZGF0YSBuZWVkcyB0byBnb1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXHJcbiAgICAgICAgICAgIHNoYWRlclByb2dyYW0sXHJcbiAgICAgICAgICAgICdhX3Bvc2l0aW9uJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy50ZXhjb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcclxuICAgICAgICAgICAgc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgICAgICAgJ2FfdGV4Q29vcmQnXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBDcmVhdGUgYSBidWZmZXIgdG8gcHV0IHRocmVlIDJkIGNsaXAgc3BhY2UgcG9pbnRzIGluXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgLy8gQmluZCBpdCB0byBBUlJBWV9CVUZGRVIgKHRoaW5rIG9mIGl0IGFzIEFSUkFZX0JVRkZFUiA9IHBvc2l0aW9uQnVmZmVyKVxyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy5wb3NpdGlvbkJ1ZmZlcik7XHJcblxyXG4gICAgICAgIC8vIFR1cm4gb24gdGhlIHBvc2l0aW9uIGF0dHJpYnV0ZVxyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5wb3NpdGlvbkxvY2F0aW9uKTtcclxuICAgICAgICAvLyBDcmVhdGUgYSB0ZXh0dXJlLlxyXG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSB0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBwYXJhbWV0ZXJzIHNvIHdlIGNhbiByZW5kZXIgYW55IHNpemUgaW1hZ2UuXHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxyXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1MsXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxyXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1QsXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxyXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxyXG4gICAgICAgICAgICB0aGlzLmdsLk5FQVJFU1RcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcclxuICAgICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxyXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUixcclxuICAgICAgICAgICAgdGhpcy5nbC5ORUFSRVNUXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXhjb29yZEJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgLy8gbG9va3VwIHVuaWZvcm1zXHJcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgICAgICAgc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgICAgICAgJ3VfcmVzb2x1dGlvbidcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgICAgICAgc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgICAgICAgJ3Vfb2Zmc2V0J1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHNlc3Npb24ucmVxdWVzdFJlZmVyZW5jZVNwYWNlKCdsb2NhbCcpLnRoZW4oKHJlZlNwYWNlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMueHJSZWZTcGFjZSA9IHJlZlNwYWNlO1xyXG4gICAgICAgICAgICB0aGlzLnhyU2Vzc2lvbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXHJcbiAgICAgICAgICAgICAgICAodGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcCwgZnJhbWU6IFhSRnJhbWUpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblhyRnJhbWUodGltZSwgZnJhbWUpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMub25TZXNzaW9uU3RhcnRlZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgneHJTZXNzaW9uU3RhcnRlZCcpKTtcclxuICAgIH1cclxuXHJcbiAgICBvblhyRnJhbWUodGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcCwgZnJhbWU6IFhSRnJhbWUpIHtcclxuICAgICAgICBjb25zdCBwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSh0aGlzLnhyUmVmU3BhY2UpO1xyXG4gICAgICAgIGlmIChwb3NlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IHBvc2UudHJhbnNmb3JtLm1hdHJpeDtcclxuICAgICAgICAgICAgY29uc3QgbWF0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbWF0W2ldID0gbmV3IEZsb2F0MzJBcnJheShbbWF0cml4W2ldXSlbMF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJITURUcmFuc2Zvcm0nKShbXHJcbiAgICAgICAgICAgICAgICBtYXRbMF0sIG1hdFs0XSwgbWF0WzhdLCBtYXRbMTJdLFxyXG4gICAgICAgICAgICAgICAgbWF0WzFdLCBtYXRbNV0sIG1hdFs5XSwgbWF0WzEzXSwgXHJcbiAgICAgICAgICAgICAgICBtYXRbMl0sIG1hdFs2XSwgbWF0WzEwXSwgbWF0WzE0XSwgXHJcbiAgICAgICAgICAgICAgICBtYXRbM10sIG1hdFs3XSwgbWF0WzExXSwgbWF0WzE1XVxyXG4gICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGdsTGF5ZXIgPSB0aGlzLnhyU2Vzc2lvbi5yZW5kZXJTdGF0ZS5iYXNlTGF5ZXI7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGRvIGhhdmUgYSB2YWxpZCBwb3NlLCBiaW5kIHRoZSBXZWJHTCBsYXllcidzIGZyYW1lYnVmZmVyLFxyXG4gICAgICAgICAgICAvLyB3aGljaCBpcyB3aGVyZSBhbnkgY29udGVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIFhSRGV2aWNlIG11c3QgYmVcclxuICAgICAgICAgICAgLy8gcmVuZGVyZWQuXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIGdsTGF5ZXIuZnJhbWVidWZmZXIpO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBsb2FkIHRoZSBpbWFnZSBpbnRvIHRoZSB0ZXh0dXJlLiBXZWJHTCBrbm93cyBob3cgdG8gZXh0cmFjdCB0aGUgY3VycmVudCBmcmFtZSBmcm9tIHRoZSB2aWRlbyBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLlJHQkEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLlJHQkEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuZ2V0VmlkZW9FbGVtZW50KClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIodGhpcy53ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmdldFZpZGVvRWxlbWVudCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLndlYlJ0Y0NvbnRyb2xsZXIuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuWFJDb250cm9sbGVySW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uLmlucHV0U291cmNlcy5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgKHNvdXJjZTogWFJJbnB1dFNvdXJjZSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IFhSSW5wdXRTb3VyY2VbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueHJHYW1lcGFkQ29udHJvbGxlci51cGRhdGVTdGF0dXMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueHJSZWZTcGFjZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy54clNlc3Npb24ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKFxyXG4gICAgICAgICAgICAodGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcCwgZnJhbWU6IFhSRnJhbWUpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uWHJGcmFtZSh0aW1lLCBmcmFtZSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLm9uRnJhbWUuZGlzcGF0Y2hFdmVudChuZXcgWHJGcmFtZUV2ZW50KHtcclxuICAgICAgICAgICAgdGltZSxcclxuICAgICAgICAgICAgZnJhbWVcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXIodmlkZW9FbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdsTGF5ZXIgPSB0aGlzLnhyU2Vzc2lvbi5yZW5kZXJTdGF0ZS5iYXNlTGF5ZXI7XHJcbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydChcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgZ2xMYXllci5mcmFtZWJ1ZmZlcldpZHRoLFxyXG4gICAgICAgICAgICBnbExheWVyLmZyYW1lYnVmZmVySGVpZ2h0XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmdsLnVuaWZvcm00Zih0aGlzLm9mZnNldExvY2F0aW9uLCAxLjAsIDEuMCwgMC4wLCAwLjApO1xyXG5cclxuICAgICAgICAvLyBTZXQgcmVjdGFuZ2xlXHJcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxyXG4gICAgICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcclxuICAgICAgICAgICAgbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgICAgICAgICAgICAwLCAwLCBcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCAwLFxyXG4gICAgICAgICAgICAgICAgMCwgdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0LCBcclxuICAgICAgICAgICAgICAgIDAsIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodCxcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCAwLFxyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50LnZpZGVvV2lkdGgsIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodFxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgdGhpcy5nbC5TVEFUSUNfRFJBV1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFByb3ZpZGUgdGV4dHVyZSBjb29yZGluYXRlcyBmb3IgdGhlIHJlY3RhbmdsZVxyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy50ZXhjb29yZEJ1ZmZlcik7XHJcbiAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxyXG4gICAgICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcclxuICAgICAgICAgICAgbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgICAgICAgICAgICAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDEuMCwgMS4wLCAwLjAsIDEuMCwgMS4wXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICB0aGlzLmdsLlNUQVRJQ19EUkFXXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IHNpemU7IC8vIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxyXG4gICAgICAgIGxldCB0eXBlOyAvLyB0aGUgZGF0YSB0eXBlXHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZTsgLy8gbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgICAgbGV0IHN0cmlkZTsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxyXG4gICAgICAgIGxldCBvZmZzZXQ7IC8vIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBidWZmZXJcclxuXHJcbiAgICAgICAgLy8gQmluZCB0aGUgcG9zaXRpb24gYnVmZmVyLlxyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy5wb3NpdGlvbkJ1ZmZlcik7XHJcbiAgICAgICAgLy8gVGVsbCB0aGUgcG9zaXRpb24gYXR0cmlidXRlIGhvdyB0byBnZXQgZGF0YSBvdXQgb2YgcG9zaXRpb25CdWZmZXIgKEFSUkFZX0JVRkZFUilcclxuICAgICAgICBzaXplID0gMjsgLy8gMiBjb21wb25lbnRzIHBlciBpdGVyYXRpb25cclxuICAgICAgICB0eXBlID0gdGhpcy5nbC5GTE9BVDsgLy8gdGhlIGRhdGEgaXMgMzJiaXQgZmxvYXRzXHJcbiAgICAgICAgbm9ybWFsaXplID0gZmFsc2U7IC8vIGRvbid0IG5vcm1hbGl6ZSB0aGUgZGF0YVxyXG4gICAgICAgIHN0cmlkZSA9IDA7IC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cclxuICAgICAgICBvZmZzZXQgPSAwOyAvLyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBidWZmZXJcclxuICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25Mb2NhdGlvbixcclxuICAgICAgICAgICAgc2l6ZSxcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgbm9ybWFsaXplLFxyXG4gICAgICAgICAgICBzdHJpZGUsXHJcbiAgICAgICAgICAgIG9mZnNldFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gVHVybiBvbiB0aGUgdGV4Y29vcmQgYXR0cmlidXRlXHJcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnRleGNvb3JkTG9jYXRpb24pO1xyXG4gICAgICAgIC8vIGJpbmQgdGhlIHRleGNvb3JkIGJ1ZmZlci5cclxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMudGV4Y29vcmRCdWZmZXIpO1xyXG4gICAgICAgIC8vIFRlbGwgdGhlIHRleGNvb3JkIGF0dHJpYnV0ZSBob3cgdG8gZ2V0IGRhdGEgb3V0IG9mIHRleGNvb3JkQnVmZmVyIChBUlJBWV9CVUZGRVIpXHJcbiAgICAgICAgc2l6ZSA9IDI7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXHJcbiAgICAgICAgdHlwZSA9IHRoaXMuZ2wuRkxPQVQ7IC8vIHRoZSBkYXRhIGlzIDMyYml0IGZsb2F0c1xyXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlOyAvLyBkb24ndCBub3JtYWxpemUgdGhlIGRhdGFcclxuICAgICAgICBzdHJpZGUgPSAwOyAvLyAwID0gbW92ZSBmb3J3YXJkIHNpemUgKiBzaXplb2YodHlwZSkgZWFjaCBpdGVyYXRpb24gdG8gZ2V0IHRoZSBuZXh0IHBvc2l0aW9uXHJcbiAgICAgICAgb2Zmc2V0ID0gMDsgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYnVmZmVyXHJcbiAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG4gICAgICAgICAgICB0aGlzLnRleGNvb3JkTG9jYXRpb24sXHJcbiAgICAgICAgICAgIHNpemUsXHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZSxcclxuICAgICAgICAgICAgc3RyaWRlLFxyXG4gICAgICAgICAgICBvZmZzZXRcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIHNldCB0aGUgcmVzb2x1dGlvblxyXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTJmKFxyXG4gICAgICAgICAgICB0aGlzLnJlc29sdXRpb25Mb2NhdGlvbixcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnZpZGVvV2lkdGgsXHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gZHJhdyB0aGUgcmVjdGFuZ2xlLlxyXG4gICAgICAgIGNvbnN0IHByaW1pdGl2ZVR5cGUgPSB0aGlzLmdsLlRSSUFOR0xFUztcclxuICAgICAgICBjb25zdCBjb3VudCA9IDY7XHJcbiAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLmdsLmRyYXdBcnJheXMocHJpbWl0aXZlVHlwZSwgb2Zmc2V0LCBjb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzU2Vzc2lvblN1cHBvcnRlZChtb2RlOiBYUlNlc3Npb25Nb2RlKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgaWYgKG5hdmlnYXRvci54cikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnhyLmlzU2Vzc2lvblN1cHBvcnRlZChtb2RlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidmFyIHggPSB5ID0+IHsgdmFyIHggPSB7fTsgX193ZWJwYWNrX3JlcXVpcmVfXy5kKHgsIHkpOyByZXR1cm4geDsgfVxudmFyIHkgPSB4ID0+ICgpID0+IHhcbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9zZHBfXzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5leHBvcnQgeyBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSAnLi9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlcic7XHJcbmV4cG9ydCB7IFdlYlhSQ29udHJvbGxlciB9IGZyb20gJy4vV2ViWFIvV2ViWFJDb250cm9sbGVyJztcclxuZXhwb3J0IHtcclxuICAgIENvbmZpZyxcclxuICAgIENvbnRyb2xTY2hlbWVUeXBlLFxyXG4gICAgRmxhZ3MsXHJcbiAgICBOdW1lcmljUGFyYW1ldGVycyxcclxuICAgIFRleHRQYXJhbWV0ZXJzLFxyXG4gICAgT3B0aW9uUGFyYW1ldGVycyxcclxuICAgIEZsYWdzSWRzLFxyXG4gICAgTnVtZXJpY1BhcmFtZXRlcnNJZHMsXHJcbiAgICBUZXh0UGFyYW1ldGVyc0lkcyxcclxuICAgIE9wdGlvblBhcmFtZXRlcnNJZHMsXHJcbiAgICBBbGxTZXR0aW5nc1xyXG59IGZyb20gJy4vQ29uZmlnL0NvbmZpZyc7XHJcbmV4cG9ydCB7IFNldHRpbmdCYXNlIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ0Jhc2UnO1xyXG5leHBvcnQgeyBTZXR0aW5nRmxhZyB9IGZyb20gJy4vQ29uZmlnL1NldHRpbmdGbGFnJztcclxuZXhwb3J0IHsgU2V0dGluZ051bWJlciB9IGZyb20gJy4vQ29uZmlnL1NldHRpbmdOdW1iZXInO1xyXG5leHBvcnQgeyBTZXR0aW5nT3B0aW9uIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ09wdGlvbic7XHJcbmV4cG9ydCB7IFNldHRpbmdUZXh0IH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ1RleHQnO1xyXG5leHBvcnQgeyBQaXhlbFN0cmVhbWluZyB9IGZyb20gJy4vUGl4ZWxTdHJlYW1pbmcvUGl4ZWxTdHJlYW1pbmcnO1xyXG5cclxuZXhwb3J0IHsgQUZLQ29udHJvbGxlciBhcyBBZmtMb2dpYyB9IGZyb20gJy4vQUZLL0FGS0NvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IHsgTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSAnLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMnO1xyXG5leHBvcnQge1xyXG4gICAgRW5jb2RlclNldHRpbmdzLFxyXG4gICAgSW5pdGlhbFNldHRpbmdzLFxyXG4gICAgV2ViUlRDU2V0dGluZ3NcclxufSBmcm9tICcuL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyc7XHJcbmV4cG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cyc7XHJcbmV4cG9ydCB7IExvZ2dlciB9IGZyb20gJy4vTG9nZ2VyL0xvZ2dlcic7XHJcbmV4cG9ydCB7IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZCBhcyBVbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQgfSBmcm9tICcuL1V0aWwvQ29vcmRpbmF0ZUNvbnZlcnRlcic7XHJcbmV4cG9ydCB7IE1lc3NhZ2VTZW5kIH0gZnJvbSAnLi9XZWJTb2NrZXRzL01lc3NhZ2VTZW5kJztcclxuZXhwb3J0IHsgTWVzc2FnZVJlY3YsIE1lc3NhZ2VTdHJlYW1lckxpc3QgfSBmcm9tICcuL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUnO1xyXG5leHBvcnQgeyBXZWJTb2NrZXRDb250cm9sbGVyIH0gZnJvbSAnLi9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXInO1xyXG5leHBvcnQgeyBTaWduYWxsaW5nUHJvdG9jb2wgfSBmcm9tICcuL1dlYlNvY2tldHMvU2lnbmFsbGluZ1Byb3RvY29sJztcclxuXHJcbmV4cG9ydCB7IENhbmRpZGF0ZVBhaXJTdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVBhaXJTdGF0cyc7XHJcbmV4cG9ydCB7IENhbmRpZGF0ZVN0YXQgfSBmcm9tICcuL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0JztcclxuZXhwb3J0IHsgRGF0YUNoYW5uZWxTdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMnO1xyXG5leHBvcnQge1xyXG4gICAgSW5ib3VuZEF1ZGlvU3RhdHMsXHJcbiAgICBJbmJvdW5kVmlkZW9TdGF0c1xyXG59IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cyc7XHJcbmV4cG9ydCB7IE91dEJvdW5kVmlkZW9TdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1V0aWwvRXZlbnRFbWl0dGVyJztcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "../../library/node_modules/sdp/sdp.js":
/*!*********************************************!*\
  !*** ../../library/node_modules/sdp/sdp.js ***!
  \*********************************************/
/***/ ((module) => {

/* eslint-env node */


// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substring(2, 12);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substring(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substring(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
    attributes: parts.slice(2).join(' '),
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri +
      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +
      '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substring(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substring(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substring(7, sp), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substring(sp + 1, colon);
    parts.value = line.substring(colon + 1);
  } else {
    parts.attribute = line.substring(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substring(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substring(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substring(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substring(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substring(12),
    password: pwd.substring(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')
    .map(SDPUtils.parseRtcpFb);
  description.codecs.forEach(codec => {
    wildcardRtcpFb.forEach(fb=> {
      const duplicate = codec.rtcpFeedback.find(existingFeedback => {
        return existingFeedback.type === fb.type &&
          existingFeedback.parameter === fb.parameter;
      });
      if (!duplicate) {
        codec.rtcpFeedback.push(fb);
      }
    });
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substring(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substring(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substring(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substring(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substring(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 22);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substring(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substring(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substring(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substring(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/uiless.ts ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _epicgames_ps_lib_pixelstreamingfrontend_ue5_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @epicgames-ps/lib-pixelstreamingfrontend-ue5.2 */ "../../library/dist/lib-pixelstreamingfrontend.esm.js");
// Copyright Epic Games, Inc. All Rights Reserved.

document.body.onload = function () {
    // Example of how to set the logger level
    // Logger.SetLoggerVerbosity(10);
    // Create a config object
    var config = new _epicgames_ps_lib_pixelstreamingfrontend_ue5_2__WEBPACK_IMPORTED_MODULE_0__.Config({
        initialSettings: {
            AutoPlayVideo: true,
            AutoConnect: true,
            ss: "ws://localhost:80",
            StartVideoMuted: true,
        }
    });
    // Create a PixelStreaming instance and attach the video element to an existing parent div
    var pixelStreaming = new _epicgames_ps_lib_pixelstreamingfrontend_ue5_2__WEBPACK_IMPORTED_MODULE_0__.PixelStreaming(config, { videoElementParent: document.getElementById("videoParentElement") });
    // If browser denies autoplay, show "Click to play" and register a click-to-play handler
    pixelStreaming.addEventListener("playStreamRejected", function () {
        var clickToPlay = document.getElementById("clickToPlayElement");
        clickToPlay.className = "visible";
        clickToPlay.onclick = function () {
            pixelStreaming.play();
            clickToPlay.className = "";
            clickToPlay.onclick = undefined;
        };
    });
};

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,